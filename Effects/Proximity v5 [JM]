desc:Proximity v5 [JM]
options: gfx_hz = 50;

slider2:120<20,20000,1>-LS Cutoff [Hz]
slider3:0.5<0.01,4.0,0.01>-LS Q
slider4:0<-24,6,0.1>-LS Gain [dB]

slider5:10000<20,20000,1>-HS Cutoff [Hz]
slider6:0.5<0.01,4.0,0.01>-HS Q
slider7:0<-24,6,0.1>-HS Gain [dB]

slider8:0<0,1000,1>-Delay [ms]
//slider9:0<-90,90,0.01>Rotate [Â°]
//slider10:100<0,200,0.01>Width [%]
//slider11:0<-100,100,0.01>Center [%]
//slider12:0<-100,100,0.01>Left/Right [%]
slider13:1<0,1,1{Off,On}>-Fractional Delay
slider14:5<0,10,0.01>Smooth Coeff (0 = Off)
//slider15:0<-60,12,0.1>Volume [dB]

slider16:0<-6,6,0.5>-Pan Law [dB]

slider20:0<-1.2,1.2,0.01>ITD limit [ms]
slider21:0<-100,100,0.01>ILD limit [%]
slider22:0<-24,24,0.01>Shadow limit [dB]
slider23:1<0,2,0.01>Width factor

//slider13:0<0,10,0.01>Delay L [ms]
//slider20:0<0,10,0.01>Delay R [ms]
slider31:0<-1.2,1.2,0.01>-ITD [ms]
slider32:0<-100,100,0.1>-ILD [%]
slider33:mode=1<0,1,1{Thiran,APF}>Mode

slider34:0<-100,100,0.1>Pan [%]

slider58:-12<-60,0,0.01>Send Gain [dB]
slider59:60<0,120,0.01>Critical Radious
slider60:0<-94,6,0.01>Proximity



import Tale/rbj_filter.jsfx-inc

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output
out_pin:left reverb send
out_pin:right reverb send

@init
//last_gain=10^(gain_db/20);
pi2 = $pi/2;
log2db = 8.6858896380650365530225783783321; // 20 / ln(10)
db2log = 0.11512925464970228420089957273422; // ln(10) / 20 
sqrt2div2 = sqrt(2)/2;
sqrt2 = sqrt(2);

AMP_dB_i=1/8.68588963806504;

db=slider8; // initialize here but not in @slider for playback start
//pan=0.01*slider32;

//pdcdelay = pdc_delay;

function RMS(input, ms)
  instance(out, rms_s )
(
  coeff = exp(-1/(ms / 1000 * srate)); // usually 0.999..
  rms_s = (rms_s * coeff) + ((1 - coeff) * input * input);
  out = sqrt(rms_s);
  out;
);


function pitchlibInitBuffer(scopebuffer_in, scopebuffermax_in)
  local()
  global()
  instance(scopeptr, scopebuffermax, scopebuffer, len)
  (
    scopebuffer     = scopebuffer_in;
    scopebuffermax  = scopebuffermax_in;
    len             = scopebuffermax_in - scopebuffer_in;
    
    scopeptr < scopebuffer ? (
      scopeptr = scopebuffer
    ) : ( scopeptr >= scopebuffermax ) ? scopebuffer
  );

/*
function pitchlibReadBufferAt(dtime1, dtime2)
  local(t, t2, offset,
        tm1, tm2, tm3, tm4,
        a0, a1, a2, a3, a4,
        d0l, d1l, d2l, d3l, d4l,
        d0r, d1r, d2r, d3r, d4r,
        y1l1, y1r1, y1l2, y1r2, y1l3, y1r3, y1l4, y1r4, k)
  global(fracdly)
  instance(scopeptr, readptr, scopebuffermax, scopebuffer, frac, 
  outL1, outR1, outL2, outR2, outL3, outR3, outL4, outR4, len)
  (

    
    
    fracdly ? (
    
      /// Left ///
      offset    = dtime1 - floor(dtime1) + floor(dtime1*.5)*2;
      readptr   = scopeptr;
      readptr  -= floor(offset)+4;
      readptr < scopebuffer ? readptr += len;
      
      d1l = readptr[0];
      d1r = readptr[1];
      
      (readptr += 2) >= scopebuffermax ? readptr -= len;
          
      d0l = readptr[0];
      d0r = readptr[1];
      
      frac       = dtime1 * .5 - floor(dtime1 * .5);
      k = (1-(frac))/(1.01+(frac));
      //k = (1-(frac))/(1+(frac));
      outL1 = k*(d0l-y1l1)+d1l;
      outR1 = k*(d0r-y1r1)+d1r;
      y1l1 = outL1;
      y1r1 = outR1;
      
      /// Right ///
      offset    = dtime2 - floor(dtime2) + floor(dtime2*.5)*2;
      readptr   = scopeptr;
      readptr  -= floor(offset)+4;
      readptr < scopebuffer ? readptr += len;
    
      d1l = readptr[0];
      d1r = readptr[1];
      
      (readptr += 2) >= scopebuffermax ? readptr -= len;
          
      d0l = readptr[0];
      d0r = readptr[1];
      
      frac = dtime2 * .5 - floor(dtime2 * .5);
      k = (1-(frac))/(1.01+(frac));
      //k = (1-(frac))/(1+(frac));
      outL2 = k*(d0l-y1l2)+d1l;
      outR2 = k*(d0r-y1r2)+d1r;
      y1l2 = outL2;
      y1r2 = outR2;
    ):(
      /// Left ///
      offset    = dtime1 - floor(dtime1) + floor(dtime1*.5)*2;
      readptr   = scopeptr;
      readptr  -= floor(offset)+2;
      readptr < scopebuffer ? readptr += len;
      
      outL1 = readptr[0];
      outR1 = readptr[1];
      
      /// Right ///
      offset    = dtime2 - floor(dtime2) + floor(dtime2*.5)*2;
      readptr   = scopeptr;
      readptr  -= floor(offset)+2;
      readptr < scopebuffer ? readptr += len;
      
      outL2 = readptr[0];
      outR2 = readptr[1];
    );
    
  );
//*/

//*
function pitchlibReadBufferAt(dtime1, dtime2)
  local(t, t2, offset,
        tm1, tm2, tm3, tm4,
        a0, a1, a2, a3, a4,
        d0l, d1l, d2l, d3l, d4l,
        d0r, d1r, d2r, d3r, d4r,
        y1l1, y1r1, y1l2, y1r2, y1l3, y1r3, y1l4, y1r4, k)
  global(fracdly)
  instance(scopeptr, readptr, scopebuffermax, scopebuffer, frac, 
  outL1, outR1, outL2, outR2, outL3, outR3, outL4, outR4, len)
  (
    
      /// Left ///
      offset    = dtime1 - floor(dtime1) + floor(dtime1*.5)*2;
      readptr   = scopeptr;
      readptr  -= floor(offset)+4;
      readptr < scopebuffer ? readptr += len;
      
      d1l = readptr[0];
      d1r = readptr[1];
      
      (readptr += 2) >= scopebuffermax ? readptr -= len;
          
      d0l = readptr[0];
      d0r = readptr[1];
      
      frac       = dtime1 * .5 - floor(dtime1 * .5);
      k = (1-(frac))/(1.01+(frac));
      //k = (1-(frac))/(1+(frac));
      outL1 = k*(d0l-y1l1)+d1l;
      outR1 = k*(d0r-y1r1)+d1r;
      y1l1 = outL1;
      y1r1 = outR1;
      
      /// Right ///
      offset    = dtime2 - floor(dtime2) + floor(dtime2*.5)*2;
      readptr   = scopeptr;
      readptr  -= floor(offset)+4;
      readptr < scopebuffer ? readptr += len;
    
      d1l = readptr[0];
      d1r = readptr[1];
      
      (readptr += 2) >= scopebuffermax ? readptr -= len;
          
      d0l = readptr[0];
      d0r = readptr[1];
      
      frac = dtime2 * .5 - floor(dtime2 * .5);
      k = (1-(frac))/(1.01+(frac));
      //k = (1-(frac))/(1+(frac));
      outL2 = k*(d0l-y1l2)+d1l;
      outR2 = k*(d0r-y1r2)+d1r;
      y1l2 = outL2;
      y1r2 = outR2;

    
  );
//*/

function pitchlibUpdateBuffer2(ll, rr)
  local()
  global()
  instance(scopeptr, scopebuffermax, scopebuffer, len)
  (
    scopeptr[] = ll;
    scopeptr[1] = rr;
    scopeptr += 2;
    scopeptr >= scopebuffermax ? scopeptr -= len;
  );
  
  
location = 65536*4;
//bigbuffer = 65536*40;
bigbuffer = 65536/16;
M.pitchlibInitBuffer(location, location + bigbuffer);

function smooth_parameter(target)
instance(s, coeff)
global()
local(y, v)
(
  v = coeff*(target - s);
  y = v + s;
  s = y + v;
  y
);

function initialize_smoother(cutoff)
instance(coeff)
global(srate)
local(g)
( 
  g = tan($pi*cutoff/srate);
  coeff = g/(1+g);  
);

function interpolator_init(slider_idx)
instance(next_val, idx, s)
local()
global()
(
  s = slider(slider_idx);
  next_val = slider(slider_idx);
  idx = slider_idx;
);

function interpolator_block()
instance(delta, next_changepoint_t, next_val, idx)
local(next_changepoint_y)
global(samplesblock)
(
  next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
  next_changepoint_t > 0 ? 
  (
    next_val = slider(idx);
  ) : (
    next_changepoint_y = slider(idx);
    next_changepoint_t = samplesblock;
  );
    
  delta = (next_changepoint_y - next_val) / next_changepoint_t;
);
  
function interpolate()
instance(delta, next_changepoint_t, next_val, idx, coeff)
local(current_value, next_changepoint_y)
global(current_sample)
(
  current_value = next_val;
  current_sample == next_changepoint_t ? 
  (
    delta = 0;
    next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
    delta = next_changepoint_t > current_sample ? (next_changepoint_y - current_value) / (next_changepoint_t-current_sample) : 0;
  );
    
  next_val = current_value + delta;
    
  coeff > 0 ? this.smooth_parameter(current_value) : current_value
);


//M_interpolator.interpolator_init(8); //init delay value interpolation
//ITD_interpolator.interpolator_init(31); //init delay value interpolation
p1_interpolator.interpolator_init(34); // init interpolation
p2_interpolator.interpolator_init(60); // init interpolation
  

@slider
//next_gain=10^(gain_db/20);

lscut = slider2;
lsq = slider3;
hscut = slider5;
hsq = slider6;

slider4 = 20*log10(((next_gain-1)/1.1)+1) ;
slider7 = 20*log10(((next_gain-1)/1.4)+1) ;

//hs_gain = 10^(slider13/20);
//hs0.rbj_hs(slider11, slider12, hs_gain);
//hs1.rbj_hs(slider11, slider12, hs_gain);

delay = slider8;
//M_interpolator.initialize_smoother(slider14); //interpolation coeff
//ITD_interpolator.initialize_smoother(slider14); //interpolation coeff
p1_interpolator.initialize_smoother(slider14);  // interpolation coeff
p2_interpolator.initialize_smoother(slider14);  // interpolation coeff


panlaw=exp(slider16*AMP_DB_i);
pancomp=(panlaw > 1.0 ? 1.0/panlaw : panlaw);
ddb=0.0;
dpan=0.0;

fracdly = slider13;
crit = 10^(slider58/20);
crit_rad_coeff = slider59;
shadow_limit = slider22;
width = slider23;

//width = slider10 / 200;
//center = min(slider11/100+1,1);
//side = (1-slider11/100);
//left = -min(slider12/100,0);
//left1 = -max(slider12/100-1,-1);
//right = max(slider12/100,0);
//right1 = min(1+slider12/100,1);


@block
//d_gain = (next_gain - last_gain)/samplesblock;
shadow_val = 10^(-abs(pan_smooth*shadow_limit)/20);
pan_smooth < 0 ? (shadow0 =1; shadow1 = shadow_val):(shadow0 = shadow_val; shadow1 = 1);
//pan_smooth < 0 ? (shadow0 =1; shadow1 = 1+pan_smooth):(shadow0 = 1-pan_smooth; shadow1 = 1);

ls0.rbj_ls(lscut, lsq, ((last_gain-1)/1.1)+1 );
ls1.rbj_ls(lscut, lsq, ((last_gain-1)/1.1)+1 );
hs0.rbj_hs(hscut, hsq, (((last_gain-1)/1.4)+1) *shadow0);
hs1.rbj_hs(hscut, hsq, (((last_gain-1)/1.4)+1) *shadow1);
debug = ((last_gain-1)/1.4)+1 ;
debug2 = (((last_gain-1)/1.4)+1 )*shadow0;
//M_interpolator.interpolator_block();
//ITD_interpolator.interpolator_block();
p1_interpolator.interpolator_block();
p2_interpolator.interpolator_block();

/*
cnt=0;
ddb=0.0;
dpan=0.0;

pan_chg_splpos=slider_next_chg(2, tgtpan);
pan_chg_splpos > 0 ? 
(
  pan=0.01*slider32;
) : (
  tgtpan = slider32;
  pan_chg_splpos = samplesblock;
);
dpan=(tgtpan*0.01-pan)/pan_chg_splpos;
//*/
@sample
//slider60 = gain_db;
//slider31 = slider20*slider34/100;
//slider32 = slider21*slider34/100;

//RMS((spl0+spl2)/2, 200);

pan_smooth = p1_interpolator.interpolate()/100;
pan = pan_smooth*slider21/100;
prox = p2_interpolator.interpolate();
last_gain = 10^(prox/20);


x = M_interpolator.interpolate();
M = (x*2)*srate/1000;
//ITD = srate*2*ITD_interpolator.interpolate()/1000;
ITD = srate*2*slider20*pan_smooth/1000;
ITD > 0 ? (M1=ITD;M2=0):(M2=-ITD;M1=0);
//!fracdly ? (ITD = floor(ITD*.5)*2;);



spl0 = ls0.rbj_df1(spl0);
spl1 = ls1.rbj_df1(spl1);

spl0 = hs0.rbj_df1(spl0);
spl1 = hs1.rbj_df1(spl1);
mid = (spl0 + spl1)/2;
sid = (spl0 - spl1)/2 * last_gain^width;
debug3 = (last_gain-last_gain*width);
/*
spl0 = (mid + sid);
spl1 = (mid - sid);
//*/

//*
spl0 = (mid + sid) * last_gain;
spl1 = (mid - sid) * last_gain;
//*/

/*
spl2 = 10 * (mid + sid) * min(0.01,last_gain); // PromieÃ± krytyczny
spl3 = 10 * (mid - sid) * min(0.01,last_gain);
//*/

//*
crit_rad = atan(crit_rad_coeff*last_gain)*crit/pi2; // PromieÃ± krytyczny
spl2 = (mid + sid) * crit_rad;
spl3 = (mid - sid) * crit_rad;
//*/

mode ? (
  ap0.rbj_ap(srate/M1,sqrt2div2);
  ap1.rbj_ap(srate/M2,sqrt2div2);
  spl0 = ap0.rbj_df1(spl0);
  spl1 = ap1.rbj_df1(spl1);
):(
  M.pitchlibUpdateBuffer2(spl0, spl1);
  M < bigbuffer ? (
  M.pitchlibReadBufferAt(M+M1,M+M2);
  spl0 = M.outL1;
  spl1 = M.outR2;
  );
);

//*

/*
cnt == pan_chg_splpos ? 
(
  dpan=0.0;
  pan_chg_splpos=slider_next_chg(2, tgtpan);
  pan_chg_splpos > cnt ? 
  (
    dpan=(tgtpan*0.01-pan)/(pan_chg_splpos-cnt);
  );
);
//*/

adj=exp(db*AMP_DB_i);
panlaw != 1.0 ? 
(
  panlaw > 1.0 ? adj *= panlaw;
  panatt = abs(pan);
  adj *= pancomp+(1.0-pancomp)*(2.0/(2.0-panatt)-1.0);
);

adj0=adj1=adj;
pan < 0.0 ? adj1 *= 1.0+pan;
pan > 0.0 ? adj0 *= 1.0-pan;

spl0 *= adj0;
spl1 *= adj1;

//db += ddb;
pan += dpan;
cnt += 1;
//*/

//last_gain += d_gain;


@gfx 200 200
b = 0.2;
gfx_set(b,b,b,1);
gfx_rect(0,0,gfx_w,gfx_h);

gfx_set(1,1,1,1);
//*
mouse_cap ? (
  //gfx_set(1,1,1,0.5);
  //gfx_set(1,1,1,1);
  //library.xcross(mouse_x,mouse_y,4,4);
  //library.tcross(mouse_x,mouse_y,8,8);
  //library.rosette(mouse_x,mouse_y,7,300,0);
  //library.polygon(mouse_x,mouse_y,7,100,0);
  //library.point(mouse_x,mouse_y,1,1,1);
  //library.tcrosspoints(mouse_x,mouse_y,32,32,1,1,1);
  //library.xcrosspoints(mouse_x,mouse_y,32,32,1,1,1);
  //gfx_circle(mouse_x,mouse_y,8,0,1);
  //jm.polygonpoints(mouse_x,mouse_y,7,100,0,1,1,1);
  //library.moveto(mouse_x,mouse_y);
  //library.drawCentsSymbol();
  mousex=mouse_x;
  mousey=mouse_y;
  //slider3 =  2*(mouse_x-gfx_w/2)/gfx_w;
  //slider2 = 2*-(mouse_y-gfx_h/2)/gfx_h;
  slider34 =100 * 2*(mouse_x-gfx_w/2)/gfx_w;
  slider60 = 24 * -(mouse_y-gfx_h/2)/gfx_h - 12;
);

//*
//gfx_x = mousex; gfx_y = mousey;
//gfx_setpixel(1,1,1);
//gfx_x += 0; gfx_y -= 16;
//gfx_drawnumber(a,2);
//gfx_drawstr(
//gfx_printf("%g + %g i", slider2, slider3);

gfx_x = pan_smooth*gfx_w/2+gfx_w/2;
//gfx_setpixel(1,1,1);
gfx_a = gfx_a_buff = min(0.945, 0.7*last_gain+0.3);
//gfx_set(1,1,1,0.945);
//gfx_a = 0.945;
//gfx_circle(gfx_x,gfx_y,gfx_h-mousey,1,1);
gfx_circle(gfx_x, gfx_h/2, gfx_h*last_gain/2, 1, 1);
//gfx_set(0.2,0.2,0.2,1); gfx_circle(gfx_x, gfx_h/2, 2*sqrt(RMS.out)*gfx_h*last_gain/2, 1, 1);

//gfx_x = pan*gfx_w/2+gfx_w/2;gfx_line(gfx_x, 0, gfx_x, gfx_h);gfx_line(gfx_w/2, 0, gfx_w/2, gfx_h);
//gfx_rect(gfx_x-(gfx_w*last_gain/8), 0, gfx_h*last_gain/2, gfx_h, 1);
//gfx_x = pan*gfx_w/2+gfx_w/2; gfx_rect(gfx_x-gfx_w*last_gain/2, 15*gfx_h/16, gfx_w*last_gain, gfx_h, 1);
//gfx_set(1,0.4,0.4,0.5);gfx_x = 1000*ITD/srate/2*gfx_w/2+gfx_w/2; gfx_rect(gfx_x-gfx_w*last_gain/2, 14*gfx_h/16, gfx_w*last_gain, gfx_h/16, 1);
gfx_set(0.4,0.4,1);
gfx_a = gfx_a_buff;
//gfx_circle(gfx_x, gfx_h/2, gfx_h*crit_rad/2, 1, 1);
gfx_circle(gfx_w/2, gfx_h/2, gfx_h*crit_rad/2, 1, 1);
//*/

//*
//c = 0.38;
gfx_set(0.8,0.3,0.3,1);
//gfx_set(0.7,0.26,0.26,1);
gfx_x = 5; gfx_y = 5;
//gfx_drawnumber(ITD*1000/srate/2,2);
//gfx_printf("ITD %1.2f ms", ITD*1000/srate/2); gfx_x = 5; gfx_y += 10;
//gfx_printf("ILD %3.0f ", 100*pan); gfx_x = 5; gfx_y += 10;
notch_freq = abs(srate/ITD);
notch_freq < srate && ITD!=0 ? (gfx_printf("N %3.0f Hz", notch_freq); gfx_x = 5; gfx_y += 10;);
//*/
