desc:Stereo Tool [JM]
author: Jozef Mackowiak
version: 0.0.0
changelog: Initial Commit
about:
  # Stereo Tool
  Utility for modyfying azimuth, balance and width of stereo field.

License: MIT
Copyright (C) 2023 Jozef Mackowiak


options: gfx_hz = 60;

/slider1:0<-180,180,0.001>Rotation [°]
slider1:0<-180,180,0.001>Azimuth [°]
slider2:0<-1,1,0.001>Balance [L-R]
slider3:0<-1,1,0.001>Width [S-M]
slider4:lr_invert=0<0,1,1{Off,On}>LR Invert
//slider2:0<0,1,0.001>Rotation [rad/π]
//slider3:0<-1000,1000,1>Freq shift [Hz]
slider12:5<0,10,0.01>Smooth Coeff (0 = Off)

imoport JM.jsfx-inc

/// TODO: Pan, Multiplyer, Volume

@init
ext_nodenorm=0; // no noise in output

/*
ms = 0.01;
decay = exp(-1.0/(ms*srate*0.001));

amp_LO = 0.001;
dB_LO = -60.0;
ln10 = log(10);
ln2 = log(2);

function peak_dB (a) local (p, dB)
(
  a <= amp_LO ? p = dB_LO : dB = 8.6562*log(a);
);

function peak (sample) local (in) instance (p)
(
  in = abs(sample);
  in > p ? p = in : p = p*decay;
);
//*/


two_div_sqrt2 = 2/sqrt(2);
//slider2 = 1;
pi = $pi;
pidiv2 = pi/2;
pidiv4 = pi/4;
Angle = 0;

hold = 0;
i = 0;
gain=1;

//gfx_clear=-1;
off = 500000;
rot=-45*0.017453292;
DOTS = 0;
LINES = 1;
RAYS = 2;
//MAXDRAWSPLS = 100000;
PHASEUPDATERATE = srate/8;
n = 0;
phC = 0;
ph = 0;

attack = 10 ^ ( (10000 / srate) / 20 );
//release = 10 ^ ( (2 / srate) / 20 );
release = 10 ^ ( (10 / srate) / 20 );

//slider48 ? (gfx_clear=-1):(gfx_clear=0);
gfx_clear=0;
MAXDRAWSPLS = 10000;
limits = 0;
expansion = 0;
alpha = 0.2;


//gfx_clear=-1;
log10_2 = log10(2.0);
pi = $pi;
pi2 = 2*$pi;
sqrt2pi = sqrt(2.0*$pi);
sqrt2 = sqrt(2);
Angle = 2*$pi/16;
rotCosAngle = cos(Angle);
rotSinAngle = sin(Angle);
gfx_ext_retina=1.0;
buffer_length = srate/4;
buffer_index = 0;
freemem = (input_buffer     = freemem) + buffer_length*2;
freemem = (input_buffer_cpy = freemem) + buffer_length*2;

function log2(x)
(
    log(x) / log(2);
);

function dbtoa(db)
(
    pow(10.0, db * 0.05);
);

function atodb(amp)
(
    20.0 * log10(amp);
);

function moveto (x,y) (
  gfx_x = x; gfx_y = y;
);

function moveby (x,y) (
  gfx_x += x; gfx_y += y;
);

function movetopolar (x,y,radius,angle) (
  gfx_x = x+sin(angle)*radius;
  gfx_y = y-cos(angle)*radius;
);

function movebypolar (x,y,radius,angle) (
  gfx_x += x+sin(angle)*radius;
  gfx_y += y-cos(angle)*radius;
);

function linepolar (x,y,radius,angle,aa) (
  gfx_line(x,y,x+sin(angle)*radius,y-cos(angle)*radius,aa);
);

function linetopolar (radius,angle,aa) (
  gfx_lineto(gfx_x + sin(angle)*radius,gfx_y - cos(angle)*radius,aa);
);




function smooth_parameter(target)
instance(s, coeff)
global()
local(y, v)
(
  v = coeff*(target - s);
  y = v + s;
  s = y + v;
  y
);

function initialize_smoother(cutoff)
instance(coeff)
global(srate)
local(g)
( 
  g = tan($pi*cutoff/srate);
  coeff = g/(1+g);  
);

function interpolator_init(slider_idx)
instance(next_val, idx, s)
local()
global()
(
  s = slider(slider_idx);
  next_val = slider(slider_idx);
  idx = slider_idx;
);

function interpolator_block()
instance(delta, next_changepoint_t, next_val, idx)
local(next_changepoint_y)
global(samplesblock)
(
  next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
  next_changepoint_t > 0 ? 
  (
    next_val = slider(idx);
  ) : (
    next_changepoint_y = slider(idx);
    next_changepoint_t = samplesblock;
  );
    
  delta = (next_changepoint_y - next_val) / next_changepoint_t;
);
  
function interpolate()
instance(delta, next_changepoint_t, next_val, idx, coeff)
local(current_value, next_changepoint_y)
global(current_sample)
(
  current_value = next_val;
  current_sample == next_changepoint_t ? 
  (
    delta = 0;
    next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
    delta = next_changepoint_t > current_sample ? (next_changepoint_y - current_value) / (next_changepoint_t-current_sample) : 0;
  );
    
  next_val = current_value + delta;
    
  coeff > 0 ? this.smooth_parameter(current_value) : current_value
);

angle_interpolator.interpolator_init(1); // init interpolation
width_interpolator.interpolator_init(3); // init interpolation
balance_interpolator.interpolator_init(2); // init interpolation
//angle_interpolator.initialize_smoother(20);  // interpolation coeff


@slider
//width = slider3*pi/4;
//balance = slider2*pi/4 + pi/4;
angle_interpolator.initialize_smoother(slider12);  // interpolation coeff
width_interpolator.initialize_smoother(slider12);  // interpolation coeff
balance_interpolator.initialize_smoother(slider12);  // interpolation coeff

@block
angle_interpolator.interpolator_block();
width_interpolator.interpolator_block();
balance_interpolator.interpolator_block();

@sample
Angle = pi*angle_interpolator.interpolate()/180;
width = (width_interpolator.interpolate()+lr_invert*2)*pidiv4;
balance = balance_interpolator.interpolate()*pidiv4 + pidiv4;
/*
//db_chg_splpos -> -1 if no new changes OR sample offset of new change (relative to current block)
Angle_chg_splpos = slider_next_chg(1, next_Angle_value);

Angle_chg_splpos > 0 ?
(
  Angle = (10 ^ (next_Angle_value / 20));
);
*/

_rotC = cos(Angle);
_rotS = sin(Angle);

_widC = cos(width);
_widS = sin(width);

_balC = cos(balance);
_balS = sin(balance);


/*// Balance
ch0 = balCosAngle*spl0;
ch1 = balSinAngle*spl1;
spl0 = two_div_sqrt2*ch0;
spl1 = two_div_sqrt2*ch1;
//*/

/*// Width
ch0 = widCosAngle*spl0+widSinAngle*spl1;
ch1 = widSinAngle*spl0+widCosAngle*spl1;
spl0 = ch0;
spl1 = ch1;
//*/

/*// Rotation
ch0 = rotCosAngle*spl0-rotSinAngle*spl1;
ch1 = rotSinAngle*spl0+rotCosAngle*spl1;
spl0 = ch0;
spl1 = ch1;
//*/




//*
__LL = two_div_sqrt2*(_rotC*_widC*_balC - _rotS*_widS*_balC);
__RL = two_div_sqrt2*(_rotC*_widS*_balC + _rotS*_widC*_balC);
__LR = two_div_sqrt2*(_rotC*_widS*_balS - _rotS*_widC*_balS);
__RR = two_div_sqrt2*(_rotC*_widC*_balS + _rotS*_widS*_balS);
ch0 = spl0;
ch1 = spl1;
spl0 = __LL*spl0 + ch1*__LR;
spl1 = __RR*spl1 + ch0*__RL;
//*/

/*
__LL = (_rotC*_widC*_balC - _rotS*_widS*_balC);
__RL = (_rotC*_widS*_balC + _rotS*_widC*_balC);
__LR = (_rotC*_widS*_balS - _rotS*_widC*_balS);
__RR = (_rotC*_widC*_balS + _rotS*_widS*_balS);
ch0 = spl0;
ch1 = spl1;
spl0 = __LL*spl0 + ch1*__LR;
spl1 = __RR*spl1 + ch0*__RL;
//*/

/*
__LL = two_div_sqrt2*(_rotC*_balC - _rotS*_balC);
__LR = two_div_sqrt2*(_rotC*_balC - _rotS*_balC);
__RL = two_div_sqrt2*(_rotS*_balS + _rotC*_balS);
__RR = two_div_sqrt2*(_rotS*_balS + _rotC*_balS);
//*/


/*// 3 in 1
ch0 = rotCosAngle*widCosAngle*two_div_sqrt2*balCosAngle*spl0+widSinAngle*two_div_sqrt2*balSinAngle*spl1-rotSinAngle*widSinAngle*two_div_sqrt2*balCosAngle*spl0+widCosAngle*two_div_sqrt2*balSinAngle*spl1;
ch1 = rotSinAngle*widCosAngle*two_div_sqrt2*balCosAngle*spl0+widSinAngle*two_div_sqrt2*balSinAngle*spl1+rotCosAngle*widSinAngle*two_div_sqrt2*balCosAngle*spl0+widCosAngle*two_div_sqrt2*balSinAngle*spl1;
spl0 = ch0;
spl1 = ch1;
//*/

/*// 3 in 1
ch0 = two_div_sqrt2*(_rotC*(_widC*_balC*spl0 + _widS*_balS*spl1) - _rotS*(_widS*_balC*spl0 + _widC*_balS*spl1));
ch1 = two_div_sqrt2*(_rotS*(_widC*_balC*spl0 + _widS*_balS*spl1) + _rotC*(_widS*_balC*spl0 + _widC*_balS*spl1));
spl0 = ch0;
spl1 = ch1;
//*/

input_buffer[buffer_index*2  ] = spl0;
input_buffer[buffer_index*2+1] = spl1;
buffer_index = (buffer_index + 1)%buffer_length;

//////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
expansion ? (
  maxsamples = max(abs(spl0),abs(spl1));
  //gain > 1/maxsamples ? (gain /= attack; i = 0;):(i < srate*hold ? (i+=1):(gain *= release;) );
  gain > 1/maxsamples ? (gain /= attack):(gain *= release);
  spl0 *= gain;
  spl1 *= gain;
  mult = gain;
):(spl0 *= mult; spl1 *= mult; gain = mult;);
//*/


//////////////////////////////////////////////////////////////////////////////////////////////////////////




/*
pBitL = log(L.p.peak(spl0     ))/ln2;
pBitR = log(R.p.peak(spl1     ))/ln2;
pBitM = log(M.p.peak(spl0+spl1))/ln2;
pBitS = log(S.p.peak(spl0-spl1))/ln2;
//*/

/*
pBitL = 20*log(L.p.peak(spl0     ))/ln10;
pBitR = 20*log(R.p.peak(spl1     ))/ln10;
pBitM = 20*log(M.p.peak(spl0+spl1))/ln10;
pBitS = 20*log(S.p.peak(spl0-spl1))/ln10;
//*/

@gfx 400 250
//size = min(gfx_w,gfx_h*.95)|0;
size = min(gfx_w,gfx_h)|0;

moveto(gfx_w/2,gfx_h/2);
//*
degrees = 360*Angle/pi/2;


cntr_x = gfx_w/2;
//cntr_y = 125;
cntr_y = gfx_h/2;

/*
gfx_a = 0.5;
gfx_x = cntr_x - 90;
gfx_y = cntr_y - 90;
gfx_drawstr("L");
gfx_x = cntr_x + 80;
gfx_y = cntr_y - 90;
gfx_drawstr("R");
//*/

//gfx_a = 1;
//gfx_r = 0.7; gfx_g = 0.7; gfx_b = 0.7;
//gfx_circle(cntr_x,cntr_y,cntr_y-18,1,1);
//gfx_circle(cntr_x,cntr_y,cntr_y,1,1);

//gfx_circle(cntr_x,size/2,size/2,1,1);
//gfx_r = 0; gfx_g = 0; gfx_b = 0;
//gfx_circle(cntr_x,cntr_y,cntr_y-20,1,1);
//gfx_circle(cntr_x,cntr_y,cntr_y-2,1,1);
//gfx_circle(cntr_x,size/2,size/2-2,1,1);
lineX = sin(-Angle) * 100;// * width;
lineY = cos(-Angle) * 100;// * width;



gfx_set(0.7,0.2,0.2,1);
//gfx_line(cntr_x,cntr_y,cntr_x + lineX,cntr_y + lineY,1);
//gfx_r = 0; gfx_g = 0; gfx_b = 1;
//gfx_line(cntr_x,cntr_y,cntr_x + 1-lineX,cntr_y + 1-lineY,1);

//linepolar(cntr_x,cntr_y,cntr_y-20,Angle,0);
//linepolar(gfx_w/2,gfx_h/2,gfx_h/2-20,Angle,0);
//linepolar(cntr_x,size/2,size/2,Angle,0);
linepolar(cntr_x,cntr_y,size/2,Angle,0);

gfx_set(0.2,0.2,0.7,1);
linepolar(cntr_x,cntr_y,__LL*size/2/sqrt2,-pidiv4,0);
linepolar(cntr_x,cntr_y,__RR*size/2/sqrt2,pidiv4,0);
gfx_set(0.2,0.7,0.2,0.5);
linepolar(cntr_x,cntr_y,__RL*size/2/sqrt2,pidiv4,0);
linepolar(cntr_x,cntr_y,__LR*size/2/sqrt2,-pidiv4,0);


//////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
// override drawing functions to center
gxo = gfx_w*.5 - size*.5;
function gfx_lineto(x,y,aa) ( gfx_x+=gxo; gfx_lineto(x+gxo,y,aa); gfx_x-=gxo; );
function gfx_setpixel(r,g,b) ( gfx_x+=gxo; gfx_setpixel(r,g,b); gfx_x-=gxo; );
function gfx_drawnumber(y,x) ( gfx_x+=gxo; gfx_w<200||gfx_drawnumber(y,x); gfx_x-=gxo; );
function gfx_drawchar(x) (gfx_x+=gxo; gfx_w<200||gfx_drawchar(x); gfx_x-=gxo;);
//*/



(mouse_cap) ? (
  gfx_r=gfx_g=gfx_b=0; gfx_a=1;
  gfx_x=gfx_y=0;
  gfx_rectto(gfx_w,gfx_h);
);

gfx_r=gfx_g=gfx_b=0; gfx_a=0.025;
gfx_x=gfx_y=0;
gfx_rectto(gfx_w,gfx_h);


  /// dB lines ///
  gfx_set(0.5,1,0.5,0.6*blur);
  gfxw2 = gfx_w/2;
  gfxh2 = gfx_h/2;
  centre = min(gfxw2,gfxh2);
  scalex = 1;

//* /// Distribute values ///
buffer_index_buffer = buffer_index;
buffer_index_max = max(buffer_index_max,buffer_index);
buffer_index = 0;
memcpy(input_buffer_cpy, input_buffer, buffer_length*2);

    gfx_a = 0.8;
//*      /// Vectorscope ///
//vectorscope ? (
  gfx_set(1,1,1);
  i = 0;
  loop(buffer_index_buffer,
    point_angle = atan2(input_buffer_cpy[i*2],input_buffer_cpy[i*2+1])-7*pi/4;
    point_radius = sqrt(sqr(input_buffer_cpy[i*2])+sqr(input_buffer_cpy[i*2+1]))/sqrt2;
    gfx_x = gfxw2+cos(point_angle)*centre*(point_radius)^(scalex);
    gfx_y = gfxh2-sin(point_angle)*centre*(point_radius)^(scalex);
    gfx_a = 0.8;
    //gfx_a = 0.2;
    gfx_setpixel(1,1,1);
    
    //*
    //gfx_a *= line_alpha;
    gfx_a *= 0.2;
    gfx_line(gfx_x,gfx_y,old_x,old_y);
    old_x = gfx_x;
    old_y = gfx_y;
    //*/
    i+=1;
  );
//);
//*/


//////////////////////////////////////////////////////////////////////////////////////////////////////////





/*
x1 = gfx_w/2;
y1 = 0 - scale;
x2 = (gfx_w+size)/2 + scale;
y2 = size/2;
x3 = gfx_w/2;
y3 = size + scale;
x4 = (gfx_w-size)/2 - scale;
y4 = size/2;
//*/

/*
scale = 1;
scalePx = 1;
x1 = gfx_w/2;
y1 = 0 - scale + scalePx;
x2 = (gfx_w+size)/2 + scale - scalePx;
y2 = size/2;
//x3 = gfx_w/2;
y3 = size + scale - scalePx;
x4 = (gfx_w-size)/2 - scale + scalePx;
y4 = size/2;

//limits ? (
gfx_set(1,1,1,0.2);
gfx_line(x1,y1,x2,y2,1);
gfx_line(x2,y2,x1,y3,1);
gfx_line(x1,y3,x4,y4,1);
gfx_line(x4,y4,x1,y1,1);
//gfx_set(1,1,1,0.5);
//gfx_set(1,1,1,0.2);
//gfx_line(x1,y1,x2,y2,1);
//gfx_line(x2,y2,x3,y3,1);
//gfx_line(x3,y3,x4,y4,1);
//gfx_line(x4,y4,x1,y1,1);
//);
//*/

gfx_set(1,1,1,0.2);
  //scalex == 1 ? (
  //gfx_a*=2;
  i = 0;
  loop(4,
    //debug = point_angle = atan2(0,-1);
    point_angle = pi/2*i;
    point_radius = 1;
    gfx_x = gfxw2+cos(point_angle)*centre;
    gfx_y = gfxh2-sin(point_angle)*centre;

    gfx_line(gfx_x,gfx_y,old_x2,old_y2);
    old_x2 = gfx_x;
    old_y2 = gfx_y;
    i+=1;
    );
  //);
  gfx_circle(cntr_x,cntr_y,centre,0,1);

gfxw4 = floor(gfx_w/4);
gfxh2 = floor(gfx_h/2)+1;

gfx_x = 0; gfx_y = gfxh2;
gfx_rectto(gfxw4,gfx_y-gfx_h/4*__LL);
gfx_x = gfxw4; gfx_y = gfxh2;
gfx_rectto(2*gfxw4,gfx_y-gfx_h/4*__RL);
gfx_x = 2*gfxw4; gfx_y = gfxh2;
gfx_rectto(3*gfxw4,gfx_y-gfx_h/4*__LR);
gfx_x = 3*gfxw4; gfx_y = gfxh2;
gfx_rectto(gfx_w,gfx_y-gfx_h/4*__RR);

h2 = gfx_h/2;
h4 = gfx_h/4;
h4s2 = h4*sqrt(2);
gfx_line(0,h2,gfx_w,h2);
gfx_line(0,h2-h4,gfx_w,h2-h4);
gfx_line(0,h2+h4,gfx_w,h2+h4);

gfx_line(0,h2-h4s2,gfx_w,h2-h4s2);
gfx_line(0,h2+h4s2,gfx_w,h2+h4s2);



//gfx_setfont(1,"Arial",18,'b');
//gfx_setfont(1,"Courier New",18,'b');
//gfx_setfont(1,"Courier New", gfx_h / 10,'b');
gfx_setfont(1,"Arial", gfx_h / 10,'b');
gfx_x = 5; gfx_y = 0;
//gfx_set(1,1,1,0.7);
gfx_set(1,1,1,0.2);

gfx_drawstr( strcat(sprintf(#,"%.1f",degrees),"°"), 2,gfx_x+gfx_w / 3, gfx_y+gfx_h / 10);
//gfx_drawstr("wayback, a fluid live looping delay - v0.972fc", 256, gfx_x, gfx_y);



  // Analyze the relation of the current two input samples
  silenceCh1 = (spl0 === 0);
  silenceCh2 = (spl1 === 0);
  equal      = (spl0 === spl1);
  
  // Decide which text to draw, depending on the relation between the input samples
  //channelText = (silenceCh1 && silenceCh2) ? "Silence" : (equal ? "Mono" : "Stereo");
  channelText = (silenceCh1 && silenceCh2) ? "-" : (equal ? "M" : "S");
  //channelText = (silenceCh1 && silenceCh2) ? flag = 0 : (equal ? flag = 1 : flag = 2);

  // Set the font to use, make its size relative to the window height
  //gfx_x= 0; gfx_y = 0; gfx_setfont(1, "Arial", gfx_h / 3);
  //gfx_x= gfx_w-gfx_w/4; gfx_y = 0; gfx_setfont(1, "Arial", gfx_h / 10);
  //gfx_x= gfx_w-gfx_w/3; gfx_y = 0; gfx_setfont(1, "Courier New", gfx_h / 10, 'b');
  gfx_x= gfx_w-gfx_w/3; gfx_y = 0; gfx_setfont(1, "Arial", gfx_h / 10, 'b');
  
  // Draw text over the full window, centered horizontally and vertically
  //gfx_drawstr(channelText, 1|4, gfx_w/2, gfx_h/2);
  //gfx_drawstr(channelText, 1|4, gfx_w/8, gfx_h/8);
  gfx_drawstr(channelText);
  
  //flag == 1 ? (gfx_set(1,0.2,0.2,1);gfx_circle(gfx_w/2,0,8,1))
  
  //gfx_x = gfx_y = 0;
  //gfx_blurto(gfx_w,gfx_h);
  
  
  
  /*
  gfx_x = 0; gfx_y = gfx_h-gfx_h/12; 
  pBitL > -32 ? gfx_drawstr("L");
  pBitR > -32 ? gfx_drawstr("R");
  pBitM > -32 ? gfx_drawstr("M");
  pBitS > -32 ? gfx_drawstr("S");
  //*/
  
  
