desc: Strobe Tuner [JM]
options: gfx_hz = 60;
// [TallKite Software] EDOtuner mod

//slider1: 12 <5, 41, 1> EDO (equal division of an octave)
slider2: 12 <1, 12, 1> -number of notes
slider3: 440 <400, 480, 0.01> A4 [Hz]
//slider5: 4 <0, 11, 1 {G#/Ab, G, F#/Gb, F, E, D#/Eb, D, C#/Db, C, B, A#/Bb, A}> pitch of the lowest (bassiest) string
//slider6: 0 <-50, 50, 1> cents offset from 12-edo tuned to A-440
//slider7: 0 <-1, 50, 1> additional offset in edosteps
slider15:blur=0.8<0,1,0.00001>Time Blur
slider20: 0.5 <0, 1, 0.001> brightness
slider21: 0.5 <0, 1, 0.001> color

@init
C0 = 440 * pow(2, -4.75);


function log2(x) ( 
  log(x) / log(2);
);

function HSBtoRGB(hue,saturation,value,alpha) 
 local (r,g,b,h,f,v,p,q,t) 
( 
   ( hue > 360) ? ( hue = hue % 360;) 
   :( hue < 0 ) ? ( hue = hue % 360 ;); 
   saturation = min ( max(saturation,0),1); 
   v = floor( 255 * value); 
   v = min ( max(v,0),255); 
   (saturation == 0)? 
   ( 
   r = v ; g = v; b = v; 
   ):( 
   h = floor( hue / 60); 
   f = hue / 60-h; 
   p = floor( v * (1-saturation)); 
   p = min ( max(p,0),255); 
   q = floor( v * (1-f * saturation)); 
   q = min ( max(q,0),255); 
   t = floor( v * (1-(1-f) * saturation)); 
   t = min ( max(t,0),255); 
   (h==0)?(r=v;g=t;b=p;) 
   :(h==1)?(r=q;g=v;b=p;) 
   :(h==2)?(r=p;g=v;b=t;) 
   :(h==3)?(r=p;g=q;b=v;) 
   :(h==4)?(r=t;g=p;b=v;) 
   :(h==5)?(r=v;g=p;b=q;) 
   :( r=v;g=t;b=p;); 
   ); 
   this.r = r; 
   this.g = g; 
   this.b = b; 
   //gfx_r = r/255;
   //gfx_g = g/255;
   //gfx_b = b/255;
   gfx_set(r/255, g/255, b/255, alpha);
); 

buffer_index = 0;
buffer_length = srate/4; /// Set to /8 and check missed samples
freemem = (Frequency      = freemem) + 12;
freemem = (Phase     = freemem) + 12;
freemem = (input_buffer     = freemem) + buffer_length;
freemem = (input_buffer_cpy = freemem) + buffer_length;

gfx_mode = 1;
memset (Phase, 0, 12);


@slider
A4 = slider3;
//edo = slider1; 
numStrings = slider2;
//k = 100 * (11 - slider5) + slider6 + slider7 * 1200 / edo;  // k = cents from A-55
k = 100 * (11 - slider5);
Frequency [0] = A4/8  / srate;      // cycles per sample
i = 1; loop (numStrings - 1,          // i = string number, 0 = lowest
  k = 2 ^ (i / 12);      // k = ratio between strings as a decimal
  Frequency [i] = k * Frequency [0];
  i += 1;
);
//brightness = 2 ^ (slider20 / 5);
brightness = slider20;
color = slider21;

@sample

input_buffer[buffer_index] = abs(spl0+spl1)/2;
buffer_index = (buffer_index + 1)%buffer_length;

@gfx //900 400
gfx_r=gfx_g=gfx_b=0; gfx_a=(1-blur); // Time Blur
gfx_x=gfx_y=0;
gfx_rectto(gfx_w,gfx_h);
gfx_clear=-1;
mouse_cap ? (
  gfx_clear=0;
);


buffer_index_buffer = buffer_index;
buffer_index_max = max(buffer_index_max,buffer_index); //Debug
buffer_index = 0;
memcpy(input_buffer_cpy, input_buffer, buffer_length);

bufsize = bufpos; bufpos = 0;      // buffer size is 44.1khz/30fps = 1470
n = 0; loop (numStrings,
  //gfx_r = 1; gfx_g = 1; gfx_b = 1;
  (HSBtoRGB((n+9)%12/12*360,color,1,1));
  p = 0; loop (buffer_index_buffer,
    gfx_a = brightness * input_buffer_cpy[p];
    gfx_x = n * colwid; gfx_y = gfx_h * Phase [n];
    gfx_lineto (gfx_x + colwid - 5, gfx_y, 0);
    Phase [n] += Frequency [n];
    Phase [n] > 1 ? Phase [n] -= 1;
    p += 1;
  );
  n += 1;
);


    
    colwid = gfx_w / numStrings;      // column width
    gfx_a = 1; gfx_r = gfx_g = gfx_b = 1;    // color = white
    gfx_x = 0.5 * colwid; gfx_y = 4;    // 12 is half of the 24 pixels that "Nth" takes up
    p = 0; loop (numStrings,    // draw the "Nth" label above each column
      //drawOrdinal (p);
      gfx_x = p*colwid + 0.5 * colwid - 8;
      note = (p+9)%12;
      keys="CCDDEFFGGAAB";
      strcpy_substr(nn=#,keys,note,1);
      note==1 || note==3 || note==6 || note==8 || note==10 ? strcat(nn,"#");
      gfx_drawstr(nn);
      
      p += 1;
    );


