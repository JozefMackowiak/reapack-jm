desc:Tetrad Spiral Farey [JM]
author: Jozef Mackowiak
license: MIT
version: 0.0.0
changelog: Initial Commit
about:
  # Your Package Title
  Longer description and documentation for this package in *markdown*.


options: gfx_hz = 60;

slider1:gain_db=-12<-144,0,1>Gain [dB]
slider2:440<20,5000,1>-Freq [Hz]
slider3:1<1,16,1>-Partial No
slider4:0<0,41,1{Sine,Cosine,Triangle,Square,Rectangle (pulse),Sawtooth,Ramp,Modified triangle,Modified square,Half-wave rectified sine (fixed 0.5 pulse width),Half-wave rectified sine (variable pulse width),Full-wave rectified sine,Pulse sine (fixed 0.5 pulse width),Saw pulse,Triangular pulse,Half-wave rectified sawtooth,Alternating sine,Camel sine,Alternating camel sine,Bipolar camel sine,Bipolar squared sine,Parabola,Trapezoid (fixed 0.5 pulse width),Trapezoid (variable pulse width),Hyper triangular wave,LPF square approximation (order N = 2 or 3),Integrated LPF square (order N = 2 or 3),Integrated sawtooth,Cubic sawtooth,Sine sawtooth,HPF sawtooth approximation,Logit approximation,Square wave minus fundamental,Sawtooth minus fundamental,Stepped triangle,Stepped sawtooth,Hard sync sawtooth,Might not be suitable for vegetarians,Staircase (fixed 0.5 pulse width),Staircase (variable pulse width),Uneven staircase}>Wave Type
slider5:0.5<0,1,0.0001>-Pulse Width
slider6:1<0,10,0.0001>-Hard Sync
slider7:1<1,32,1>-Steps Number
slider8:5<0,10,0.0001>Smoothing

slider9:0<-1000,1000,0.00001>Add Freq [Hz]
slider10:1<0,2,0.00001>Multiply Freq
//slider11:0.5<0.000001,0.999999,0.00001>Division 2

slider13:8<1,32,1>Overtone
slider14:8<1,32,1>Undertone
slider15:8<1,32,1>Upper Farey Order
slider16:8<1,32,1>Lower Farey Order


slider20:440<0,5000,0.00001> Freq 1 [Hz]
slider21:440<0,5000,0.00001> Freq 2 [Hz]
slider22:440<0,5000,0.00001> Freq 3 [Hz]
slider23:440<0,5000,0.00001> Freq 4 [Hz]

import Tale/poly_blep.jsfx-inc

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
last_gain=10^(gain_db/20);

/*
function float_to_fraction(x, error=0.000001)
local(n, lower_d, lower_n, middle_d, middle_n, upper_d, upper_n)
global(return)
(
  n = floor(x);
  x -= n;
  x < error ? 

);
*/

C0 = 440 * pow(2, -4.75);


function log2(x) ( 
  log(x) / log(2);
);

function HSBtoRGB(hue,saturation,value) 
 local (r,g,b,h,f,v,p,q,t) 
( 
   ( hue > 360) ? ( hue = hue % 360;) 
   :( hue < 0 ) ? ( hue = hue % 360 ;); 
   saturation = min ( max(saturation,0),1); 
   v = floor( 255 * value); 
   v = min ( max(v,0),255); 
   (saturation == 0)? 
   ( 
   r = v ; g = v; b = v; 
   ):( 
   h = floor( hue / 60); 
   f = hue / 60-h; 
   p = floor( v * (1-saturation)); 
   p = min ( max(p,0),255); 
   q = floor( v * (1-f * saturation)); 
   q = min ( max(q,0),255); 
   t = floor( v * (1-(1-f) * saturation)); 
   t = min ( max(t,0),255); 
   (h==0)?(r=v;g=t;b=p;) 
   :(h==1)?(r=q;g=v;b=p;) 
   :(h==2)?(r=p;g=v;b=t;) 
   :(h==3)?(r=p;g=q;b=v;) 
   :(h==4)?(r=t;g=p;b=v;) 
   :(h==5)?(r=v;g=p;b=q;) 
   :( r=v;g=t;b=p;); 
   ); 
   this.r = r; 
   this.g = g; 
   this.b = b; 
   //gfx_r = r/255;
   //gfx_g = g/255;
   //gfx_b = b/255;
   gfx_set(r/255, g/255, b/255, 1);
); 

function freq_to_x(freq) (
  spectrum.left_margin + ((gfx_w - spectrum.left_margin - spectrum.right_margin) * log(freq / minFreq) / logMaxFreq);
);

//*
function x_to_freq(x) (
  x = minFreq * exp(logMaxFreq * (x - spectrum.left_margin) / (gfx_w - spectrum.left_margin - spectrum.right_margin));
  //x = minFreq * exp(logMaxFreq * (x - 0) / (gfx_w - 0 - 0));
  max(min(x, maxFreq), minFreq);
);

function smooth_parameter(target)
instance(s, coeff)
global()
local(y, v)
(
  v = coeff*(target - s);
  y = v + s;
  s = y + v;
  y
);

function initialize_smoother(cutoff)
instance(coeff)
global(srate)
local(g)
( 
  g = tan($pi*cutoff/srate);
  coeff = g/(1+g);  
);

function interpolator_init(slider_idx)
instance(next_val, idx, s)
local()
global()
(
  s = slider(slider_idx);
  next_val = slider(slider_idx);
  idx = slider_idx;
);

function interpolator_block()
instance(delta, next_changepoint_t, next_val, idx)
local(next_changepoint_y)
global(samplesblock)
(
  next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
  next_changepoint_t > 0 ? 
  (
    next_val = slider(idx);
  ) : (
    next_changepoint_y = slider(idx);
    next_changepoint_t = samplesblock;
  );
    
  delta = (next_changepoint_y - next_val) / next_changepoint_t;
);
  
function interpolate()
instance(delta, next_changepoint_t, next_val, idx, coeff)
local(current_value, next_changepoint_y)
global(current_sample)
(
  current_value = next_val;
  current_sample == next_changepoint_t ? 
  (
    delta = 0;
    next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
    delta = next_changepoint_t > current_sample ? (next_changepoint_y - current_value) / (next_changepoint_t-current_sample) : 0;
  );
    
  next_val = current_value + delta;
    
  coeff > 0 ? this.smooth_parameter(current_value) : current_value
);


addFreq_interpolator.interpolator_init(9);
multiFreq_interpolator.interpolator_init(10);
freq0_interpolator.interpolator_init(20);
freq1_interpolator.interpolator_init(21);
freq2_interpolator.interpolator_init(22);
freq3_interpolator.interpolator_init(23);


@slider
wavetype = slider4+1;
a = slider5;
b = slider6;
c = slider7;
partial = slider3;
smoothing = slider8;
//addFreq = slider9;
//multiFreq = slider10;
//division = slider10;

  overtones = slider13;
  undertones = slider14;
  farey_up = slider15;
  farey_down = slider16;


next_gain=10^(gain_db/20);
osc.poly_setpw(slider5);
//lfo.lfo_setf2(slider6);
osc.poly_setn(slider7);
addFreq_interpolator.initialize_smoother(smoothing);
multiFreq_interpolator.initialize_smoother(smoothing);
freq0_interpolator.initialize_smoother(smoothing);
freq1_interpolator.initialize_smoother(smoothing);
freq2_interpolator.initialize_smoother(smoothing);
freq3_interpolator.initialize_smoother(smoothing);


@block
d_gain = (next_gain - last_gain)/samplesblock;
addFreq_interpolator.interpolator_block();
multiFreq_interpolator.interpolator_block();
freq0_interpolator.interpolator_block();
freq1_interpolator.interpolator_block();
freq2_interpolator.interpolator_block();
freq3_interpolator.interpolator_block();

@sample
addFreq = addFreq_interpolator.interpolate();
multiFreq = multiFreq_interpolator.interpolate();
freq0 = freq0_interpolator.interpolate()*multiFreq+addFreq;
freq1 = freq1_interpolator.interpolate()*multiFreq+addFreq;
freq2 = freq2_interpolator.interpolate()*multiFreq+addFreq;
freq3 = freq3_interpolator.interpolate()*multiFreq+addFreq;
freq0 < 0 ? (freq0 = 0);
freq1 < 0 ? (freq1 = 0);
freq2 < 0 ? (freq2 = 0);
freq3 < 0 ? (freq3 = 0);

//freq0 = freq*partial/division;
//freq0 = freq*partial;
osc0.poly_setf(freq0);

wavetype==1  ? spl0 = last_gain * osc0.poly_sin():       // Sine
wavetype==2  ? spl0 = last_gain * osc0.poly_cos():       // Cosine
wavetype==3  ? spl0 = last_gain * osc0.poly_tri():       // Triangle
wavetype==4  ? spl0 = last_gain * osc0.poly_sqr():       // Square
wavetype==5  ? spl0 = last_gain * osc0.poly_rect():      // Rectangle (pulse)
wavetype==6  ? spl0 = last_gain * osc0.poly_saw():       // Sawtooth
wavetype==7  ? spl0 = last_gain * osc0.poly_ramp():      // Ramp
wavetype==8  ? spl0 = last_gain * osc0.poly_tri2():      // Modified triangle
wavetype==9  ? spl0 = last_gain * osc0.poly_sqr2():      // Modified square
wavetype==10 ? spl0 = last_gain * osc0.poly_half():      // Half-wave rectified sine (fixed 0.5 pulse width)
wavetype==11 ? spl0 = last_gain * osc0.poly_half2():     // Half-wave rectified sine (variable pulse width)
wavetype==12 ? spl0 = last_gain * osc0.poly_full():      // Full-wave rectified sine
wavetype==13 ? spl0 = last_gain * osc0.poly_sinp():      // Pulse sine (fixed 0.5 pulse width)
wavetype==14 ? spl0 = last_gain * osc0.poly_sawp():      // Saw pulse
wavetype==15 ? spl0 = last_gain * osc0.poly_trip():      // Triangular pulse
wavetype==16 ? spl0 = last_gain * osc0.poly_hwsaw():     // Half-wave rectified sawtooth
wavetype==17 ? spl0 = last_gain * osc0.poly_alt():       // Alternating sine
wavetype==18 ? spl0 = last_gain * osc0.poly_camel():     // Camel sine
wavetype==19 ? spl0 = last_gain * osc0.poly_camela():    // Alternating camel sine
wavetype==20 ? spl0 = last_gain * osc0.poly_camel2():    // Bipolar camel sine
wavetype==21 ? spl0 = last_gain * osc0.poly_sin2():      // Bipolar squared sine
wavetype==22 ? spl0 = last_gain * osc0.poly_para():      // Parabola
wavetype==23 ? spl0 = last_gain * osc0.poly_trap():      // Trapezoid (fixed 0.5 pulse width)
wavetype==24 ? spl0 = last_gain * osc0.poly_trap2():     // Trapezoid (variable pulse width)
wavetype==25 ? spl0 = last_gain * osc0.poly_hyptri():    // Hyper triangular wave
wavetype==26 ? spl0 = last_gain * osc0.poly_lpsqr2():    // LPF square approximation (order N = 2 or 3)
wavetype==27 ? spl0 = last_gain * osc0.poly_intlpsqr2(): // Integrated LPF square (order N = 2 or 3)
wavetype==28 ? spl0 = last_gain * osc0.poly_intsaw():    // Integrated sawtooth
wavetype==29 ? spl0 = last_gain * osc0.poly_cubsaw():    // Cubic sawtooth
wavetype==30 ? spl0 = last_gain * osc0.poly_sinsaw():    // Sine sawtooth
wavetype==31 ? spl0 = last_gain * osc0.poly_hpsaw6():    // HPF sawtooth approximation
wavetype==32 ? spl0 = last_gain * osc0.poly_logit3():    // Logit approximation
wavetype==33 ? spl0 = last_gain * osc0.poly_sqrm1():     // Square wave minus fundamental
wavetype==34 ? spl0 = last_gain * osc0.poly_sawm1():     // Sawtooth minus fundamental
wavetype==35 ? spl0 = last_gain * osc0.poly_trin():      // Stepped triangle
wavetype==36 ? spl0 = last_gain * osc0.poly_sawn():      // Stepped sawtooth
wavetype==37 ? spl0 = last_gain * osc0.poly_hssaw():     // Hard sync sawtooth
wavetype==38 ? spl0 = last_gain * osc0.poly_ham():       // Might not be suitable for vegetarians
wavetype==39 ? spl0 = last_gain * osc0.poly_stairs():    // Staircase (fixed 0.5 pulse width)
wavetype==40 ? spl0 = last_gain * osc0.poly_stairs3():   // Staircase (variable pulse width)
wavetype==41 ? spl0 = last_gain * osc0.poly_stairs2();   // Uneven staircase

//freq1 = freq*partial/(1-division1);
osc1.poly_setf(freq1);

wavetype==1  ? spl1 = last_gain * osc1.poly_sin():       // Sine
wavetype==2  ? spl1 = last_gain * osc1.poly_cos():       // Cosine
wavetype==3  ? spl1 = last_gain * osc1.poly_tri():       // Triangle
wavetype==4  ? spl1 = last_gain * osc1.poly_sqr():       // Square
wavetype==5  ? spl1 = last_gain * osc1.poly_rect():      // Rectangle (pulse)
wavetype==6  ? spl1 = last_gain * osc1.poly_saw():       // Sawtooth
wavetype==7  ? spl1 = last_gain * osc1.poly_ramp():      // Ramp
wavetype==8  ? spl1 = last_gain * osc1.poly_tri2():      // Modified triangle
wavetype==9  ? spl1 = last_gain * osc1.poly_sqr2():      // Modified square
wavetype==10 ? spl1 = last_gain * osc1.poly_half():      // Half-wave rectified sine (fixed 0.5 pulse width)
wavetype==11 ? spl1 = last_gain * osc1.poly_half2():     // Half-wave rectified sine (variable pulse width)
wavetype==12 ? spl1 = last_gain * osc1.poly_full():      // Full-wave rectified sine
wavetype==13 ? spl1 = last_gain * osc1.poly_sinp():      // Pulse sine (fixed 0.5 pulse width)
wavetype==14 ? spl1 = last_gain * osc1.poly_sawp():      // Saw pulse
wavetype==15 ? spl1 = last_gain * osc1.poly_trip():      // Triangular pulse
wavetype==16 ? spl1 = last_gain * osc1.poly_hwsaw():     // Half-wave rectified sawtooth
wavetype==17 ? spl1 = last_gain * osc1.poly_alt():       // Alternating sine
wavetype==18 ? spl1 = last_gain * osc1.poly_camel():     // Camel sine
wavetype==19 ? spl1 = last_gain * osc1.poly_camela():    // Alternating camel sine
wavetype==20 ? spl1 = last_gain * osc1.poly_camel2():    // Bipolar camel sine
wavetype==21 ? spl1 = last_gain * osc1.poly_sin2():      // Bipolar squared sine
wavetype==22 ? spl1 = last_gain * osc1.poly_para():      // Parabola
wavetype==23 ? spl1 = last_gain * osc1.poly_trap():      // Trapezoid (fixed 0.5 pulse width)
wavetype==24 ? spl1 = last_gain * osc1.poly_trap2():     // Trapezoid (variable pulse width)
wavetype==25 ? spl1 = last_gain * osc1.poly_hyptri():    // Hyper triangular wave
wavetype==26 ? spl1 = last_gain * osc1.poly_lpsqr2():    // LPF square approximation (order N = 2 or 3)
wavetype==27 ? spl1 = last_gain * osc1.poly_intlpsqr2(): // Integrated LPF square (order N = 2 or 3)
wavetype==28 ? spl1 = last_gain * osc1.poly_intsaw():    // Integrated sawtooth
wavetype==29 ? spl1 = last_gain * osc1.poly_cubsaw():    // Cubic sawtooth
wavetype==30 ? spl1 = last_gain * osc1.poly_sinsaw():    // Sine sawtooth
wavetype==31 ? spl1 = last_gain * osc1.poly_hpsaw6():    // HPF sawtooth approximation
wavetype==32 ? spl1 = last_gain * osc1.poly_logit3():    // Logit approximation
wavetype==33 ? spl1 = last_gain * osc1.poly_sqrm1():     // Square wave minus fundamental
wavetype==34 ? spl1 = last_gain * osc1.poly_sawm1():     // Sawtooth minus fundamental
wavetype==35 ? spl1 = last_gain * osc1.poly_trin():      // Stepped triangle
wavetype==36 ? spl1 = last_gain * osc1.poly_sawn():      // Stepped sawtooth
wavetype==37 ? spl1 = last_gain * osc1.poly_hssaw():     // Hard sync sawtooth
wavetype==38 ? spl1 = last_gain * osc1.poly_ham():       // Might not be suitable for vegetarians
wavetype==39 ? spl1 = last_gain * osc1.poly_stairs():    // Staircase (fixed 0.5 pulse width)
wavetype==40 ? spl1 = last_gain * osc1.poly_stairs3():   // Staircase (variable pulse width)
wavetype==41 ? spl1 = last_gain * osc1.poly_stairs2();   // Uneven staircase

//freq2 = freq*partial/(1-division2);
osc2.poly_setf(freq2);

wavetype==1  ? spl2 = last_gain * osc2.poly_sin():       // Sine
wavetype==2  ? spl2 = last_gain * osc2.poly_cos():       // Cosine
wavetype==3  ? spl2 = last_gain * osc2.poly_tri():       // Triangle
wavetype==4  ? spl2 = last_gain * osc2.poly_sqr():       // Square
wavetype==5  ? spl2 = last_gain * osc2.poly_rect():      // Rectangle (pulse)
wavetype==6  ? spl2 = last_gain * osc2.poly_saw():       // Sawtooth
wavetype==7  ? spl2 = last_gain * osc2.poly_ramp():      // Ramp
wavetype==8  ? spl2 = last_gain * osc2.poly_tri2():      // Modified triangle
wavetype==9  ? spl2 = last_gain * osc2.poly_sqr2():      // Modified square
wavetype==10 ? spl2 = last_gain * osc2.poly_half():      // Half-wave rectified sine (fixed 0.5 pulse width)
wavetype==11 ? spl2 = last_gain * osc2.poly_half2():     // Half-wave rectified sine (variable pulse width)
wavetype==12 ? spl2 = last_gain * osc2.poly_full():      // Full-wave rectified sine
wavetype==13 ? spl2 = last_gain * osc2.poly_sinp():      // Pulse sine (fixed 0.5 pulse width)
wavetype==14 ? spl2 = last_gain * osc2.poly_sawp():      // Saw pulse
wavetype==15 ? spl2 = last_gain * osc2.poly_trip():      // Triangular pulse
wavetype==16 ? spl2 = last_gain * osc2.poly_hwsaw():     // Half-wave rectified sawtooth
wavetype==17 ? spl2 = last_gain * osc2.poly_alt():       // Alternating sine
wavetype==18 ? spl2 = last_gain * osc2.poly_camel():     // Camel sine
wavetype==19 ? spl2 = last_gain * osc2.poly_camela():    // Alternating camel sine
wavetype==20 ? spl2 = last_gain * osc2.poly_camel2():    // Bipolar camel sine
wavetype==21 ? spl2 = last_gain * osc2.poly_sin2():      // Bipolar squared sine
wavetype==22 ? spl2 = last_gain * osc2.poly_para():      // Parabola
wavetype==23 ? spl2 = last_gain * osc2.poly_trap():      // Trapezoid (fixed 0.5 pulse width)
wavetype==24 ? spl2 = last_gain * osc2.poly_trap2():     // Trapezoid (variable pulse width)
wavetype==25 ? spl2 = last_gain * osc2.poly_hyptri():    // Hyper triangular wave
wavetype==26 ? spl2 = last_gain * osc2.poly_lpsqr2():    // LPF square approximation (order N = 2 or 3)
wavetype==27 ? spl2 = last_gain * osc2.poly_intlpsqr2(): // Integrated LPF square (order N = 2 or 3)
wavetype==28 ? spl2 = last_gain * osc2.poly_intsaw():    // Integrated sawtooth
wavetype==29 ? spl2 = last_gain * osc2.poly_cubsaw():    // Cubic sawtooth
wavetype==30 ? spl2 = last_gain * osc2.poly_sinsaw():    // Sine sawtooth
wavetype==31 ? spl2 = last_gain * osc2.poly_hpsaw6():    // HPF sawtooth approximation
wavetype==32 ? spl2 = last_gain * osc2.poly_logit3():    // Logit approximation
wavetype==33 ? spl2 = last_gain * osc2.poly_sqrm1():     // Square wave minus fundamental
wavetype==34 ? spl2 = last_gain * osc2.poly_sawm1():     // Sawtooth minus fundamental
wavetype==35 ? spl2 = last_gain * osc2.poly_trin():      // Stepped triangle
wavetype==36 ? spl2 = last_gain * osc2.poly_sawn():      // Stepped sawtooth
wavetype==37 ? spl2 = last_gain * osc2.poly_hssaw():     // Hard sync sawtooth
wavetype==38 ? spl2 = last_gain * osc2.poly_ham():       // Might not be suitable for vegetarians
wavetype==39 ? spl2 = last_gain * osc2.poly_stairs():    // Staircase (fixed 0.5 pulse width)
wavetype==40 ? spl2 = last_gain * osc2.poly_stairs3():   // Staircase (variable pulse width)
wavetype==41 ? spl2 = last_gain * osc2.poly_stairs2();   // Uneven staircase

//freq2 = freq*partial/(1-division2);
osc3.poly_setf(freq3);

wavetype==1  ? spl3 = last_gain * osc3.poly_sin():       // Sine
wavetype==2  ? spl3 = last_gain * osc3.poly_cos():       // Cosine
wavetype==3  ? spl3 = last_gain * osc3.poly_tri():       // Triangle
wavetype==4  ? spl3 = last_gain * osc3.poly_sqr():       // Square
wavetype==5  ? spl3 = last_gain * osc3.poly_rect():      // Rectangle (pulse)
wavetype==6  ? spl3 = last_gain * osc3.poly_saw():       // Sawtooth
wavetype==7  ? spl3 = last_gain * osc3.poly_ramp():      // Ramp
wavetype==8  ? spl3 = last_gain * osc3.poly_tri2():      // Modified triangle
wavetype==9  ? spl3 = last_gain * osc3.poly_sqr2():      // Modified square
wavetype==10 ? spl3 = last_gain * osc3.poly_half():      // Half-wave rectified sine (fixed 0.5 pulse width)
wavetype==11 ? spl3 = last_gain * osc3.poly_half2():     // Half-wave rectified sine (variable pulse width)
wavetype==12 ? spl3 = last_gain * osc3.poly_full():      // Full-wave rectified sine
wavetype==13 ? spl3 = last_gain * osc3.poly_sinp():      // Pulse sine (fixed 0.5 pulse width)
wavetype==14 ? spl3 = last_gain * osc3.poly_sawp():      // Saw pulse
wavetype==15 ? spl3 = last_gain * osc3.poly_trip():      // Triangular pulse
wavetype==16 ? spl3 = last_gain * osc3.poly_hwsaw():     // Half-wave rectified sawtooth
wavetype==17 ? spl3 = last_gain * osc3.poly_alt():       // Alternating sine
wavetype==18 ? spl3 = last_gain * osc3.poly_camel():     // Camel sine
wavetype==19 ? spl3 = last_gain * osc3.poly_camela():    // Alternating camel sine
wavetype==20 ? spl3 = last_gain * osc3.poly_camel2():    // Bipolar camel sine
wavetype==21 ? spl3 = last_gain * osc3.poly_sin2():      // Bipolar squared sine
wavetype==22 ? spl3 = last_gain * osc3.poly_para():      // Parabola
wavetype==23 ? spl3 = last_gain * osc3.poly_trap():      // Trapezoid (fixed 0.5 pulse width)
wavetype==24 ? spl3 = last_gain * osc3.poly_trap2():     // Trapezoid (variable pulse width)
wavetype==25 ? spl3 = last_gain * osc3.poly_hyptri():    // Hyper triangular wave
wavetype==26 ? spl3 = last_gain * osc3.poly_lpsqr2():    // LPF square approximation (order N = 2 or 3)
wavetype==27 ? spl3 = last_gain * osc3.poly_intlpsqr2(): // Integrated LPF square (order N = 2 or 3)
wavetype==28 ? spl3 = last_gain * osc3.poly_intsaw():    // Integrated sawtooth
wavetype==29 ? spl3 = last_gain * osc3.poly_cubsaw():    // Cubic sawtooth
wavetype==30 ? spl3 = last_gain * osc3.poly_sinsaw():    // Sine sawtooth
wavetype==31 ? spl3 = last_gain * osc3.poly_hpsaw6():    // HPF sawtooth approximation
wavetype==32 ? spl3 = last_gain * osc3.poly_logit3():    // Logit approximation
wavetype==33 ? spl3 = last_gain * osc3.poly_sqrm1():     // Square wave minus fundamental
wavetype==34 ? spl3 = last_gain * osc3.poly_sawm1():     // Sawtooth minus fundamental
wavetype==35 ? spl3 = last_gain * osc3.poly_trin():      // Stepped triangle
wavetype==36 ? spl3 = last_gain * osc3.poly_sawn():      // Stepped sawtooth
wavetype==37 ? spl3 = last_gain * osc3.poly_hssaw():     // Hard sync sawtooth
wavetype==38 ? spl3 = last_gain * osc3.poly_ham():       // Might not be suitable for vegetarians
wavetype==39 ? spl3 = last_gain * osc3.poly_stairs():    // Staircase (fixed 0.5 pulse width)
wavetype==40 ? spl3 = last_gain * osc3.poly_stairs3():   // Staircase (variable pulse width)
wavetype==41 ? spl3 = last_gain * osc3.poly_stairs2();   // Uneven staircase

last_gain += d_gain;

spl0 = spl1 = (spl0+spl1+spl2+spl3)/4;

@gfx 640 640

0[] = freq0;
1[] = freq1;
2[] = freq2;
3[] = freq3;
0[16] = abs(freq0-freq1); //2
1[16] = abs(freq0-freq2); //3
2[16] = abs(freq1-freq2); //3
3[16] = abs(freq0-freq3); //4
4[16] = abs(freq1-freq3); //4
5[16] = abs(freq2-freq3); //4


10[16] = abs(2*freq0-freq1); //2
11[16] = abs(freq0-2*freq1); //2
12[16] = abs(2*freq1-freq2); //3
13[16] = abs(2*freq2-freq0); //3
14[16] = abs(freq1-2*freq2); //3
15[16] = abs(freq2-2*freq0); //3
16[16] = abs(2*freq0-freq3); //4
17[16] = abs(2*freq1-freq3); //4
18[16] = abs(2*freq2-freq3); //4
19[16] = abs(freq0-2*freq3); //4
20[16] = abs(freq1-2*freq3); //4
21[16] = abs(freq2-2*freq3); //4

noteCount = 4;
diffCount = 6;
  a = 0;
  c = 12;
  r = 1;

  gfx_x = gfx_w/2;
  gfx_y = gfx_h/2;
  //gfx_setpixel(1,1,1);
  gfx_set(1,1,1,1);
  //gfx_circle(gfx_x,gfx_y,floor(min(gfx_h,gfx_w)/92),1,1);
  //gfx_setpixel(1,1,1);
  
  edo = c*4;
  spiral = 1;
  nspiral = 8;
  phi = a*2*$pi;
  z = 1/(edo*spiral*nspiral);
  gfx_set(1,1,1,0.1);
  loop(nspiral*edo+1,
  
    //gfx_set(1,1,1,0.2);
    //HSBtoRGB(360*phi/(2*$pi),1,1);
    //gfx_circle(sin(phi)*(r*gfx_h/2)+gfx_w/2,gfx_h-(cos(phi)*(r*gfx_h/2)+gfx_h/2),floor(min(gfx_h,gfx_w)/24),1,1);
    gfx_lineto(sin(phi)*(z*r*gfx_h/2)+gfx_w/2,gfx_h-(cos(phi)*(z*r*gfx_h/2)+gfx_h/2),1);
    //debug = cos(phi)*(r*gfx_h/2) + gfx_h;
    //debug_h = gfx_h;
    //phi += 2*$pi/12;
    phi += 2*$pi/edo;
    z += 1/(edo*spiral*nspiral);
    
  );


phi = 0;
loop(c,

  gfx_set(1,1,1,0.2);
  //HSBtoRGB(360*phi/(2*$pi),1,1);
  //gfx_circle(sin(phi)*(r*gfx_h/2)+gfx_w/2,gfx_h-(cos(phi)*(r*gfx_h/2)+gfx_h/2),floor(min(gfx_h,gfx_w)/24),1,1);
  gfx_x = gfx_w/2;
  gfx_y = gfx_h/2;
  gfx_lineto(sin(phi)*(r*gfx_h/2)+gfx_w/2,gfx_h-(cos(phi)*(r*gfx_h/2)+gfx_h/2));
  //debug = cos(phi)*(r*gfx_h/2) + gfx_h;
  //debug_h = gfx_h;
  //phi += 2*$pi/12;
  phi += 2*$pi/c;
  
);

//phi = a*2*$pi;
i = 0;
loop(noteCount,
    i[] > C0 ? (pitch = log2(i[]/C0)/8):(pitch = log2(1)/8);
    phi = 2*$pi*(log2(i[]/C0));
    circle_width = floor(min(gfx_h,gfx_w)/46);
    gfx_a = 1;
    HSBtoRGB(360*phi/(2*$pi),1,1);
    gfx_circle(sin(phi)*(pitch*r*gfx_h/2)+gfx_w/2,gfx_h-(cos(phi)*(pitch*r*gfx_h/2)+gfx_h/2),circle_width,1,1);
  
  //gfx_a = 0.75;
  j = 0;
  loop(overtones,
    j += 1;
    pitch = log2(j*i[]/C0)/8;
    pitch2 = log2(2*j*i[]/C0)/8;
    phi = 2*$pi*(log2(j*i[]/C0));
    //circle_width = floor(min(gfx_h,gfx_w)/144);
    //HSBtoRGB(360*phi/(2*$pi),1,1);
    //gfx_circle(sin(phi)*(pitch*r*gfx_h/2)+gfx_w/2,gfx_h-(cos(phi)*(pitch*r*gfx_h/2)+gfx_h/2),circle_width,1,1);
    gfx_x = sin(phi)*(pitch2*r*gfx_h/2)+gfx_w/2;
    gfx_y = gfx_h-(cos(phi)*(pitch2*r*gfx_h/2)+gfx_h/2);
    gfx_lineto(sin(phi)*(pitch*r*gfx_h/2)+gfx_w/2,gfx_h-(cos(phi)*(pitch*r*gfx_h/2)+gfx_h/2),0);
  );
  
  j = 0;
  loop(undertones,
    j += 1;
    pitch = log2(i[]/(C0*j))/8;
    pitch2 = log2(2*i[]/(C0*j))/8;
    phi = 2*$pi*(log2(i[]/(C0*j)));
    //circle_width = floor(min(gfx_h,gfx_w)/144);
    //HSBtoRGB(360*phi/(2*$pi),1,1);
    pitch >= 0 ? (
      //gfx_circle(sin(phi)*(pitch*r*gfx_h/2)+gfx_w/2,gfx_h-(cos(phi)*(pitch*r*gfx_h/2)+gfx_h/2),circle_width,1,1);
      gfx_x = sin(phi)*(pitch2*r*gfx_h/2)+gfx_w/2;
      gfx_y = gfx_h-(cos(phi)*(pitch2*r*gfx_h/2)+gfx_h/2);
      gfx_lineto(sin(phi)*(pitch*r*gfx_h/2)+gfx_w/2,gfx_h-(cos(phi)*(pitch*r*gfx_h/2)+gfx_h/2),0);
    );
  );
  
  
  //*
  n = 1;
  loop(farey_down,
    
    j = 0;
    loop(n,
      pitch = log2(j*i[]/(C0*n))/8;
      pitch2 = log2(j*2*i[]/(C0*n))/8;
      phi = 2*$pi*(log2(j*i[]/(C0*n)));
      //circle_width = floor(min(gfx_h,gfx_w)/144);
      //HSBtoRGB(360*phi/(2*$pi),1,1);
      pitch >= 0 ? (
        //gfx_circle(sin(phi)*(pitch*r*gfx_h/2)+gfx_w/2,gfx_h-(cos(phi)*(pitch*r*gfx_h/2)+gfx_h/2),circle_width,1,1);
        gfx_x = sin(phi)*(pitch2*r*gfx_h/2)+gfx_w/2;
        gfx_y = gfx_h-(cos(phi)*(pitch2*r*gfx_h/2)+gfx_h/2);
        gfx_lineto(sin(phi)*(pitch*r*gfx_h/2)+gfx_w/2,gfx_h-(cos(phi)*(pitch*r*gfx_h/2)+gfx_h/2),0);
      );
      j += 1;
    );
    n += 1;
  );
  //*/
  
  
  //*
  n = 1;
  loop(farey_up,
    
    j = 0;
    loop(n,
      pitch = log2(n*i[]/(C0*j))/8;
      pitch2 = log2(n*2*i[]/(C0*j))/8;
      phi = 2*$pi*(log2(n*i[]/(C0*j)));
      //circle_width = floor(min(gfx_h,gfx_w)/144);
      //HSBtoRGB(360*phi/(2*$pi),1,1);
      pitch >= 0 ? (
        //gfx_circle(sin(phi)*(pitch*r*gfx_h/2)+gfx_w/2,gfx_h-(cos(phi)*(pitch*r*gfx_h/2)+gfx_h/2),circle_width,1,1);
        gfx_x = sin(phi)*(pitch2*r*gfx_h/2)+gfx_w/2;
        gfx_y = gfx_h-(cos(phi)*(pitch2*r*gfx_h/2)+gfx_h/2);
        gfx_lineto(sin(phi)*(pitch*r*gfx_h/2)+gfx_w/2,gfx_h-(cos(phi)*(pitch*r*gfx_h/2)+gfx_h/2),0);
      );
      j += 1;
    );
    n += 1;
  );
  //*/
  
  
  /*
  j = 0;
  n = 1;
  loop(farey,
    j += 1;
    
    loop(n,
      //pitch = n*log2(i[]/(C0))/(8*j);
      //pitch2 = n*log2(2*i[]/(C0))/(8*j);
      pitch = log2(j*i[]/(C0*n))/8;
      pitch2 = log2(j*2*i[]/(C0*n))/8;
      phi = 2*$pi*(log2(j*i[]/(C0*n)));
      //circle_width = floor(min(gfx_h,gfx_w)/144);
      //HSBtoRGB(360*phi/(2*$pi),1,1);
      pitch >= 0 ? (
        //gfx_circle(sin(phi)*(pitch*r*gfx_h/2)+gfx_w/2,gfx_h-(cos(phi)*(pitch*r*gfx_h/2)+gfx_h/2),circle_width,1,1);
        gfx_x = sin(phi)*(pitch2*r*gfx_h/2)+gfx_w/2;
        gfx_y = gfx_h-(cos(phi)*(pitch2*r*gfx_h/2)+gfx_h/2);
        gfx_lineto(sin(phi)*(pitch*r*gfx_h/2)+gfx_w/2,gfx_h-(cos(phi)*(pitch*r*gfx_h/2)+gfx_h/2),0);
      );
      n += 1
    );
    
  );
  //*/
  
  
  i += 1;
);

//*
gfx_a = 1;
i = 0;
loop(diffCount,
  //pitch = log2(i[16]/C0)/8;
  i[16] > C0 ? (pitch = log2(i[16]/C0)/8):(pitch = log2(1)/8; gfx_a = i[16]/C0;);
  phi = 2*$pi*(log2(i[16]/C0));
  HSBtoRGB(360*phi/(2*$pi),1,1);
  //gfx_a = 0.5;
  circle_width = floor(min(gfx_h,gfx_w)/96);
  //i > 2 ? (circle_width *= 1/2);
  gfx_x = sin(phi)*(pitch*r*gfx_h/2)+gfx_w/2;
  gfx_y = gfx_h-(cos(phi)*(pitch*r*gfx_h/2)+gfx_h/2);
  gfx_circle(gfx_x,gfx_y,circle_width,1,1);
  gfx_set(1,1,1,1);
  gfx_circle(gfx_x,gfx_y,circle_width,0,1);

  i += 1;
  
);

gfx_a = 0.75;
i = 10;
loop(diffCount*2,
  //pitch = log2(i[16]/C0)/8;
  i[16] > C0 ? (pitch = log2(i[16]/C0)/8):(pitch = log2(1)/8; gfx_a = i[16]/C0;);
  phi = 2*$pi*(log2(i[16]/C0));
  HSBtoRGB(360*phi/(2*$pi),1,1);
  //gfx_a = 0.5;
  circle_width = floor(min(gfx_h,gfx_w)/96);
  circle_width *= 1/2;
  gfx_x = sin(phi)*(pitch*r*gfx_h/2)+gfx_w/2;
  gfx_y = gfx_h-(cos(phi)*(pitch*r*gfx_h/2)+gfx_h/2);
  gfx_circle(gfx_x,gfx_y,circle_width,1,1);
  gfx_set(1,1,1,1);
  gfx_circle(gfx_x,gfx_y,circle_width,0,1);

  i += 1;
  
);



//*
gfx_set(1,1,1);
x = 1;
y = 6;
a = 32;
b = 2;
n = 2; /// Decimals
i = 16;
ix = 0;
iy = 0;

gfx_set(1,1,1);
loop(y,
  ix = 0;
  loop(x,
  
    //i>=16?(gfx_set(0,1,0,1););
    //HSBtoRGB(360*log2(i[]/minFreq),s,1);
    i[] != 0 ? 
    (gfx_x = a + ix*10 + ix*a - floor(abs(log10(i[])))*8):
    (gfx_x = a + ix*10 + ix*a);
    gfx_y = b + iy*gfx_texth + iy*b;
    //gfx_printf("%i - %f", i, i[]);
    //gfx_printf("%i", id);
    //gfx_x = 50;
    //gfx_printf("%f", i[]);
    gfx_drawnumber(i[],n);
    
    
    i += 1;
    ix += 1;
  );
  iy += 1;
);


gfx_set(0,1,0);
x = 1;
y = 12;
a = 32;
b = 2;
i = 26;
//ix = 0;
//iy = 0;

loop(y,
  ix = 0;
  loop(x,
  
    //HSBtoRGB(360*log2(i[]/minFreq),s,1);
    i[] != 0 ? 
    (gfx_x = a + ix*10 + ix*a - floor(abs(log10(i[])))*8):
    (gfx_x = a + ix*10 + ix*a);
    gfx_y = b + iy*gfx_texth + iy*b;
    //gfx_printf("%i - %f", i, i[]);
    //gfx_printf("%i", id);
    //gfx_x = 50;
    //gfx_printf("%f", i[]);
    gfx_drawnumber(i[],n);
    
    
    i += 1;
    ix += 1;
  );
  iy += 1;
);
//*/
