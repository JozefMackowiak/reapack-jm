desc:STFA [JM]
author: Jozef Mackowiak
license: MIT
version: 0.0.0
changelog: Initial Commit
about:
  # Your Package Title
  Longer description and documentation for this package in *markdown*.


options: gfx_hz = 60;

//slider1:50<0,100,1>Width
//slider2:5<0,10,1>Height
//slider3:5<0,10,1>X
//slider4:10<0,64,1>Y
//slider5:0<0,1,0.0001>BG Color
//slider5:line_alpha=0.1<0,1,0.001>Line Alpha
slider6:1<0,1,0.01>-Alpha

slider7:12<0,360,1>-Hue
slider8:0.75<0,1,0.01>-Saturation
slider9:1<0,1,0.01>-Value


slider16:1<0,1,1{Off,On}>-dB scale
slider17:16<0,32,1>-Bit Depth

slider30:1<0,64,1>-Horiz Lines
//slider31:1<0,4,0.001>Scale Y
slider31:0<-48,48,0.01>Scale Y [dB]
slider32:1<0,1,0.001>-Scale X
slider33:mul=1<0,2,0.001>Delta
slider34:alpha=0.5<0,1,0.001>Alpha
slider35:grid_alpha=0.5<0,1,0.001>Grid Alpha
//slider36:1<0,1,1{Off,On}>Squared Mode


slider48:blur=0.8<0,1,0.001>-Blur


in_pin:left input
in_pin:right input
in_pin:sc left input
in_pin:sc right input
//options: no_meter;

@init
gfx_clear=-1;
log10_2 = log10(2.0);
pi = $pi;
pi2 = 2*$pi;
sqrt2pi = sqrt(2.0*$pi);
sqrt2 = sqrt(2);
Angle = 2*$pi/16;
rotCosAngle = cos(Angle);
rotSinAngle = sin(Angle);
gfx_ext_retina=1.0;
//ext_nodenorm=1;
//ext_noinit=1;
//gfx_clear=-1;
//gfx_clear=0;
//count = 0;
minabs0 = minabs1 = 1;


//buffer_length = srate/100;
buffer_length = srate/4; /// Set to /8 and check missed samples
//buffer_length = 1024;
buffer_index = 0;
freemem = (input_buffer0     = freemem) + buffer_length*2;
freemem = (input_buffer1     = freemem) + buffer_length*2;
freemem = (input_buffer0_cpy = freemem) + buffer_length*2;
freemem = (input_buffer1_cpy = freemem) + buffer_length*2;

function log2(x)
(
    log(x) / log(2);
);

function dbtoa(db)
(
    pow(10.0, db * 0.05);
);

function atodb(amp)
(
    20.0 * log10(amp);
);

function wrap(input mini maxi)
(
    while (input < mini) (
        input += mini;
    );
    while (input >= maxi) (
        input -= maxi;
    );
    input;
);

function clip(input mini maxi)
(
    max(min(input, maxi), mini);
);

function scale(x xmin xmax ymin ymax ex) //midi slider (0-127 linear) to a frequency scale (20-20000 exponential).
(
    x -= xmin;
    x /= (xmax - xmin);
    x ^= ex;
    x *= (ymax - ymin);
    x + ymin;
);

function moveto (x,y) (
  gfx_x = x; gfx_y = y;
);

function moveby (x,y) (
  gfx_x += x; gfx_y += y;
);

function movetopolar (x,y,radius,angle) (
  gfx_x = x+sin(angle)*radius;
  gfx_y = y-cos(angle)*radius;
);

function movebypolar (x,y,radius,angle) (
  gfx_x += x+sin(angle)*radius;
  gfx_y += y-cos(angle)*radius;
);

function linepolar (x,y,radius,angle,aa) (
  gfx_line(x,y,x+sin(angle)*radius,y-cos(angle)*radius,aa);
);

function linetopolar (radius,angle,aa) (
  gfx_lineto(gfx_x + sin(angle)*radius,gfx_y - cos(angle)*radius,aa);
);

function HSBtoRGB(hue,saturation,value,alpla) 
 local (r,g,b,h,f,v,p,q,t) 
( 
   ( hue > 360) ? ( hue = hue % 360;) 
   :( hue < 0 ) ? ( hue = hue % 360 ;); 
   saturation = min ( max(saturation,0),1); 
   v = floor( 255 * value); 
   v = min ( max(v,0),255); 
   (saturation == 0)? 
   ( 
   r = v ; g = v; b = v; 
   ):( 
   h = floor( hue / 60); 
   f = hue / 60-h; 
   p = floor( v * (1-saturation)); 
   p = min ( max(p,0),255); 
   q = floor( v * (1-f * saturation)); 
   q = min ( max(q,0),255); 
   t = floor( v * (1-(1-f) * saturation)); 
   t = min ( max(t,0),255); 
   (h==0)?(r=v;g=t;b=p;) 
   :(h==1)?(r=q;g=v;b=p;) 
   :(h==2)?(r=p;g=v;b=t;) 
   :(h==3)?(r=p;g=q;b=v;) 
   :(h==4)?(r=t;g=p;b=v;) 
   :(h==5)?(r=v;g=p;b=q;) 
   :( r=v;g=t;b=p;); 
   ); 
   this.r = r; 
   this.g = g; 
   this.b = b; 
   this.a = a; 
   //gfx_r = r/255;
   //gfx_g = g/255;
   //gfx_b = b/255;
   gfx_set(r/255, g/255, b/255, a);
); 

@slider
w = slider1;
h = slider2;
x = slider3;
y = slider4;

b = slider5;
a = slider6;
h = slider7;
s = slider8;
v = slider9;

n = slider10+1;
average = slider11;
std = slider12;
hight = slider13;
dBscale = slider16;
bitDepth = slider17;
attenuate = (1-slider33);
gaussian = slider34;
difference = slider35;
squared_mode = slider36;
vectorscope = slider37;

horiz = slider30;
//scaley = slider31;
scaley = 20*log10(slider31);
scaley = 10^(slider31/20);
scalex = slider32;
//scaley = 1-slider31;
//scalex = 1-slider32;


@block


@sample

spl0 -= spl2*mul;
spl1 -= spl3*mul;

input_buffer0[buffer_index*2  ] = spl0;
input_buffer0[buffer_index*2+1] = spl2;
input_buffer1[buffer_index*2  ] = spl1;
input_buffer1[buffer_index*2+1] = spl3;

buffer_index = (buffer_index + 1)%buffer_length;


@gfx
(mouse_cap) ? (
  gfx_r=gfx_g=gfx_b=0; gfx_a=1;
  gfx_x=gfx_y=0;
  gfx_rectto(gfx_w,gfx_h);
);

gfx_r=gfx_g=gfx_b=0; gfx_a=blur; //Blur
gfx_x=gfx_y=0;
gfx_rectto(gfx_w,gfx_h);



/// dB lines ///
gfx_set(0.5,1,0.5,0.6*grid_alpha);
gfxw2 = gfx_w/2;
gfxh2 = gfx_h/2;
centre = min(gfxw2,gfxh2);


/*
gfx_x = gfxw2; gfx_y = gfxh2;
gfx_setpixel(0.5,1,0.5);

gfx_set(1,1,1,0.3);
//gfx_set(0,0,0,1);
i = 0;
//loop(12,
loop(16,
  shift = centre/((2^i)^scalex);
  gfx_circle(gfxw2,gfxh2,shift);
  i+=1;
);

gfx_set(1,1,1,0.6);
i = 8;
loop(4,
  shift = centre/((2^i)^scalex);
  gfx_circle(gfxw2,gfxh2,shift);
  i+=8;
);


gfx_set(1,1,1,0.8);
i = 64;
loop(1,
  shift = centre/((2^i)^scalex);
  gfx_circle(gfxw2,gfxh2,shift);
  i+=8;
);


centre > 125 ? (
  //gfx_set(0.5,0.5,1,0.2);
  gfx_set(1,1,1,0.1);
  //centre = gfx_w/2;
  i = 0;
  //loop(64,
  loop(13,
    shift = centre/((10^i)^scalex);
    gfx_circle(gfxw2,gfxh2,shift);
    i+=0.05;
  );
);

centre > 256 ? (
  //gfx_set(0.5,0.5,1,0.1);
  gfx_set(1,1,1,0.1);
  //centre = gfx_w/2;
  i = 0;
  //loop(64,
  loop(21,
    shift = centre/((10^i)^scalex);
    gfx_circle(gfxw2,gfxh2,shift);
    i+=0.005;
  );
);

//* /// one sample level ///
gfx_set(1-b,1-b,1-b,1);
i = 1;
loop(horiz,
  oneheight = gfx_h*(i/maxspl)^scaley;
  //gfx_line(0,oneheight,gfx_w,oneheight);
  //gfx_circle(gfxw2,gfxh2,oneheight);
  i+=1;
);


gfx_set(1,1,1,0.2);
div = 8;
i = 0;
loop(div,
  moveto(gfxw2,gfxh2);
  linetopolar(centre-1,i*pi2/div,0);
  i+=1;
);
//*/


//*
/// dB lines ///
gfx_set(0.5,1,0.5,0.4*grid_alpha);
centre = gfx_w/2;
gfx_line(centre,0,centre,gfx_h);
gfx_set(1,1,1,0.2*grid_alpha);
//gfx_set(0,0,0,1);
i = 1;
//loop(12,
loop(4,
  shift = centre/((2^i)^scalex);
  gfx_line(centre+shift,0,centre+shift,gfx_h);
  gfx_line(centre-shift,0,centre-shift,gfx_h);
  i+=1;
);

gfx_w > 512 ? (
  //gfx_set(0.5,0.5,1,0.2);
  gfx_set(1,1,1,0.1*grid_alpha);
  centre = gfx_w/2;
  i = 0;
  //loop(64,
  loop(13,
    shift = centre/((10^i)^scalex);
    gfx_line(centre+shift,0,centre+shift,gfx_h);
    gfx_line(centre-shift,0,centre-shift,gfx_h);
    i+=0.05;
  );
);

gfx_w > 1024 ? (
  //gfx_set(0.5,0.5,1,0.1);
  gfx_set(1,1,1,0.1*grid_alpha);
  centre = gfx_w/2;
  i = 0;
  //loop(64,
  loop(21,
    shift = centre/((10^i)^scalex);
    gfx_line(centre+shift,0,centre+shift,gfx_h);
    gfx_line(centre-shift,0,centre-shift,gfx_h);
    i+=0.005;
  );
);

 /// Horizontal lines ///
gfx_set(1-b,1-b,1-b,1*grid_alpha);
i = 1;
loop(horiz,
  oneheight = gfx_h-gfx_h*(i/maxspl)^scaley;
  gfx_line(0,oneheight,gfx_w,oneheight);
  i+=1;
);
//*/


//gfx_set(1,0.5,0.5,0.6);
gfx_set(1,1,1,0.2*grid_alpha);
gfx_line(gfx_w,0,0,gfx_h);
gfx_line(gfxw2,0,gfxw2,gfx_h);
gfx_line(0,gfxh2,gfx_w,gfxh2);

//*
/// dB lines ///
gfx_set(0.5,1,0.5,0.4*grid_alpha);
centre = gfx_h/2;
gfx_line(0,centre,gfx_w,centre);
  
  gfx_set(1,1,1,0.5);
  shift = scaley*centre/((1)^scalex);
  gfx_line(0,centre+shift,gfx_w,centre+shift);
  gfx_line(0,centre-shift,gfx_w,centre-shift);

gfx_set(1,1,1,0.2*grid_alpha);
//gfx_set(0,0,0,1);
i = 1;
loop(4,
//loop(16,
  shift = scaley*centre/((2^i)^scalex);
  gfx_line(0,centre+shift,gfx_w,centre+shift);
  gfx_line(0,centre-shift,gfx_w,centre-shift);
  i+=1;
);

gfx_h > 512 ? (
  //gfx_set(0.5,0.5,1,0.2);
  gfx_set(1,1,1,0.1*grid_alpha);
  i = 0;
  //loop(64,
  loop(13,
    shift = scaley*centre/((10^i)^scalex);
  gfx_line(0,centre+shift,gfx_w,centre+shift);
  gfx_line(0,centre-shift,gfx_w,centre-shift);
    i+=0.05;
  );
);

gfx_h > 1024 ? (
  //gfx_set(0.5,0.5,1,0.1);
  gfx_set(1,1,1,0.1*grid_alpha);
  i = 0;
  //loop(64,
  loop(21,
    shift = scaley*centre/((10^i)^scalex);
  gfx_line(0,centre+shift,gfx_w,centre+shift);
  gfx_line(0,centre-shift,gfx_w,centre-shift);
    i+=0.005;
  );
);
//*/



//* /// Distribute values ///
buffer_index_buffer = buffer_index;
buffer_index_max = max(buffer_index_max,buffer_index);
buffer_index = 0;
memcpy(input_buffer0_cpy, input_buffer0, buffer_length*2);
memcpy(input_buffer1_cpy, input_buffer1, buffer_length*2);


//*      /// STFA ///
  i = 0;
  loop(buffer_index_buffer,
  
    gfx_x = (input_buffer1_cpy[i*2+1]+1)*gfxw2;
    gfx_y = gfx_h-(input_buffer1_cpy[i*2]*scaley+1)*gfxh2;
    //gfx_setpixel(1,1,1);
    //gfx_setpixel(1,0.5,0.5);
    gfx_set(1,0.5,0.5,alpha); gfx_circle(gfx_x,gfx_y,1,1);
    
    gfx_x = (input_buffer0_cpy[i*2+1]+1)*gfxw2;
    gfx_y = gfx_h-(input_buffer0_cpy[i*2]*scaley+1)*gfxh2;
    //gfx_setpixel(1,1,1);
    //gfx_setpixel(0.5,0.5,1);
    gfx_set(0.5,0.5,1,alpha); gfx_circle(gfx_x,gfx_y,1,1);
    
    
    //gfx_a *= line_alpha;
    //gfx_line(gfx_x,gfx_y,old_x,old_y);
    //old_x = gfx_x;
    //old_y = gfx_y;
    i+=1;
  );
//*/






gfx_set(1,1,1,1);
spacing = 10;
//*
//gfx_h > 300 ? (
gfx_x = 10; gfx_y = 5;
//gfx_printf(" Peak: %d", maxspl);      gfx_x=10;gfx_y+=spacing;
//gfx_printf(" Spls: %d", count);       gfx_x=10;gfx_y+=spacing;

//gfx_printf("L Avg: %f", avg0);        gfx_x=10;gfx_y+=spacing;
//gfx_printf("R Avg: %f", avg1);        gfx_x=10;gfx_y+=spacing;
//gfx_printf("L Std: %f", std0);        gfx_x=10;gfx_y+=spacing;
//gfx_printf("R Std: %f", std1);        gfx_x=10;gfx_y+=spacing;
//gfx_printf(" Time: %d", count/srate); gfx_x=10;gfx_y+=spacing;
/*
gfx_printf("L Max: %4.2f", atodb(abs(max0))); gfx_x=10;gfx_y+=spacing;
gfx_printf("R Max: %4.2f", atodb(abs(max1))); gfx_x=10;gfx_y+=spacing;
gfx_printf("L Min: %4.2f", atodb(abs(min0))); gfx_x=10;gfx_y+=spacing;
gfx_printf("R Min: %4.2f", atodb(abs(min1))); gfx_x=10;gfx_y+=spacing;
//*/
//gfx_printf("L Min: %4.1f", atodb(minabs0)/6); gfx_x=10;gfx_y+=spacing;
//gfx_printf("R Min: %4.1f", atodb(minabs1)/6); gfx_x=10;gfx_y+=spacing;
//);
//*/



// cursor cross + readout
mouse_x>0 && mouse_x<gfx_w && mouse_y>0 && mouse_y<gfx_h? (
  gfx_set(1,1,1,0.7);
  gfx_line(0,mouse_y,gfx_w,mouse_y,1);
  gfx_line(mouse_x,0,mouse_x,gfx_h,1); gfx_set(1,1,1,1);
  y_dist = -(((mouse_y-gfxh2)/gfxh2)/scaley)^(1/scalex);
  x_dist = (((mouse_x-gfxw2)/gfxw2))^(1/scalex);
  
  gfx_x=10;gfx_y=mouse_y+5;
  gfx_printf("%4.1f dB", 20.0*log10(abs(y_dist)));
  
  gfx_x=mouse_x-80;gfx_y=5;
  gfx_printf("%4.1f dB", 20.0*log10(abs(x_dist)));
  
/*
  gfx_x = 10; gfx_y = 5;
  gfx_printf("dB y: %4.1f", 20.0*log10(abs(y_dist)));
  gfx_x=10;gfx_y+=spacing;
  gfx_printf("   y: %f", y_dist^(1/scalex));
  gfx_x=10;gfx_y+=spacing;
  gfx_printf("dB x: %4.1f", 20.0*log10(abs(x_dist)));
  gfx_x=10;gfx_y+=spacing;
  gfx_printf("   x: %f", x_dist^(1/scalex));
//*/

);
//  shift = centre/((2^i)^scalex);
//  gfx_line(centre+shift,0,centre+shift,gfx_h);
//  gfx_line(centre-shift,0,centre-shift,gfx_h);

/*     /// Peak value lines /// 
gaussian?(
gfx_set(0,0,1,1);
gfx_line(centre+min0*gfx_w/2,0,centre+min0*gfx_w/2,gfx_h);
gfx_line(centre+max0*gfx_w/2,0,centre+max0*gfx_w/2,gfx_h);
gfx_set(1,0,0,1);
gfx_line(centre+min1*gfx_w/2,0,centre+min1*gfx_w/2,gfx_h);
gfx_line(centre+max1*gfx_w/2,0,centre+max1*gfx_w/2,gfx_h);
);
//*/

gfx_setcursor(32515, "IDC_CROSS");
//gfx_setcursor(0);
