desc:STFT Transient Split [JM]
author: Jozef Mackowiak
version: 1.0
changelog: Initial Commit
about:
  # STFT Transient Split
  A tool that allows you to extract transients or stationary signals from the input signal.

License: MIT
Copyright (C) 2023 Jozef Mackowiak

// Based on the STFT template created by Geraint Luff


options: gfx_hz = 60;

slider1:fft_size_index=2<0,7,1{256,512,1024,2048,4096,8192,16384,32768>FFT size
slider2:treshold=1<0,1,0.001>Treshold
slider3:wet=1<0,1,0.001>-Wet
slider10:decay_factor=0<0,1,0.00001>Decay Factor 1
slider11:decay_factor1=0<0,1,0.00001>Decay Factor 2
//slider4:delta=0<0,1,1{Off,On}>Delta
//slider5:noise=0<0,1,0.001>Noise

@init

function process_stft_segment(fft_buffer, fft_size) local(fft_bin, left_real, left_imag, right_real, right_imag) (
  fft_bin = 0; // FFT bin number
  loop(fft_size/2+1,
    fft_bin2 = fft_bin ? (fft_size - fft_bin) : 0;
    ///^^^/// fft_bin == 0 ? (fft_bin2 = 0):(fft_bin2 = fft_size - fft_bin);

    // Unfold complex spectrum into two real spectra
    left_real = fft_buffer[2*fft_bin] + fft_buffer[2*fft_bin2];
    left_imag = fft_buffer[2*fft_bin + 1] - fft_buffer[2*fft_bin2 + 1];
    right_real = fft_buffer[2*fft_bin + 1] + fft_buffer[2*fft_bin2 + 1];
    right_imag = -fft_buffer[2*fft_bin] + fft_buffer[2*fft_bin2];
    
    l_mag = sqrt(left_real^2+left_imag^2);
    r_mag = sqrt(right_real^2+right_imag^2);
    lr_mag = (l_mag+r_mag)/2;
    
    mag_bufferSum[fft_bin] = mag_buff = lr_mag + mag_bufferSum[fft_bin]*decay_factor;
    mag_bufferSum1[fft_bin] = mag_buff1 = lr_mag + mag_bufferSum1[fft_bin]*decay_factor1;
    
    /*
    l_mag < treshold ? (
      left_real = 0;
      left_imag = 0;
    );
    
    r_mag < treshold ? (
      right_real = 0;
      right_imag = 0;
    );
    //*/
    
    
    //*
    //lr_mag*treshold < mag_buff*(1-decay_factor) ? (
    mag_buff1*(1-decay_factor1)*treshold < mag_buff*(1-decay_factor) ? (
      //left_real1 = left_real;
      //left_imag1 = left_imag;
      //right_real1 = right_real;
      //right_imag1 = right_imag;
      left_real1 = left_real; left_real = 0;
      left_imag1 = left_imag; left_imag = 0;
      right_real1 = right_real; right_real = 0;
      right_imag1 = right_imag; right_imag = 0;
    ):(
      left_real1 = 0;
      left_imag1 = 0;
      right_real1 = 0;
      right_imag1 = 0;
    );
    //*/
    
    /* tresh 0.5, decay1 - 0.994, decay2 - 0.06
    //ratio = lr_mag*treshold - mag_buff*(1-decay_factor);
    //ratio = lr_mag*treshold / mag_buff*(1-decay_factor);
    //ratio = mag_buff1*(1-decay_factor1)*treshold / mag_buff*(1-decay_factor);
    //ratio = atan(mag_buff1^treshold*(1-decay_factor1) - mag_buff*(1-decay_factor))/$pi/2+0.5;
    //ratio = log10(mag_buff1^treshold*(1-decay_factor1)) - log10(mag_buff*(1-decay_factor));
    ratio = (log10(mag_buff1*(1-decay_factor1)) - log10(mag_buff*(1-decay_factor)))*treshold;
    //ratio = 20*(log10(mag_buff1^treshold*(1-decay_factor1) / mag_buff*(1-decay_factor))-1);
    //ratio = 10^((mag_buff1^treshold*(1-decay_factor1) - mag_buff*(1-decay_factor))/20);
    //ratio = log10((10^(mag_buff1*(1-decay_factor1)) - 10^(mag_buff*(1-decay_factor))))*treshold;
    //ratio = ratio-1;
      //left_real1 = (1-ratio) * left_real;
      //left_imag1 = (1-ratio) * left_imag;
      //right_real1 = (1-ratio) * right_real;
      //right_imag1 = (1-ratio) * right_imag;
      
      //left_real1 = log(10^left_real + 10^ratio);
      //left_imag1 = log(10^left_imag + 10^ratio);
      //right_real1 = log(10^right_real + 10^ratio);
      //right_imag1 = log(10^right_imag + 10^ratio);
      
      left_real1 = left_real*ratio;
      left_imag1 = left_imag*ratio;
      right_real1 = right_real*ratio;
      right_imag1 = right_imag*ratio;
    
      //left_real *= ratio;
      //left_imag *= ratio;
      //right_real *= ratio;
      //right_imag *= ratio;
    //*/
    
    /*
    //ratio = lr_mag*treshold - mag_buff*(1-decay_factor);
    //ratio = lr_mag*treshold / mag_buff*(1-decay_factor);
    //ratio = mag_buff1*(1-decay_factor1)*treshold / mag_buff*(1-decay_factor);
    //ratio = atan(mag_buff1^treshold*(1-decay_factor1) - mag_buff*(1-decay_factor))/$pi/2+0.5;
    ratio = log(mag_buff1^treshold*(1-decay_factor1)) - log(mag_buff*(1-decay_factor));
    //ratio = ratio-1;
      left_real1 = (1-ratio) * left_real;
      left_imag1 = (1-ratio) * left_imag;
      right_real1 = (1-ratio) * right_real;
      right_imag1 = (1-ratio) * right_imag;
    
      //left_real *= ratio;
      //left_imag *= ratio;
      //right_real *= ratio;
      //right_imag *= ratio;
    //*/
    
    debug_max = max(debug_max,ratio);
    debug_min = min(debug_max,ratio);
    
    /*
    //ratio = lr_mag*treshold - mag_buff*(1-decay_factor);
    //ratio = lr_mag*treshold / mag_buff*(1-decay_factor);
    //ratio = mag_buff1*(1-decay_factor1)*treshold / mag_buff*(1-decay_factor);
    ratio = mag_buff1^treshold*(1-decay_factor1) / mag_buff*(1-decay_factor);
    //ratio = ratio-1;
      left_real1 = (1-ratio) * left_real;
      left_imag1 = (1-ratio) * left_imag;
      right_real1 = (1-ratio) * right_real;
      right_imag1 = (1-ratio) * right_imag;

      left_real *= ratio;
      left_imag *= ratio;
      right_real *= ratio;
      right_imag *= ratio;
    //*/
    
    /*
    //ratio = lr_mag*treshold / mag_buff*(1-decay_factor);
    ratio = atan(log10(mag_buff1*(1-decay_factor1) - mag_buff*(1-decay_factor))^treshold)/$pi/2+0.5;
      left_real1 = ratio * left_real;
      left_imag1 = ratio * left_imag;
      right_real1 = ratio * right_real;
      right_imag1 = ratio * right_imag;
    
      left_real *= 1-ratio;
      left_imag *= 1-ratio;
      right_real *= 1-ratio;
      right_imag *= 1-ratio;
    //*/
    
    
    /*
    l_mag < treshold ? (
      left_real1 = left_real; left_real = 0;
      left_imag1 = left_imag; left_imag = 0;
    ):(
      left_real1 = 0;
      left_imag1 = 0;
    );
    
    r_mag < treshold ? (
      right_real1 = right_real; right_real = 0;
      right_imag1 = right_imag; right_imag = 0;
    ):(
      right_real1 = 0;
      right_imag1 = 0;
    );
    //*/
    
    /*
    left_real *= wet*l_mag/l_mag_clip;
    left_imag *= wet*l_mag/l_mag_clip;
    right_real *= wet*r_mag/r_mag_clip;
    right_imag *= wet*r_mag/r_mag_clip;
    //*/


    // Re-fold back into complex spectrum
    fft_buffer[2*fft_bin] = (left_real - right_imag)*0.5;
    fft_buffer[2*fft_bin + 1] = (left_imag + right_real)*0.5;
    fft_buffer[2*fft_bin2] = (left_real + right_imag)*0.5;
    fft_buffer[2*fft_bin2 + 1] = (-left_imag + right_real)*0.5;
    
    // Re-fold back into complex spectrum
    fft_buffer1[2*fft_bin] = (left_real1 - right_imag1)*0.5;
    fft_buffer1[2*fft_bin + 1] = (left_imag1 + right_real1)*0.5;
    fft_buffer1[2*fft_bin2] = (left_real1 + right_imag1)*0.5;
    fft_buffer1[2*fft_bin2 + 1] = (-left_imag1 + right_real1)*0.5;

    fft_bin += 1;
  );
);

function setup_stft_state(fft_size, first_time) (
  //////////////////////// Setup block
  // This is called when playback starts, or when the FFT size is changed
  0;
  ////////////////////////
);

MAX_FFT_SIZE = 32768;

freemem = 0;
freemem = (fft_buffer = freemem) + MAX_FFT_SIZE*2;
freemem = (fft_buffer1 = freemem) + MAX_FFT_SIZE*2;
freemem = (window_buffer = freemem) + MAX_FFT_SIZE;
freemem = (mag_bufferSum = freemem) + MAX_FFT_SIZE;
freemem = (mag_bufferSum1 = freemem) + MAX_FFT_SIZE;

buffer_length = srate;
buffer_index = 0;
freemem = (input_buffer = freemem) + buffer_length*2;
freemem = (output_buffer = freemem) + buffer_length*2;
freemem = (output_buffer1 = freemem) + buffer_length*2;

function window(r) local(s, s2, gaussian_width, x) (
  // When squared, the Hann window adds up perfectly for overlap >= 4, so it's suitable for perfect reconstruction
  (0.5 - 0.5*cos(r*2*$pi))/sqrt(0.375);
);

fft_size = 0;

@block

overlap_factor = 4; // Default is 6, but 4 gives better result
fft_size = 256<<fft_size_index;
fft_interval = fft_size/overlap_factor;
fft_scaling_factor = 1/overlap_factor/fft_size;

fft_size != prev_fft_size ? (
  setup_stft_state(fft_size, prev_fft_size == 0);
  prev_fft_size = fft_size;
  // Fill window buffer
  i = 0;
  loop(fft_size,
    r = (i + 0.5)/fft_size;
    window_buffer[i] = window(r);
    i += 1;
  );
);

pdc_delay = fft_size;
pdc_bot_ch = 0;
pdc_top_ch = 4;

@sample

input_buffer[buffer_index*2] = spl0_b = spl0;
input_buffer[buffer_index*2 + 1] = spl1_b = spl1;

fft_counter += 1;
fft_counter >= fft_interval ? (
  fft_counter = 0;

  // Copy input to buffer
  bi = buffer_index - fft_size + 1;
  i = 0;
  loop(fft_size,
    i2 = bi + i;
    i2 < 0 ? i2 += buffer_length;

    fft_buffer[2*i] = input_buffer[2*i2]*window_buffer[i];
    fft_buffer[2*i + 1] = input_buffer[2*i2 + 1]*window_buffer[i];

    i += 1;
  );

  // Process buffer
  fft(fft_buffer, fft_size);
  fft_permute(fft_buffer, fft_size);

  process_stft_segment(fft_buffer, fft_size);

  fft_ipermute(fft_buffer, fft_size);
  ifft(fft_buffer, fft_size);
  
  fft_ipermute(fft_buffer1, fft_size);
  ifft(fft_buffer1, fft_size);

  // Add to output
  bi = buffer_index - fft_size + 1;
  i = 0;
  loop(fft_size,
    i2 = bi + i;
    (i2 < 0) ? i2 += buffer_length;

    output_buffer[2*i2] += fft_buffer[2*i]*fft_scaling_factor*window_buffer[i];
    output_buffer[2*i2 + 1] += fft_buffer[2*i + 1]*fft_scaling_factor*window_buffer[i];
    
    output_buffer1[2*i2] += fft_buffer1[2*i]*fft_scaling_factor*window_buffer[i];
    output_buffer1[2*i2 + 1] += fft_buffer1[2*i + 1]*fft_scaling_factor*window_buffer[i];

    i += 1;
  );
);

output_index = buffer_index - fft_size;
output_index < 0 ? output_index += buffer_length;
spl0 = output_buffer[output_index*2];
spl1 = output_buffer[output_index*2 + 1];
output_buffer[output_index*2] = 0; // clear the sample we just read
output_buffer[output_index*2 + 1] = 0;

spl2 = output_buffer1[output_index*2];
spl3 = output_buffer1[output_index*2 + 1];
output_buffer1[output_index*2] = 0; // clear the sample we just read
output_buffer1[output_index*2 + 1] = 0;

//spl4 = spl2 - spl0;
//spl5 = spl3 - spl1;

//spl0 -= spl2; spl1 -= spl3;


buffer_index = (buffer_index + 1)%buffer_length;


@gfx
gfx_r=gfx_g=gfx_b=0; gfx_a=(1-0.8); // Time Blur
gfx_x=gfx_y=0;
gfx_rectto(gfx_w,gfx_h);
gfx_clear=-1;
gfx_clear=0;

//*
width = 1;
height = 0.2;
scx = 1;
shx = 0;
//size = min(gfx_w,gfx_h)|0;
//gfx_setpixel(1,1,1);
gfx_set(1,1,1,1);
display_size = floor(fft_size*scx);
fft_size2 = fft_size*2;
//scalex = width*gfx_w/fft_size;
scalex = width*gfx_w/display_size;
scaley = height*gfx_h/fft_size;
  ascale=gfx_h/$pi*0.25;
  xscale=800/(fft_size-4);
  //sc=(gfx_h)*20/(-144 * log(10));
  sc=(gfx_h)*20/(-144 * log(10));
  wsc=gfx_w/log(1+400);
  //debug=(10^(-500/20*2));

  //z = mult*radius*gfx_h/2*(1/fft_size);
  //old_x1=0;
  old_x1=floor(shx*gfx_w);
  j = 0;
  loop(display_size/2,
    
    mag = log10(mag_bufferSum[j]*(1-decay_factor))*gfx_h/2*height;
    mag1 = log10(mag_bufferSum1[j]*(1-decay_factor1))*gfx_h/2*height;
    crest = (mag-mag1);
    //old_crest = old_mag - old_mag1;

    
    //x1 = j*scalex;
    x1 = 2*j*scalex + floor(shx*gfx_w);
    x1 = width*log(1.0+j*xscale)*wsc;
    gfx_set(1,0,0,1);
    gfx_set(1,1,1,0.5);
    

    gfx_line(x1, gfx_h-mag-gfx_h/2, old_x1, gfx_h-old_mag-gfx_h/2);
    gfx_line(x1, gfx_h-mag1-gfx_h/2, old_x1, gfx_h-old_mag1-gfx_h/2);
    gfx_set(0.5,0.5,1,0.5);
    gfx_line(x1, gfx_h-crest-gfx_h/2, old_x1, gfx_h-old_crest-gfx_h/2);

    old_x1 = x1;
    old_mag = mag;
    old_mag1 = mag1;
    old_crest = crest;
    j += 1;
  );
  
  
  
  gfx_set(1,1,1,0.3);
  gfx_line(0, gfx_h/2, gfx_w, gfx_h/2);
  
  //gfx_line(0, gfx_h/4, gfx_w, gfx_h/4);
  //gfx_line(0, 3*gfx_h/4, gfx_w, 3*gfx_h/4);
