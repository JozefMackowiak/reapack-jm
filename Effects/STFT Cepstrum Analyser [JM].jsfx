desc:STFT Cepstrum Analyser v2.0 [JM]
author: Jozef Mackowiak
version: 0.0.0
changelog: Initial Commit
about:
  # Cepstrum Analyser
    ### Features:
  - auto-detect maximum in selection
  - note, distance, frequency and quefrency readout 
  - color indicating chroma of musical note

License: MIT
Copyright (C) 2023 Jozef Mackowiak

// Based on the STFT template created by Geraint Luff


options: gfx_hz = 60;

slider1:fft_size_index=2<0,7,1{256,512,1024,2048,4096,8192,16384,32768>FFT size
//slider1:fft_size_index=2<0,6,1{256,512,1024,2048,4096,8192,16384>FFT size
//slider10:height=0.07<0,20,0.001>Height
slider10:height=10<0,20,0.001>Height
slider11:width=1<0,2,0.001>-Width
slider12:scx=1<0,1,0.001>-Scale X
slider13:shx=0<-1,0,0.001>-Shift X
slider14:blur=0<0,1,0.00001>-Time Blur
slider15:analysis_decay_factor=0.8<0,1,0.00001>Analysis Decay Factor
//slider13:magnitude=0<0,1,{Off,On}>Magnitude
slider16:overlap=16<1,32,1>-Overlap

slider20:export=0<0,1,1{Off,On}>-Export


in_pin:left input
in_pin:right input
out_pin:none

@init
invlog2 = 1/log(2);
invC4 = 1/261.6255653005986;

MAX_FFT_SIZE = 32768*2;
//MAX_FFT_SIZE = 16384;

freemem = 0;
//freemem = (fft_buffer = freemem) + MAX_FFT_SIZE*2;
freemem = (window_buffer = freemem) + MAX_FFT_SIZE;

buffer_length = srate;
buffer_index = 0;

//freemem = (phase_buffer = freemem) + MAX_FFT_SIZE*2;
//freemem = (l_mag_buffer = freemem) + MAX_FFT_SIZE*2;
//freemem = (r_mag_buffer = freemem) + MAX_FFT_SIZE*2;
freemem = (fft_bufferA = freemem) + MAX_FFT_SIZE*2;
freemem = (fft_bufferB = freemem) + MAX_FFT_SIZE*2;
freemem = (delay_bufferSum = freemem) + MAX_FFT_SIZE;
freemem = (export_buffer = freemem) + MAX_FFT_SIZE;

freemem = (input_buffer = freemem) + buffer_length;
freemem = (output_buffer = freemem) + buffer_length;


function window(r) local(s, s2, gaussian_width, x) (
  // When squared, the Hann window adds up perfectly for overlap >= 4, so it's suitable for perfect reconstruction
  (0.5 - 0.5*cos(r*2*$pi))/sqrt(0.375);
);

function HSBtoRGB(hue,saturation,value,alpha) 
 local (r,g,b,h,f,v,p,q,t) 
( 
   ( hue > 360) ? ( hue = hue % 360;) 
   :( hue < 0 ) ? ( hue = hue % 360 ;); 
   saturation = min ( max(saturation,0),1); 
   v = floor( 255 * value); 
   v = min ( max(v,0),255); 
   (saturation == 0)? 
   ( 
   r = v ; g = v; b = v; 
   ):( 
   h = floor( hue / 60); 
   f = hue / 60-h; 
   p = floor( v * (1-saturation)); 
   p = min ( max(p,0),255); 
   q = floor( v * (1-f * saturation)); 
   q = min ( max(q,0),255); 
   t = floor( v * (1-(1-f) * saturation)); 
   t = min ( max(t,0),255); 
   (h==0)?(r=v;g=t;b=p;) 
   :(h==1)?(r=q;g=v;b=p;) 
   :(h==2)?(r=p;g=v;b=t;) 
   :(h==3)?(r=p;g=q;b=v;) 
   :(h==4)?(r=t;g=p;b=v;) 
   :(h==5)?(r=v;g=p;b=q;) 
   :( r=v;g=t;b=p;); 
   ); 
   this.r = r; 
   this.g = g; 
   this.b = b; 
   //gfx_r = r/255;
   //gfx_g = g/255;
   //gfx_b = b/255;
   gfx_set(r/255, g/255, b/255, alpha);
); 

function from_frequency(hz)
local(octave, float_note, note, note_label, offset)
global()
(
  note = log(hz / 261.6255653005986) / log(2);
  octave = floor(note);
  float_note = 12 * (note - octave);
  note = floor(float_note + 0.5);
  offset = float_note - note;
  note_label = note < 1 ? "C-" : note < 2 ? "C#" : note < 3 ? "D-" : note < 4 ? "D#" : note < 5 ? "E-" : note < 6 ? "F-" : note < 7 ? "F#" : note < 8 ? "G-" : note < 9 ? "G#" : note < 10 ? "A-" : note < 11 ? "A#" : "B-";
  sprintf(16, "%s%d (%+.2f ct)", note_label, octave + 4, offset)
);

fft_size = 0;

@block

overlap_factor = overlap;
fft_size = 256<<fft_size_index;
fft_interval = fft_size/overlap_factor;
fft_scaling_factor = 1/overlap_factor/fft_size;

fft_size != prev_fft_size ? (
  //setup_stft_state(fft_size, prev_fft_size == 0);
  prev_fft_size = fft_size;
  // Fill window buffer
  i = 0;
  loop(fft_size,
    r = (i + 0.5)/fft_size;
    window_buffer[i] = window(r);
    i += 1;
  );
);

//pdc_delay = fft_size;
//pdc_bot_ch = 0;
//pdc_top_ch = 2;

@slider
//export = slider20;

@sample
pass = 0;
input_buffer[buffer_index*2  ] = spl0;
input_buffer[buffer_index*2+1] = spl1;

fft_counter += 1;

buffer_index = (buffer_index + 1)%buffer_length;


@gfx
fft_counter >= fft_interval ? (
  fft_counter = 0;

  // Copy input to buffer
  bi = buffer_index - fft_size + 1;
  i = 0;
  loop(fft_size,
    i2 = bi + i;
    i2 < 0 ? i2 += buffer_length;
    
    //*
    //delay_index = buffer_index - fft_size + i + 1;
    fft_bufferA[i*2] = input_buffer[2*i2]*window_buffer[i];
    fft_bufferA[i*2 + 1] = 0;
    fft_bufferB[i*2] = input_buffer[2*i2 + 1]*window_buffer[i];
    fft_bufferB[i*2 + 1] = 0;
    //*/

    i += 1;
  );

  // Process buffer
  fft(fft_bufferA, fft_size);
  fft(fft_bufferB, fft_size);
  fft_permute(fft_bufferA, fft_size);
  fft_permute(fft_bufferB, fft_size);
  
  i = 0;
  while (i < fft_size) (
    rA = fft_bufferA[2*i];
    iA = fft_bufferA[2*i + 1];
    rB = fft_bufferB[2*i];
    iB = fft_bufferB[2*i + 1];
    
    /* Autocorrelation / Cross-Correlation
    // Magnitude by which we divide - A, B or both
    // The one being corrected determines the amplitude, so doesn't get divided
    //amplitude_mode === 1 || (receive_routing_id && gmem[_GMEM_SOURCE_CORRECT_SENDING]) ? (
      //mag2 = (rA*rA + iA*iA);
    //) : amplitude_mode === 2 || (receive_routing_id && !gmem[_GMEM_SOURCE_CORRECT_SENDING]) ? (
          mag2 = (rB*rB + iB*iB);
    //) : (
      //mag2 = (rA*rA + iA*iA)*(rB*rB + iB*iB);
      //amplitude_mode === 0 ? (
        //mag2 = sqrt(mag2);
      //);
    //);
    mag = sqrt(mag2);
    //factor = 1/(max(mag, 0.000001))/fft_size;
    factor = 1/mag/fft_size;
    fft_bufferA[2*i  ] = ( rA*rB + iA*iB)*factor;
    fft_bufferA[2*i+1] = (-rA*iB + iA*rB)*factor;
    //*/
    
    //* /// Cepstrum ///
    //ampA = log(rA^2 + iA^2);
    ampA = log(sqrt(sqr(rA) + sqr(iA)));
    phaA = atan2(iA,rA);
    fft_bufferA[2*i  ] = ampA;
    fft_bufferA[2*i+1] = phaA;
    //*/
    
    /* /// Impulse response / Transfer Function ///
    fft_bufferA[2*i  ] = ( rA*rB + iA*iB)/(rB*rB + iB*iB);
    fft_bufferA[2*i+1] = (-rA*iB + iA*rB)/(rB*rB + iB*iB);
    //*/
    
    
    /* Coherence
    fft_bufferA[2*i  ] = ((rA*rB + iA*iB)^2)/((rA*rA + iA*iA)*(rB*rB + iB*iB));
    fft_bufferA[2*i+1] = (-rA*iB + iA*rB)/(rB*rB + iB*iB);
    //*/
    
    /* Coherence2
    fft_bufferA[2*i  ] = ( (rA*rB + iA*iB)^2)/( (rA^2 + iA^2)*(rB^2 + iB^2) );
    //fft_bufferA[2*i+1] = (-rA*iB + iA*rB)/(rB*rB + iB*iB);
    //*/
    
    /* Coherence3
    fft_bufferA[2*i  ] = ( ( (rA*rB + iA*iB)/(rB*rB + iB*iB) )^2 ) / ( (rA*rA + iA*iA)*(rB*rB + iB*iB) );
    //fft_bufferA[2*i+1] = (-rA*iB + iA*rB)/(rB*rB + iB*iB);
    //*/
    
    /* Coherence4
    fft_bufferA[2*i  ] = ( ( (rA*rB + iA*iB)^2 - (rA*iB - iB*rA)^2 ) ) / ( (rA^2 * rB^2) - (iA^2 * rB^2) - 4*rA*iA*rB*iB - (rA^2 * iB^2) + (iB^2 * iB^2) );
    //fft_bufferA[2*i+1] = (-rA*iB + iA*rB)/(rB*rB + iB*iB);
    //*/
    
    /* Coherence5
    fft_bufferA[2*i  ] = (rA^2 * (rB^2 - iB^2) - 4*rA*iA*rB*iB + iA^2 * (iB^2 - rB^2)) / ((rA^2 + iA^2) * (rB^2 + iB^2));
    //fft_bufferA[2*i+1] = (-rA*iB + iA*rB)/(rB*rB + iB*iB);
    //*/
    
    /* Coherence6
    fft_bufferA[2*i  ] = (rA^2 * (rB^2 - iB^2) - 4*rA*iA*rB*iB + iA^2 * (iB^2 - rB^2)) / ((rA^2 + iA^2) * (rB^2 + iB^2));
    //fft_bufferA[2*i+1] = (-rA*iB + iA*rB)/(rB*rB + iB*iB);
    //*/
    
    
    i += 1;
  );
  
  fft_ipermute(fft_bufferA, fft_size); ifft(fft_bufferA, fft_size);

//*
  //analysis_decay_hz = 1; /// 5-0
  //analysis_decay_invsamples = analysis_decay_hz/srate;
  //analysis_decay_samples = srate / analysis_decay_hz;
  //analysis_decay_factor = analysis_decay_hz === 0 ? 1 : exp(-delay_fftinterval/analysis_decay_samples);

  max_abs = 0;
  max_phase = 1;
  max_index = 0;
  i = 0;
  loop(fft_size,
    //i2 = (i + fft_size/2 + floor(shx*fft_size/2))%fft_size;
    i2 = (i + fft_size/2)%fft_size;
    i2=i;
    //value = delay_bufferSum[i2] = delay_bufferSum[i2]*analysis_decay_factor + fft_bufferA[2*i];
    //value = delay_bufferSum[i2] = delay_bufferSum[i2]*analysis_decay_factor + (fft_bufferA[2*i]^2 + fft_bufferA[2*i+1]^2);
    value = delay_bufferSum[i2] = delay_bufferSum[i2]*analysis_decay_factor + fft_bufferA[2*i];
    //value = delay_bufferSum[i] = delay_bufferSum[i]*analysis_decay_factor + fft_bufferA[i];
    i += 1;
    
    abs(value) >= max_abs && i>4 ? (
      i_wrapped = (i > fft_size/2) ? i - fft_size : i;
    
      (delay_peak_minsample == delay_peak_maxsample) || (
        i_wrapped >= min(delay_peak_minsample, delay_peak_maxsample)
        && i_wrapped <= max(delay_peak_minsample, delay_peak_maxsample)
      ) ? (
        max_abs = abs(delay_bufferSum[i2]);
        max_index = i_wrapped;
        max_phase = delay_bufferSum[i2] < 0 ? -1 : 1;
      );
    );
    
  );
//*/ 

  pass = 1;
);


export ? (
  i = 0;
  loop(fft_size,
    export_buffer[i] = delay_bufferSum[i]/max_abs/2;
    i += 1;
  );
  export_buffer_to_project(export_buffer,fft_size,1,srate,0);
  export=0;
  //export_buffer_to_project(buffer,length_samples,nch,srate,track_index[,flags,tempo,planar_pitch])
);


gfx_r=gfx_g=gfx_b=0; gfx_a=(1-blur); // Time Blur
gfx_x=gfx_y=0;
gfx_rectto(gfx_w,gfx_h);

gfx_clear=-1;
/* /// Clear buffer ///
mouse_cap || old_fft_size != fft_size ? (
  gfx_clear=0;
  memset(delay_bufferSum, 0, fft_size);
  old_fft_size = fft_size;
);
//*/
//* /// Clear buffer ///
old_fft_size != fft_size ? (
  gfx_clear=0;
  memset(delay_bufferSum, 0, fft_size);
  old_fft_size = fft_size;
);
//*/


//*/
pass ? (gfx_flush):(gfx_wait);


//size = min(gfx_w,gfx_h)|0;
//gfx_setpixel(1,1,1);
gfx_set(1,1,1,1);
display_size = floor(fft_size*scx);
fft_size2 = fft_size*2;
//scalex = width*gfx_w/fft_size;
scalex = width*gfx_w/display_size;
scaley = height*gfx_h/fft_size;
  ascale=gfx_h/$pi*0.25;
  xscale=800/(fft_size-4);
  sc=(gfx_h)*20/(-144 * log(10));
  wsc=gfx_w/log(1+400);
  debug=(10^(-500/20*2));


  //z = mult*radius*gfx_h/2*(1/fft_size);
  //old_x1=0;
  old_x1=floor(shx*gfx_w);
  i = 0;
  loop(display_size/2,
    
    //phi = phase_buffer[i];

    //l_mag = fft_buffer[i]*height*gfx_h/100; //r_mag = fft_buffer[2*i+1]*height*gfx_h*fft_size/2;
    l_mag = delay_bufferSum[i]*height*gfx_h/2/max_abs; //r_mag = fft_buffer[2*i+1]*height*gfx_h*fft_size/2;
    //l_mag = fft_bufferA[2*i]*height*gfx_h*fft_size/2; r_mag = fft_bufferA[2*i+1]*height*gfx_h*fft_size/2; // wierd bechaviour
    //l_mag = log(delay_bufferSum[i+floor((fft_size - display_size)*0.5)])*height*gfx_h/2/max_abs;
    //l_mag = log(delay_bufferSum[i+floor((fft_size - display_size)*0.5)])*scaley;
    //l_mag = log(delay_bufferSum[i+floor((fft_size - display_size)*0.5)])*sc;
    //l_mag = log(delay_bufferSum[i+floor((fft_size - display_size)*0.5)])*height*gfx_h/2;
        
    //x1 = i*scalex;
    chroma = log(srate/i*invC4*2)*invlog2;
    HSBtoRGB(360*chroma,0.7,1,1);
    x1 = 2*i*scalex + floor(shx*gfx_w);
    //x1 < 0 ? (x1+=gfx_w);
    //x1 = width*log(1.0+i*xscale)*wsc;
    
    gfx_line(x1, gfx_h-l_mag-gfx_h/2, old_x1, gfx_h-old_l_mag-gfx_h/2);
    //gfx_line(x1, gfx_h-l_mag, old_x1, gfx_h-old_l_mag);
    
    old_x1 = x1;
    old_l_mag = l_mag;
    old_r_mag = r_mag;

    i += 1;
  );
  
  
  gfx_set(1,1,1,1);
  spacing = 10;
  //*
  //gfx_h > 300 ? (
  gfx_x = 10; gfx_y = gfx_h - 15;
  //gfx_printf("Peak: %3.0f spls", max_index-1); gfx_x=10;gfx_y+=spacing;
debug = delay_bufferSum[1];





// cursor cross + readout
  gfx_set(0,.5,1,0.5);
  //gfx_line(0,mouse_y,gfx_w,mouse_y,1);
  
  
  sel_len <= 0 ? (
    !show_ctrls && mouse_x>0 && mouse_x<gfx_w && mouse_y>0 && mouse_y<gfx_h && !cap_drag ? (
      
      gfx_line(mouse_x,0,mouse_x,gfx_h,1);
      
      gfx_set(1,1,1,1);
      spacing = 10;
      spls = fft_size*mouse_x/gfx_w;
      //*
      //gfx_h > 300 ? (
      gfx_x = 10; gfx_y = gfx_h - 15;
      gfx_printf("Quefrency: %5.0f spls", spls/2); gfx_x=10;gfx_y-=spacing;
      gfx_printf("Quefrency: %5.1f ms",   1000*spls/srate/2); gfx_x=10;gfx_y-=spacing;
      gfx_printf("Frequency: %5.1f Hz",   srate/spls*2); gfx_x=10;gfx_y-=spacing;
      gfx_printf("Distance:  %5.1f m",   343*spls/2/srate); gfx_x=10;gfx_y-=spacing;
      
      chroma = log(abs(srate/spls)*invC4*2)*invlog2;
      HSBtoRGB(360*chroma,0.7,1,1);
      gfx_printf(from_frequency(abs(srate/spls)););
    );
  ):(
    gfx_set(0,.5,1,0.5);
    gfx_x = 2*gfx_w*sel_max_index/fft_size;
    gfx_line(gfx_x,0,gfx_x,gfx_h);
    //gfx_set(1,0,0,0.9);  gfx_line(0,gfx_h/2,gfx_w,gfx_h/2);
    //gfx_set(0,.5,1);
    //gfx_line(0,mouse_y,gfx_w,mouse_y,1);
    //gfx_line(mouse_x,0,mouse_x,gfx_h,1);
    //gfx_set(0.25,0.75,1,1);
    //gfx_set(1,0.5,0.5,1);
    gfx_set(1,1,1,1);
    spacing = 10;
    spls = fft_size*mouse_x/gfx_w;
    //*
    //gfx_h > 300 ? (
    gfx_x = 10; gfx_y = gfx_h - 15;
    gfx_printf("Quefrency: %5.0f spls", sel_max_index); gfx_x=10;gfx_y-=spacing;
    gfx_printf("Quefrency: %5.1f ms",   1000*sel_max_index/srate); gfx_x=10;gfx_y-=spacing;
    gfx_printf("Frequency: %5.1f Hz",   srate/sel_max_index); gfx_x=10;gfx_y-=spacing;
    gfx_printf("Distance:  %5.1f m",   343*sel_max_index/srate); gfx_x=10;gfx_y-=spacing;
    
    chroma = log(abs(srate/sel_max_index)*invC4*2)*invlog2;
    HSBtoRGB(360*chroma,0.7,1,1);
    gfx_printf(from_frequency(abs(srate/sel_max_index)););
  );
  






//* /// Selection ///
mouse_cap ? (
  selection == 0 ? (selection = 1; selA_spls = floor(mouse_x/gfx_w*fft_size/2););

  selB_spls = floor(mouse_x/gfx_w*fft_size/2);
  sel_len = abs(selA_spls-selB_spls);
):(
  selection = 0;
);
//*/


gfx_set(1,1,1,0.1);
gfx_x = selA_spls*gfx_w/fft_size*2; gfx_y = 0;
gfx_rectto(selB_spls*gfx_w/fft_size*2,gfx_h);

  sel_max_abs = 0;
  sel_max_index = 0;
  selA_spls < selB_spls ? (i = selA_spls):(i = selB_spls);
  
  loop(sel_len,
    //i2 = (i + fft_size/2 + floor(shx*fft_size/2))%fft_size;
    //i2 = (i + fft_size/2)%fft_size;
    //i2=i;
    value = delay_bufferSum[i];
    
    abs(value) >= sel_max_abs ? (
        sel_max_abs = abs(value);
        sel_max_index = i;
    );
    i += 1;
    
  );
  
  //gfx_setcursor(32513, "IDC_IBEAM");
  
