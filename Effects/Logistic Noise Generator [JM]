desc:Logistic Noise Generator [JM]
// Copyright 2022 Joe Matthias
// License: MIT
options: gfx_hz = 60;

slider1:gain_db=-18<-144,12,1>Gain [dB]
slider2:3<2,4,0.000001>a
slider3:sh=0<0,300,1>Sample Hold
slider4:x1=0.1<0,1,0.00001>-x1
slider5:k=256<0,512,1>-k
slider6:step=0<-1,1,0.001>Step
slider7:dc_filter=1<0,1,1{Off,On}>DC Filter

// 1       -> (1;2)
// 2       -> (3;1+sqrt(6)) -> (3;3.44949)
// 4       -> (3.44949;3.54409)
// 8;16;32 -> (3.54409;)
// chaos   -> (3.56995)
// 3       -> (1+sqrt(8)) -> (3.82843)

@init
  dc = 0;
  k = 100;
  last_gain=10^(gain_db/20);
  noise_buffer = 0.000001;
  itm1=itm2=otm1=otm2=0;

@slider
  next_gain=10^(gain_db/20);
  a = slider2;

@block
  d_gain = (next_gain - last_gain)/samplesblock;

@sample
  i > sh ? (
    i = 0;
    slider2+=step/100000*(sh+1);
    slider2 > 2 && slider2 < 4 ? (a = slider2):(slider2 = a);
    noise = a * noise_buffer * (1 - noise_buffer);
    noise_buffer = noise;
    noise > 1 ? (noise = 1): noise < -1 ? (noise =- 1);
  );
  i += 1;
  
  noise_out = noise;
  dc_filter ? (otm1=0.999*otm1 + noise_out - itm1; itm1=noise_out; noise_out=otm1);
  
  spl0 = spl1 = ((noise_out - 0.5) * last_gain)*2;
  last_gain += d_gain;
  
  spl2 = (a - 2) - 1;

@gfx
  //http://en.wikipedia.org/wiki/Cobweb_plot
  
  gfx_set(1,1,1,0.2);
  gfx_x = x1 * gfx_w;
  gfx_y = (gfx_h - (0 * gfx_h));
  y = a * x1 * (1 - x1);
  
  loop(k,
    gfx_lineto(  gfx_x, (gfx_h-(y*gfx_h)), 0);
    gfx_lineto(y*gfx_w, (gfx_h-(y*gfx_h)), 0);
    y = a*y*(1-y);
  );
  
  //*
  n = 0;
  nstep = 1/gfx_w;
  x = 0;
  gfx_set(1,1,1,0.1);
  loop(gfx_w,
    y = a * n * (1 - (n * 1));
    gfx_x = x;
    gfx_y = (gfx_h - (y * gfx_h));
    gfx_setpixel(1,1,1);
    n += nstep;
    x += 1;
  );
  gfx_line(0,gfx_h,gfx_w,0);
  //*/

  
