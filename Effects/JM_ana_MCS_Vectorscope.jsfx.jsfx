desc:MCS Vectorscope [JM]
author: Jozef Mackowiak
version: 0.0.0
changelog: Initial Commit
about:
  # Mean Complex Square Vectorscope
  Stereo signal azimuth analyser.

License: MIT
Copyright (C) 2023 Jozef Mackowiak


options: gfx_hz = 60;

//slider1:50<0,100,1>Width
//slider2:5<0,10,1>Height
//slider3:5<0,10,1>X
//slider4:10<0,64,1>Y
//slider5:0<0,1,0.0001>BG Color
/slider5:line_alpha=0.1<0,1,0.001>Line Alpha
slider5:0.1<0,1,0.001>Line Alpha
slider6:0.2<0,1,0.01>Alpha

//slider7:12<0,360,1>-Hue
//slider8:0.75<0,1,0.01>-Saturation
//slider9:1<0,1,0.01>-Value

//slider10:64<0,1024,1>Bins
//slider11:0<-1,1,0.0001>-AVG
//slider12:0.2<0,1,0.0001>-STD
//slider13:1<0,1,0.0001>Hight

//slider16:1<0,1,1{Off,On}>-dB scale
//slider17:16<0,32,1>-Bit Depth

slider30:1<0,64,1>-Horiz Lines
//slider31:0<0,1,0.001>-Scale Y
slider32:0.5<0,1,0.001>Scale X
//slider33:0<0,1,0.001>Attenuate
//slider33:0<0,1,0.001>Bin Decay
//slider34:0<0,1,1{Off,On}>-Gaussian
//slider35:0<0,1,1{Off,On}>-Difference
slider36:1<0,1,1{Off,On}>-Squared Mode
slider37:grid=1<0,1,1{Off,On}>Grid
slider38:weight_ms=3000<0,10000,0.01>LP coeff [ms]

slider48:0.5<0,1,0.001> Blur
slider64:power=2<1,8,1>Cplx power


//import Tale/window.jsfx-inc
import Tale/rc_filter.jsfx-inc
import Tale/complex.jsfx-inc

in_pin:input 1
in_pin:input 2
in_pin:input 3
in_pin:input 4
//options: no_meter;

@init
gfx_clear=-1;
log10_2 = log10(2.0);
pi = $pi;
pi2 = 2*$pi;
sqrt2pi = sqrt(2.0*$pi);
sqrt2 = sqrt(2);
gfx_ext_retina=1.0;
//ext_nodenorm=1;
//ext_noinit=1;
//gfx_clear=-1;
//gfx_clear=0;
//count = 0;
minabs0 = minabs1 = 1;

p_ms = 10000;
decay = exp(-1.0/(p_ms*srate*0.001));
function c_peak (amplitude,phase) local (in) instance (amp,pha)
(
  in = amplitude;
  in > amp ? (amp = in; pha = phase) : amp = amp*decay;
);


function rms_init(weight_ms)
instance (weight)(
  weight = 1-exp(-1/(weight_ms / 1000 * srate));
);

function rms(input)
instance (s,rms,weight)(
  rms = sqrt(s +=  weight * ( input^2 - s ));
);


//buffer_length = srate/100;
buffer_length = srate/4; /// Set to /8 and check missed samples
//buffer_length = 1024;
buffer_index = 0;
freemem = (input_buffer0     = freemem) + buffer_length*2;
//freemem = (input_buffer1     = freemem) + buffer_length*2;
freemem = (input_buffer0_cpy = freemem) + buffer_length*2;
//freemem = (input_buffer1_cpy = freemem) + buffer_length*2;

function log2(x)
(
    log(x) / log(2);
);

function dbtoa(db)
(
    pow(10.0, db * 0.05);
);

function atodb(amp)
(
    20.0 * log10(amp);
);

function wrap(input mini maxi)
(
    while (input < mini) (
        input += mini;
    );
    while (input >= maxi) (
        input -= maxi;
    );
    input;
);

function clip(input mini maxi)
(
    max(min(input, maxi), mini);
);

function scale(x xmin xmax ymin ymax ex) //midi slider (0-127 linear) to a frequency scale (20-20000 exponential).
(
    x -= xmin;
    x /= (xmax - xmin);
    x ^= ex;
    x *= (ymax - ymin);
    x + ymin;
);

function moveto (x,y) (
  gfx_x = x; gfx_y = y;
);

function moveby (x,y) (
  gfx_x += x; gfx_y += y;
);

function movetopolar (x,y,radius,angle) (
  gfx_x = x+sin(angle)*radius;
  gfx_y = y-cos(angle)*radius;
);

function movebypolar (x,y,radius,angle) (
  gfx_x += x+sin(angle)*radius;
  gfx_y += y-cos(angle)*radius;
);

function linepolar (x,y,radius,angle,aa) (
  gfx_line(x,y,x+sin(angle)*radius,y-cos(angle)*radius,aa);
);

function linetopolar (radius,angle,aa) (
  gfx_lineto(gfx_x + sin(angle)*radius,gfx_y - cos(angle)*radius,aa);
);

function HSBtoRGB(hue,saturation,value,alpla) 
 local (r,g,b,h,f,v,p,q,t) 
( 
   ( hue > 360) ? ( hue = hue % 360;) 
   :( hue < 0 ) ? ( hue = hue % 360 ;); 
   saturation = min ( max(saturation,0),1); 
   v = floor( 255 * value); 
   v = min ( max(v,0),255); 
   (saturation == 0)? 
   ( 
   r = v ; g = v; b = v; 
   ):( 
   h = floor( hue / 60); 
   f = hue / 60-h; 
   p = floor( v * (1-saturation)); 
   p = min ( max(p,0),255); 
   q = floor( v * (1-f * saturation)); 
   q = min ( max(q,0),255); 
   t = floor( v * (1-(1-f) * saturation)); 
   t = min ( max(t,0),255); 
   (h==0)?(r=v;g=t;b=p;) 
   :(h==1)?(r=q;g=v;b=p;) 
   :(h==2)?(r=p;g=v;b=t;) 
   :(h==3)?(r=p;g=q;b=v;) 
   :(h==4)?(r=t;g=p;b=v;) 
   :(h==5)?(r=v;g=p;b=q;) 
   :( r=v;g=t;b=p;); 
   ); 
   this.r = r; 
   this.g = g; 
   this.b = b; 
   this.a = a; 
   //gfx_r = r/255;
   //gfx_g = g/255;
   //gfx_b = b/255;
   gfx_set(r/255, g/255, b/255, a);
); 

@slider
// 1-0
// 2-/16
// 3-/12
//Angle = 2*$pi/16;
//Angle = 2*$pi/12;
//Angle = 2*$pi/10.666666666;
//Angle = 2*$pi/10;
Angle=(power-1)*2*$pi/8;
rotCosAngle = cos(Angle);
rotSinAngle = sin(Angle);

//l.rms_init(weight_ms);
//r.rms_init(weight_ms);
l.rc_sett(weight_ms/1000);
r.rc_sett(weight_ms/1000);

blur = 1-slider48;
line_alpha=slider5;

w = slider1;
h = slider2;
x = slider3;
y = slider4;

b = slider5;
a = slider6;
h = slider7;
s = slider8;
v = slider9;

n = slider10+1;
average = slider11;
std = slider12;
hight = slider13;
dBscale = slider16;
bitDepth = slider17;
attenuate = (1-slider33);
gaussian = slider34;
difference = slider35;
squared_mode = slider36;
vectorscope = slider37;

horiz = slider30;
scaley = 1-slider31;
scalex = 1-slider32;
//scaley = slider31;
//scalex = slider32;


@block


@sample


//spl0*=1/1.5;
//spl1*=1/1.5;
/*
max0 = max(max0,spl0);
max1 = max(max1,spl1);
min0 = min(min0,spl0);
min1 = min(min1,spl1);
spl0 ? minabs0 = min(minabs0,abs(spl0));
spl1 ? minabs1 = min(minabs1,abs(spl1));
/*/

/*
squared_mode ? (
  ch0 = rotCosAngle*spl0-rotSinAngle*spl1;
  ch1 = rotSinAngle*spl0+rotCosAngle*spl1;
  spl0 = ch0;
  spl1 = ch1;
  
  x = (spl1 - spl0);
  y = (spl0 + spl1);
  xx = x*x;
  yy = y*y;
  xy = x*y;
  xy_inv_mag = 1/sqrt(2*(xx + yy));
  spl0 = (yy - xx)*xy_inv_mag;
  spl1 = 2*xy*xy_inv_mag;
  
  //spl0 = atan2(spl1,spl0)/pi;
);
//*/

//*
squared_mode ? (
  
  A.cplx_set(spl1,spl0);
  powA.cplx_pow_real(A, power);
  
  ch0 = rotCosAngle*powA.im-rotSinAngle*powA.re;
  ch1 = rotSinAngle*powA.im+rotCosAngle*powA.re;
  spl0 = ch0;
  spl1 = ch1;
);
//*/

//spl2 = l.rms(spl0);
//spl3 = r.rms(spl1);

//spl2 = l.rc_lp(spl0);
//spl3 = r.rc_lp(spl1);


//*
input_buffer0[buffer_index*2  ] = spl0;
input_buffer0[buffer_index*2+1] = spl1;
//input_buffer1[buffer_index*2  ] = spl2;
//input_buffer1[buffer_index*2+1] = spl3;
//*/

/*
input_buffer0[buffer_index*2  ] = spl0;
input_buffer0[buffer_index*2+1] = spl2;
input_buffer1[buffer_index*2  ] = spl1;
input_buffer1[buffer_index*2+1] = spl3;
//*/


//buffer_index += 1;
buffer_index = (buffer_index + 1)%buffer_length;


@gfx
//back = 0.317; back_a = 1;
//b = 0.0;
//gfx_set(b,b,b,1);
//gfx_rect(0,0,gfx_w,gfx_h);

(mouse_cap) ? (
  gfx_r=gfx_g=gfx_b=0; gfx_a=1;
  gfx_x=gfx_y=0;
  gfx_rectto(gfx_w,gfx_h);
);

gfx_r=gfx_g=gfx_b=0; gfx_a=blur; //Blur
gfx_x=gfx_y=0;
gfx_rectto(gfx_w,gfx_h);



  /// dB lines ///
  gfx_set(0.5,1,0.5,0.6*blur);
  gfxw2 = gfx_w/2;
  gfxh2 = gfx_h/2;
  centre = min(gfxw2,gfxh2);
  
grid ? (  
  //*
  gfx_x = gfxw2; gfx_y = gfxh2;
  gfx_setpixel(0.5,1,0.5);
  
  //gfx_set(1,1,1,0.3*blur);
  gfx_set(1,1,1,0.1*blur);
  i = 0;
  //loop(12,
  loop(16,
    shift = centre/((2^i)^scalex);
    gfx_circle(gfxw2,gfxh2,shift);
    i+=1;
  );
  
  //gfx_set(1,1,1,0.6*blur);
  i = 8;
  loop(4,
    shift = centre/((2^i)^scalex);
    gfx_circle(gfxw2,gfxh2,shift);
    i+=8;
  );
  
  
  //gfx_set(1,1,1,0.8*blur);
  i = 64;
  loop(1,
    shift = centre/((2^i)^scalex);
    gfx_circle(gfxw2,gfxh2,shift);
    i+=8;
  );
  
  
  centre > 125 ? (
    //gfx_set(0.5,0.5,1,0.2);
    //gfx_set(1,1,1,0.1*blur);
    //centre = gfx_w/2;
    i = 0;
    //loop(64,
    loop(13,
      shift = centre/((10^i)^scalex);
      gfx_circle(gfxw2,gfxh2,shift);
      i+=0.05;
    );
  );
  
  centre > 256 ? (
    //gfx_set(0.5,0.5,1,0.1);
    //gfx_set(1,1,1,0.1);
    //centre = gfx_w/2;
    i = 0;
    //loop(64,
    loop(21,
      shift = centre/((10^i)^scalex);
      //gfx_circle(gfxw2,gfxh2,shift);
      i+=0.005;
    );
  );
  
  //* /// one sample level ///
  //gfx_set(1-b,1-b,1-b,1);
  i = 1;
  loop(horiz,
    oneheight = gfx_h*(i/maxspl)^scaley;
    //gfx_line(0,oneheight,gfx_w,oneheight);
    //gfx_circle(gfxw2,gfxh2,oneheight);
    i+=1;
  );
  
  
  //gfx_set(1,1,1,0.2);
  div = 8;
  i = 0;
  loop(div,
    moveto(gfxw2,gfxh2);
    linetopolar(centre-1,i*pi2/div,0);
    i+=1;
  );
);

  scalex == 1 ? (
  gfx_a*=2;
  old_x2 = gfxw2+centre;
  old_y2 = gfxh2;
  i = 1;
  loop(4,
    //debug = point_angle = atan2(0,-1);
    point_angle = pi/2*i;
    point_radius = 1;
    gfx_x = gfxw2+cos(point_angle)*centre;
    gfx_y = gfxh2-sin(point_angle)*centre;

    gfx_line(gfx_x,gfx_y,old_x2,old_y2);
    old_x2 = gfx_x;
    old_y2 = gfx_y;
    i+=1;
    );
  );
//*/



//* /// Distribute values ///
buffer_index_buffer = buffer_index;
buffer_index_max = max(buffer_index_max,buffer_index);
buffer_index = 0;
memcpy(input_buffer0_cpy, input_buffer0, buffer_length*2);
//memcpy(input_buffer1_cpy, input_buffer1, buffer_length*2);


/*      /// Vectorscope ///
  gfx_set(1,1,1);
  i = 0;
  loop(buffer_index_buffer,
    point_angle = atan2(input_buffer0_cpy[i*2],input_buffer0_cpy[i*2+1])-7*pi/4;
    point_radius = sqrt(sqr(input_buffer0_cpy[i*2])+sqr(input_buffer0_cpy[i*2+1]))/sqrt2;
    gfx_x = gfxw2+cos(point_angle)*centre*(point_radius)^(scalex);
    gfx_y = gfxh2-sin(point_angle)*centre*(point_radius)^(scalex);
    gfx_a = a;
    gfx_setpixel(1,1,1);
    
    gfx_a *= line_alpha;
    gfx_line(gfx_x,gfx_y,old0_x,old0_y);
    old0_x = gfx_x;
    old0_y = gfx_y;
    
    
    point_angle = atan2(input_buffer1_cpy[i*2],input_buffer1_cpy[i*2+1])-7*pi/4;
    point_radius = sqrt(sqr(input_buffer1_cpy[i*2])+sqr(input_buffer1_cpy[i*2+1]))/sqrt2;
    gfx_x = gfxw2+cos(point_angle)*centre*(point_radius)^(scalex);
    gfx_y = gfxh2-sin(point_angle)*centre*(point_radius)^(scalex);
    gfx_a = a;
    gfx_setpixel(1,1,1);
    
    gfx_a *= line_alpha;
    gfx_line(gfx_x,gfx_y,old1_x,old1_y);
    old1_x = gfx_x;
    old1_y = gfx_y;
    
    i+=1;
  );
//*/


/*      /// Vectorscope ///
  gfx_set(1,1,1);
  i = 0;
  loop(buffer_index_buffer,
    point_angle = atan2(input_buffer0_cpy[i*2],input_buffer0_cpy[i*2+1])-7*pi/4;
    point_radius = sqrt(sqr(input_buffer0_cpy[i*2])+sqr(input_buffer0_cpy[i*2+1]))/sqrt2;
    gfx_x = gfxw2+cos(point_angle)*centre*(point_radius)^(scalex);
    gfx_y = gfxh2-sin(point_angle)*centre*(point_radius)^(scalex);
    gfx_a = a;
    //gfx_setpixel(1,1,1);
    gfx_setpixel(0,0,1);
    
    //gfx_a *= line_alpha;
    //gfx_line(gfx_x,gfx_y,old0_x,old0_y);
    old_x = gfx_x;
    old_y = gfx_y;
    
    
    point_angle = atan2(input_buffer1_cpy[i*2],input_buffer1_cpy[i*2+1])-7*pi/4;
    point_radius = sqrt(sqr(input_buffer1_cpy[i*2])+sqr(input_buffer1_cpy[i*2+1]))/sqrt2;
    gfx_x = gfxw2+cos(point_angle)*centre*(point_radius)^(scalex);
    gfx_y = gfxh2-sin(point_angle)*centre*(point_radius)^(scalex);
    gfx_a = a;
    //gfx_setpixel(1,1,1);
    gfx_setpixel(1,0,0);
    
    gfx_a *= line_alpha;
    gfx_line(gfx_x,gfx_y,old_x,old_y);
    
    i+=1;
  );
//*/


/*      /// Vectorscope ///
  //gfx_set(0,1,0);
  gfx_set(0,0,1);
  i = 0;
  loop(buffer_index_buffer,
    point_angle = atan2(input_buffer0_cpy[i*2],input_buffer0_cpy[i*2+1])-7*pi/4;
    point_radius = sqrt(sqr(input_buffer0_cpy[i*2])+sqr(input_buffer0_cpy[i*2+1]))/sqrt2;
    gfx_x = gfxw2+cos(point_angle)*centre*(point_radius)^(scalex);
    gfx_y = gfxh2-sin(point_angle)*centre*(point_radius)^(scalex);
    gfx_a = a;
    gfx_setpixel(1,1,1);
    
    gfx_a *= line_alpha;
    gfx_line(gfx_x,gfx_y,old0_x,old0_y);
    old0_x = gfx_x;
    old0_y = gfx_y;
    
    i+=1;
  );

  gfx_set(1,0,0);
  i = 0;
  loop(buffer_index_buffer,
    point_angle = atan2(input_buffer1_cpy[i*2],input_buffer1_cpy[i*2+1])-7*pi/4;
    point_radius = sqrt(sqr(input_buffer1_cpy[i*2])+sqr(input_buffer1_cpy[i*2+1]))/sqrt2;
    gfx_x = gfxw2+cos(point_angle)*centre*(point_radius)^(scalex);
    gfx_y = gfxh2-sin(point_angle)*centre*(point_radius)^(scalex);
    gfx_a = a;
    gfx_setpixel(1,1,1);
    
    gfx_a *= line_alpha;
    gfx_line(gfx_x,gfx_y,old1_x,old1_y);
    old1_x = gfx_x;
    old1_y = gfx_y;
    
    i+=1;
  );
//*/

//*      /// Vectorscope ///
  gfx_set(1,1,1);
  i = 0;
  loop(buffer_index_buffer,
    s0 = input_buffer_cpy[i*2];
    s1 = input_buffer_cpy[i*2+1];
    
    point_angle = atan2(s0,s1)-7*pi/4;
    point_radius = sqrt(sqr(s0)+sqr(s1))/sqrt2;gfx_x = gfxw2+cos(point_angle)*centre*(point_radius)^(scalex);
    gfx_x = gfxw2+cos(point_angle)*centre*(point_radius)^(scalex);
    gfx_y = gfxh2-sin(point_angle)*centre*(point_radius)^(scalex);
    //gfx_a = a;
    //gfx_set(1,1,1,a);
    gfx_set(0.3,1,0.3,a);
    //gfx_setpixel(1,1,1);
    gfx_setpixel(0.3,1,0.3);
    //gfx_circle(gfx_x,gfx_y,centre/500,1);
    
    gfx_a *= line_alpha;
    gfx_line(gfx_x,gfx_y,old0_x,old0_y);
    old0_x = gfx_x;
    old0_y = gfx_y;
    
    
    /*
    // Peak
    CP.c_peak(point_radius,point_angle);
    gfx_x = gfxw2+cos(CP.pha)*centre*(CP.amp)^(scalex);
    gfx_y = gfxh2-sin(CP.pha)*centre*(CP.amp)^(scalex);
    //gfx_a = a;
    //gfx_a = 1;
    gfx_set(1,0.5,0.5,1);
    gfx_circle(gfx_x,gfx_y,centre/40,0,1);
    gfx_setpixel(1,1,1);
    //*/
    
    //MCS
    l.rc_lp(s0);
    r.rc_lp(s1);
    //point_angle = atan2(input_buffer1_cpy[i*2],input_buffer1_cpy[i*2+1])-7*pi/4;
    //point_radius = sqrt(sqr(input_buffer1_cpy[i*2])+sqr(input_buffer1_cpy[i*2+1]))/sqrt2;
    point_angle = atan2(l.lp,r.lp)-7*pi/4;
    point_radius = sqrt(sqr(l.lp)+sqr(r.lp))/sqrt2;
    gfx_x = gfxw2+cos(point_angle)*centre*(point_radius)^(scalex);
    gfx_y = gfxh2-sin(point_angle)*centre*(point_radius)^(scalex);
    gfx_a = a;
    //gfx_setpixel(1,1,1);
    //gfx_set(1,0.5,0.5,1);
    gfx_set(1,1,1,1);
    gfx_circle(gfx_x,gfx_y,centre/40,0,1);
    
    gfx_a *= line_alpha;
    gfx_line(gfx_x,gfx_y,old1_x,old1_y);
    old1_x = gfx_x;
    old1_y = gfx_y;
    
    i+=1;
  );
//*/


  //gfx_clear = 0;
  //gfx_set(1,1,1,1);
  w2 = gfx_w * 0.5;
  //h2 = gfx_h * 0.5;
  h2 = gfx_h;
  



//gfx_set(1-b,1-b,1-b,1);
gfx_set(1,1,1,1);
spacing = 10;
//*
//gfx_h > 300 ? (
gfx_x = 10; gfx_y = 5;
//gfx_printf(" Peak: %d", maxspl);      gfx_x=10;gfx_y+=spacing;
//gfx_printf(" Spls: %d", count);       gfx_x=10;gfx_y+=spacing;

//gfx_printf("L Avg: %f", avg0);        gfx_x=10;gfx_y+=spacing;
//gfx_printf("R Avg: %f", avg1);        gfx_x=10;gfx_y+=spacing;
//gfx_printf("L Std: %f", std0);        gfx_x=10;gfx_y+=spacing;
//gfx_printf("R Std: %f", std1);        gfx_x=10;gfx_y+=spacing;
//gfx_printf(" Time: %d", count/srate); gfx_x=10;gfx_y+=spacing;
/*
gfx_printf("L Max: %4.2f", atodb(abs(max0))); gfx_x=10;gfx_y+=spacing;
gfx_printf("R Max: %4.2f", atodb(abs(max1))); gfx_x=10;gfx_y+=spacing;
gfx_printf("L Min: %4.2f", atodb(abs(min0))); gfx_x=10;gfx_y+=spacing;
gfx_printf("R Min: %4.2f", atodb(abs(min1))); gfx_x=10;gfx_y+=spacing;
//gfx_printf("L Min: %4.1f", atodb(minabs0)/6); gfx_x=10;gfx_y+=spacing;
//gfx_printf("R Min: %4.1f", atodb(minabs1)/6); gfx_x=10;gfx_y+=spacing;
//);
//*/



// cursor cross + readout
mouse_x>0 && mouse_x<gfx_w && mouse_y>0 && mouse_y<gfx_h? (
  //gfx_set(1,1,1,0.3);gfx_line(0,mouse_y,gfx_w,mouse_y,1);gfx_line(mouse_x,0,mouse_x,gfx_h,1);
  //gfx_set(1,1,1,1);
  x_dist = (mouse_x-gfxw2)/centre;
  y_dist = (mouse_y-gfxh2)/centre;
  center_dist = sqrt(x_dist^2 + y_dist^2)^(1/scalex);
  center_angle = ((atan2(x_dist,y_dist))/pi);
  gfx_x=gfx_w-160;gfx_y = 5;
  gfx_printf("     Bit: %d", (-20.0*log10(center_dist))/6);
  gfx_x=gfx_w-160;gfx_y+=spacing;
  //gfx_printf("dB value: %4.1f", 20.0*log10(abs((2*mouse_x/gfx_w)-1)^(1/scalex)));
  gfx_printf("dB value: %4.1f", 20.0*log10(center_dist));
  gfx_x=gfx_w-160;gfx_y+=spacing;
  //gfx_printf(" value: %f", (2*mouse_x/gfx_w)-1);
  //gfx_printf("   value: %f", sign((2*mouse_x/gfx_w)-1)*(abs((2*mouse_x/gfx_w)-1))^(1/scalex));
  gfx_printf("   value: %f", center_dist^(1/scalex));
  gfx_x=gfx_w-160;gfx_y+=spacing;
  gfx_printf("   angle: %3.0f", 180*sign(center_angle)*(1-abs(center_angle)) );
  
  gfx_set(1,1,1,0.3);
  gfx_circle(gfxw2,gfxh2,sqrt(((mouse_x-gfxw2))^2+((mouse_y-gfxh2))^2),0,1);
  gfx_line(gfxw2,gfxh2,mouse_x,mouse_y,1);
  
  
);
//  shift = centre/((2^i)^scalex);
//  gfx_line(centre+shift,0,centre+shift,gfx_h);
//  gfx_line(centre-shift,0,centre-shift,gfx_h);
gfx_set(1,1,1,1);
gfx_x=gfx_w-160;gfx_y=0;
  gfx_x=5;gfx_y+=spacing;
  center_dist = sqrt((l.lp)^2+(r.lp)^2);
  center_angle = -((atan2(l.lp,r.lp)/pi)-0.25)/2;
  gfx_printf("Angle: %3.1f", (180*sign(center_angle)*(abs(center_angle))) );
  
/*     /// Peak value lines /// 
gaussian?(
gfx_set(0,0,1,1);
gfx_line(centre+min0*gfx_w/2,0,centre+min0*gfx_w/2,gfx_h);
gfx_line(centre+max0*gfx_w/2,0,centre+max0*gfx_w/2,gfx_h);
gfx_set(1,0,0,1);
gfx_line(centre+min1*gfx_w/2,0,centre+min1*gfx_w/2,gfx_h);
gfx_line(centre+max1*gfx_w/2,0,centre+max1*gfx_w/2,gfx_h);
);
//*/

/*
  gfx_x = gfx_y = 0;
  gfx_blurto(gfx_w,gfx_h);
//*/




gfx_setcursor(32515, "IDC_CROSS");

/*
gfx_set(1,1,1,0.5);
gfx_texth = 16;
UI_SLIDER_MASK = 32767;
xu=gfx_texth*3/4;
yu=gfx_texth*7/8;
ylo=gfx_h-yu;

has_click = (mouse_cap&1) && !(last_cap&1) ? 1 : 0;
last_cap=mouse_cap;

tx=gfx_w-gfx_texth;
gfx_rect(gfx_x=tx-gfx_texth/2,gfx_y=ylo-gfx_texth/2,gfx_texth+1,gfx_texth+1,0);
gfx_drawstr("?",1|4,gfx_x+gfx_texth+1,gfx_y+gfx_texth+1);
has_click && abs(mouse_x-tx) < gfx_texth/2 && abs(mouse_y-ylo) < gfx_texth/2 ? (
  sliders_showing = slider_show(UI_SLIDER_MASK,-1) > 0;
  has_click=0;
);
//*/
