desc:Vowel Filter v2 [JM]
options: gfx_hz = 50;

%slider1:0<-150,12,1>Gain [dB]
slider1:0<-24,24,0.001>Gain
slider2:0<0,1,0.001>F1
slider3:0<0,1,0.001>F2

slider4:q=4<2,16,0.001>Q

slider32:5<0,10,0.01>Smooth Coeff (0 = Off)


import Tale/rbj_filter.jsfx-inc

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
lg20  = log10(20);
lg20k = log10(20000);
//*
f1a = log10(200);
f1ba = log10(1200) - f1a;
f2a = log10(500);
f2ba = log10(2800) - f2a;
//*/

/*
f1a = log10(200);
f1ba = log10(900) - f1a;
f2a = log10(400);
f2ba = log10(2500) - f2a;
//*/

function smooth_parameter(target)
instance(s, coeff)
global()
local(y, v)
(
  v = coeff*(target - s);
  y = v + s;
  s = y + v;
  y
);

function initialize_smoother(cutoff)
instance(coeff)
global(srate)
local(g)
( 
  g = tan($pi*cutoff/srate);
  coeff = g/(1+g);  
);

function interpolator_init(slider_idx)
instance(next_val, idx, s)
local()
global()
(
  s = slider(slider_idx);
  next_val = slider(slider_idx);
  idx = slider_idx;
);

function interpolator_block()
instance(delta, next_changepoint_t, next_val, idx)
local(next_changepoint_y)
global(samplesblock)
(
  next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
  next_changepoint_t > 0 ? 
  (
    next_val = slider(idx);
  ) : (
    next_changepoint_y = slider(idx);
    next_changepoint_t = samplesblock;
  );
    
  delta = (next_changepoint_y - next_val) / next_changepoint_t;
);
  
function interpolate()
instance(delta, next_changepoint_t, next_val, idx, coeff)
local(current_value, next_changepoint_y)
global(current_sample)
(
  current_value = next_val;
  current_sample == next_changepoint_t ? 
  (
    delta = 0;
    next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
    delta = next_changepoint_t > current_sample ? (next_changepoint_y - current_value) / (next_changepoint_t-current_sample) : 0;
  );
    
  next_val = current_value + delta;
    
  coeff > 0 ? this.smooth_parameter(current_value) : current_value
);

p1_interpolator.interpolator_init(1); // init interpolation
p2_interpolator.interpolator_init(2); // init interpolation
p3_interpolator.interpolator_init(3); // init interpolation
//p4_interpolator.interpolator_init(4); // init interpolation
//p5_interpolator.interpolator_init(5); // init interpolation
//p6_interpolator.interpolator_init(6); // init interpolation
//p7_interpolator.interpolator_init(7); // init interpolation
//p8_interpolator.interpolator_init(8); // init interpolation
//p9_interpolator.interpolator_init(9); // init interpolation


@slider
p1_interpolator.initialize_smoother(slider32);  // interpolation coeff
p2_interpolator.initialize_smoother(slider32);  // interpolation coeff
p3_interpolator.initialize_smoother(slider32);  // interpolation coeff

@block
p1_interpolator.interpolator_block();
p2_interpolator.interpolator_block();
p3_interpolator.interpolator_block();
//p4_interpolator.interpolator_block();
//p5_interpolator.interpolator_block();
//p6_interpolator.interpolator_block();
//p7_interpolator.interpolator_block();
//p8_interpolator.interpolator_block();
//p9_interpolator.interpolator_block();

//f1 = max(20,(p2+1) * 1000);
//f2 = max(20,(p3+1) * 1000);
//f1 = max(20,10^((p2+1)/2));
//f2 = max(20,10^((p3+1)/2));


@sample
//gain = 10^(p1_interpolator.interpolate()/20);
p1 = p1_interpolator.interpolate();
gain=10^(p1/20);
p2 = p2_interpolator.interpolate();
p3 = p3_interpolator.interpolate();


//f1 = 150*10^((p2+1)/2);
//f2 = 300*10^((p3+1)/2);
//x1 = (f1ba)*(p2+1)/2 + f1a;
//x2 = (f2ba)*(p3+1)/2 + f2a;
x1 = f1ba * p2 + f1a;
x2 = f2ba * p3 + f2a;
f1 = 10^(x1);
f2 = 10^(x2);
//f1 = ((p2-20)/(20000-20))^0.199;
//f2 = ((p3-20)/(20000-20))^0.199;
f10.rbj_eq(f1, q, gain);
f11.rbj_eq(f1, q, gain);
f20.rbj_eq(f2, q, gain);
f21.rbj_eq(f2, q, gain);


//    * rbj_df1(sample)  -- Direct Form 1
//    * rbj_df2(sample)  -- Direct Form 2
//    * rbj_tdf2(sample) -- Transposed Direct Form 2

//spl0 = gain*f10.rbj_df1(spl0);
//spl1 = gain*f11.rbj_df1(spl1);

//spl0 = f20.rbj_df1(f10.rbj_df1(spl0));
//spl1 = f21.rbj_df1(f11.rbj_df1(spl1));

spl0 = f20.rbj_df2(f10.rbj_df2(spl0));
spl1 = f21.rbj_df2(f11.rbj_df2(spl1));

//spl0 = f20.rbj_td2(f10.rbj_td2(spl0));
//spl1 = f21.rbj_td2(f11.rbj_td2(spl1));


@gfx 200 200
mouse_cap ? (
//gfx_set(1,1,1,0.5);
gfx_set(1,1,1,1);
//library.xcross(mouse_x,mouse_y,4,4);
//library.tcross(mouse_x,mouse_y,8,8);
//library.rosette(mouse_x,mouse_y,7,300,0);
//library.polygon(mouse_x,mouse_y,7,100,0);
//library.point(mouse_x,mouse_y,1,1,1);
//library.tcrosspoints(mouse_x,mouse_y,32,32,1,1,1);
//library.xcrosspoints(mouse_x,mouse_y,32,32,1,1,1);
//gfx_circle(mouse_x,mouse_y,8,0,1);
//jm.polygonpoints(mouse_x,mouse_y,7,100,0,1,1,1);
//library.moveto(mouse_x,mouse_y);
//library.drawCentsSymbol();
mousex=mouse_x;
mousey=mouse_y;
//slider2 =  2*(mouse_x-gfx_w/2)/gfx_w;
//slider3 = 2*-(mouse_y-gfx_h/2)/gfx_h;
//slider2 =  (mouse_x)/gfx_w;
//slider3 = (gfx_h-mouse_y)/gfx_h;
slider3 =  (gfx_w-mouse_x)/gfx_w;
slider2 = (mouse_y)/gfx_h;
);

//*
gfx_x = mousex; gfx_y = mousey;
//gfx_setpixel(1,1,1);
gfx_x += 0; gfx_y -= 16;
//gfx_drawnumber(a,2);
//gfx_drawstr(
//gfx_printf("%g + %g i", slider2, slider3);

//gfx_x = p2*gfx_w/2+gfx_w/2; gfx_y = -p3*gfx_h/2+gfx_h/2;
gfx_x = gfx_w-p3*gfx_w; gfx_y = p2*gfx_h;
//gfx_setpixel(1,1,1);

//gfx_set(1,0.2,0.2,0.7);
gfx_mode = 0;
color = p1/24;
gfx_set(color,0,-color,sqrt(abs(color)));
//gfx_set(1,0.2,0.2,color);
//gfx_set(1,0.2,0.2,0.7);
//gfx_set(0,0.2,0.2,0.7);
//gfx_set(1,1,1,0.7);
//gfx_circle(gfx_x,gfx_y,8,0,1);
//gfx_circle(gfx_x,gfx_y,9,0,1);
//gfx_circle(gfx_x,gfx_y,8,1,1);
gfx_circle(gfx_x,gfx_y,(gfx_w+gfx_h)/100/q*4,1,1);
gfx_set(1,1,1,0.2);
gfx_circle(gfx_x,gfx_y,(gfx_w+gfx_h)/100/q*4,1,1);



//gfx_setfont(1, "Courier New", 20);
gfx_setfont(1, "Courier New", (gfx_w+gfx_h)/40);
//gfx_setfont(1, "Times New Roman", gfx_w/20);
//gfx_setfont(1, "Trebuchet MS", gfx_w/20);
//debug1 = gfx_getfont();

/*
gfx_set(1,1,1,0.5);
gfx_x = (log10(240)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(2400)-f2a)/f2ba*gfx_h;  gfx_drawstr("i");
gfx_x = (log10(235)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(2100)-f2a)/f2ba*gfx_h;  gfx_drawstr("y");
gfx_x = (log10(390)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(2300)-f2a)/f2ba*gfx_h;  gfx_drawstr("e");
gfx_x = (log10(370)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(1900)-f2a)/f2ba*gfx_h;  gfx_drawstr("ø");
gfx_x = (log10(610)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(1900)-f2a)/f2ba*gfx_h;  gfx_drawstr("ɛ");
gfx_x = (log10(585)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(1710)-f2a)/f2ba*gfx_h;  gfx_drawstr("œ");
gfx_x = (log10(850)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(1610)-f2a)/f2ba*gfx_h;  gfx_drawstr("a");
gfx_x = (log10(820)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(1530)-f2a)/f2ba*gfx_h;  gfx_drawstr("ɶ");
gfx_x = (log10(750)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(940 )-f2a)/f2ba*gfx_h;  gfx_drawstr("ɑ");
gfx_x = (log10(700)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(760 )-f2a)/f2ba*gfx_h;  gfx_drawstr("ɒ");
gfx_x = (log10(600)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(1170)-f2a)/f2ba*gfx_h;  gfx_drawstr("ʌ");
gfx_x = (log10(500)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(700 )-f2a)/f2ba*gfx_h;  gfx_drawstr("c");
gfx_x = (log10(460)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(1310)-f2a)/f2ba*gfx_h;  gfx_drawstr("ɤ");
gfx_x = (log10(360)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(640 )-f2a)/f2ba*gfx_h;  gfx_drawstr("o");
gfx_x = (log10(300)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(1390)-f2a)/f2ba*gfx_h;  gfx_drawstr("ɯ");
gfx_x = (log10(250)-f1a)/f1ba*gfx_w; gfx_y = gfx_h-(log10(595 )-f2a)/f2ba*gfx_h;  gfx_drawstr("u");
//*/

/*
gfx_set(1,1,1,0.5);
gfx_y = gfx_h-(log10(240)-f1a)/f1ba*gfx_h; gfx_x = (log10(2400)-f2a)/f2ba*gfx_w;  gfx_drawstr("i");
gfx_y = gfx_h-(log10(235)-f1a)/f1ba*gfx_h; gfx_x = (log10(2100)-f2a)/f2ba*gfx_w;  gfx_drawstr("y");
gfx_y = gfx_h-(log10(390)-f1a)/f1ba*gfx_h; gfx_x = (log10(2300)-f2a)/f2ba*gfx_w;  gfx_drawstr("e");
gfx_y = gfx_h-(log10(370)-f1a)/f1ba*gfx_h; gfx_x = (log10(1900)-f2a)/f2ba*gfx_w;  gfx_drawstr("ø");
gfx_y = gfx_h-(log10(610)-f1a)/f1ba*gfx_h; gfx_x = (log10(1900)-f2a)/f2ba*gfx_w;  gfx_drawstr("ɛ");
gfx_y = gfx_h-(log10(585)-f1a)/f1ba*gfx_h; gfx_x = (log10(1710)-f2a)/f2ba*gfx_w;  gfx_drawstr("œ");
gfx_y = gfx_h-(log10(850)-f1a)/f1ba*gfx_h; gfx_x = (log10(1610)-f2a)/f2ba*gfx_w;  gfx_drawstr("a");
gfx_y = gfx_h-(log10(820)-f1a)/f1ba*gfx_h; gfx_x = (log10(1530)-f2a)/f2ba*gfx_w;  gfx_drawstr("ɶ");
gfx_y = gfx_h-(log10(750)-f1a)/f1ba*gfx_h; gfx_x = (log10(940 )-f2a)/f2ba*gfx_w;  gfx_drawstr("ɑ");
gfx_y = gfx_h-(log10(700)-f1a)/f1ba*gfx_h; gfx_x = (log10(760 )-f2a)/f2ba*gfx_w;  gfx_drawstr("ɒ");
gfx_y = gfx_h-(log10(600)-f1a)/f1ba*gfx_h; gfx_x = (log10(1170)-f2a)/f2ba*gfx_w;  gfx_drawstr("ʌ");
gfx_y = gfx_h-(log10(500)-f1a)/f1ba*gfx_h; gfx_x = (log10(700 )-f2a)/f2ba*gfx_w;  gfx_drawstr("c");
gfx_y = gfx_h-(log10(460)-f1a)/f1ba*gfx_h; gfx_x = (log10(1310)-f2a)/f2ba*gfx_w;  gfx_drawstr("ɤ");
gfx_y = gfx_h-(log10(360)-f1a)/f1ba*gfx_h; gfx_x = (log10(640 )-f2a)/f2ba*gfx_w;  gfx_drawstr("o");
gfx_y = gfx_h-(log10(300)-f1a)/f1ba*gfx_h; gfx_x = (log10(1390)-f2a)/f2ba*gfx_w;  gfx_drawstr("ɯ");
gfx_y = gfx_h-(log10(250)-f1a)/f1ba*gfx_h; gfx_x = (log10(595 )-f2a)/f2ba*gfx_w;  gfx_drawstr("u");
//*/

//*
gfx_set(1,1,1,0.5);
gfx_y = (log10(240)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(2400)-f2a)/f2ba*gfx_w;  gfx_drawstr("i");
gfx_y = (log10(235)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(2100)-f2a)/f2ba*gfx_w;  gfx_drawstr("y");
gfx_y = (log10(390)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(2300)-f2a)/f2ba*gfx_w;  gfx_drawstr("e");
gfx_y = (log10(370)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(1900)-f2a)/f2ba*gfx_w;  gfx_drawstr("ø");
gfx_y = (log10(610)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(1900)-f2a)/f2ba*gfx_w;  gfx_drawstr("ɛ");
gfx_y = (log10(585)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(1710)-f2a)/f2ba*gfx_w;  gfx_drawstr("œ");
gfx_y = (log10(850)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(1610)-f2a)/f2ba*gfx_w;  gfx_drawstr("a");
gfx_y = (log10(820)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(1530)-f2a)/f2ba*gfx_w;  gfx_drawstr("ɶ");
gfx_y = (log10(750)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(940 )-f2a)/f2ba*gfx_w;  gfx_drawstr("ɑ");
gfx_y = (log10(700)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(760 )-f2a)/f2ba*gfx_w;  gfx_drawstr("ɒ");
gfx_y = (log10(600)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(1170)-f2a)/f2ba*gfx_w;  gfx_drawstr("ʌ");
gfx_y = (log10(500)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(700 )-f2a)/f2ba*gfx_w;  gfx_drawstr("ɔ");
gfx_y = (log10(460)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(1310)-f2a)/f2ba*gfx_w;  gfx_drawstr("ɤ");
gfx_y = (log10(360)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(640 )-f2a)/f2ba*gfx_w;  gfx_drawstr("o");
gfx_y = (log10(300)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(1390)-f2a)/f2ba*gfx_w;  gfx_drawstr("ɯ");
gfx_y = (log10(250)-f1a)/f1ba*gfx_h; gfx_x = gfx_w-(log10(595 )-f2a)/f2ba*gfx_w;  gfx_drawstr("u");
//*/

//gfx_set(235/256, 235/256, 235/256, 1);
//gfx_rect(0, 0, gfx_w, gfx_h);
//gfx_set(125/256, 207/256, 1, 1);
gfx_setfont(-1);
gfx_set(1, 1, 1, 1);
gfx_x = 5;
gfx_y = gfx_h-30;
//gfx_printf("Incurred lag: %f spls / %d spls", mdc, sdc);
//gfx_printf("MDC: %f; SDC: %f", mdc, sdc);
gfx_printf("AMP: %2.3f", gain);
gfx_x = 5;
gfx_y += 10;
//gfx_printf("Incurred lag: %f spls / %d spls", mdc, sdc);
//gfx_printf("MDC: %f; SDC: %f", mdc, sdc);
gfx_printf(" F1: %4.0f Hz", f1);
gfx_x = 5;
gfx_y += 10;
gfx_printf(" F2: %4.0f Hz", f2);
