desc:STFT-Based dual-channel Template v2 [JM]
author: Jozef Mackowiak
version: 0.0.0
changelog: Initial Commit
about:
  # STFT-Based dual-channel Template

License: MIT
Copyright (C) 2023 Jozef Mackowiak

// Based on the STFT template created by Geraint Luff


slider1:fft_size_index=2<0,7,1{256,512,1024,2048,4096,8192,16384,32768>FFT size
//slider64:smoothing_time_const=100<0,10000,1>Smoothing Ï„ [ms]

import Tale/complex.jsfx-inc
//import Tale/window.jsfx-inc

@init

  MAX_FFT_SIZE = 32768;
  
  freemem = 0;
  freemem = (fft_bufferA = freemem) + MAX_FFT_SIZE*2; // allocate fft buffers first - FFT/IFFT must NOT cross a 65,536 item boundary
  freemem = (fft_bufferB = freemem) + MAX_FFT_SIZE*2;
  freemem = (window_buffer = freemem) + MAX_FFT_SIZE;
  
  buffer_length = srate;
  buffer_index = 0;
  freemem = (input_buffer = freemem) + buffer_length*2;
  freemem = (output_buffer = freemem) + buffer_length*2;
  

  function process_stft_segment(fft_bufferA, fft_bufferB, fft_size) local(fft_bin) (
    fft_bin = 0; // FFT bin number
    loop(fft_size,
      //fft_bin2 = fft_bin ? (fft_size - fft_bin) : 0;
      ///^^^/// fft_bin == 0 ? (fft_bin2 = 0):(fft_bin2 = fft_size - fft_bin);
      
      /*
      // Unfold complex spectrum into two real spectra
      A.re = fft_bufferA[2*fft_bin  ];
      A.im = fft_bufferA[2*fft_bin+1];
      B.re = fft_bufferB[2*fft_bin  ];
      B.im = fft_bufferB[2*fft_bin+1];
      //*/
      
      
      A.cplx_set(fft_bufferA[2*fft_bin  ], fft_bufferA[2*fft_bin+1]);
      B.cplx_set(fft_bufferB[2*fft_bin  ], fft_bufferB[2*fft_bin+1]);
      
      /*
      A.conj.cplx_conj(A);
      B.conj.cplx_conj(B);
      
      G_AA.cplx_mul(A.conj, A);
      G_BB.cplx_mul(B.conj, B);
      G_AB.cplx_mul(A.conj, B);
      G_BA.cplx_mul(B.conj, A);
      
      /*
      G_AB_im_avg = G_AB_buffer[2*i  ] = G_AB_buffer[2*i  ] * coherence_decay_factor + G_AB.im;
      G_AB_re_avg = G_AB_buffer[2*i+1] = G_AB_buffer[2*i+1] * coherence_decay_factor + G_AB.re;
      G_AA_re_avg = G_AA_buffer[2*i  ] = G_AA_buffer[2*i  ] * coherence_decay_factor + G_AA.re;
      G_BB_re_avg = G_BB_buffer[2*i  ] = G_BB_buffer[2*i  ] * coherence_decay_factor + G_BB.re;
      G_AB_avg_abs_sqr = sqr(G_AB_re_avg) + sqr(G_AB_im_avg);
      coherence = G_AB_avg_abs_sqr / (G_AA_re_avg * G_BB_re_avg);
      
      
      A.cplx_log(A);
      B.cplx_log(B);
      
      A.cplx_exp(A);
      B.cplx_exp(B);
      
      
      A.arg = A.cplx_arg();
      A.abs = A.cplx_abs();
      B.arg = B.cplx_arg();
      B.abs = B.cplx_abs();
      
      A.cplx_polar(A.abs, A.arg);
      B.cplx_polar(B.abs, B.arg);
      
      
      H.cplx_div(B, A);
      H.abs = H.cplx_abs(); // H.abs = sqrt(sqr(H.re) + sqr(H.im));
      H.arg = H.cplx_arg(); // H.arg = -atan2(H.im, H.re);
      H.cplx_polar(H.abs, H.arg);
      H_1.cplx_div(G_AB, G_AA); H_1.abs = H_1.cplx_abs(); H_1.arg = H_1.cplx_arg(); // FRF estimates
      H_2.cplx_div(G_BB, G_BA); H_2.abs = H_2.cplx_abs(); H_2.arg = H_2.cplx_arg();
      H_a.cplx_div(G_BB, G_AA); H_a.abs = H_a.cplx_abs(); H_a.arg = H_a.cplx_arg();
      //*/
      
      
      //*
      //////////////////////// Main STFT block
      // The interesting bit - as a placeholder, let's implement a lowpass at samplerate/10
      fft_bin > fft_size*0.1 ? (
        A.re = 0;
        A.im = 0;
        B.re = 0;
        B.im = 0;
      );
      ////////////////////////
      //*/
      
      
      /* Acorr
      A.re = G_AA.re;
      A.im = G_AA.im;
      B.re = G_BB.re;
      B.im = G_BB.im;
      //*/
      
      /* Xcorr
      A.re = G_AB.re;
      A.im = G_AB.im;
      B.re = G_AB.re;
      B.im = G_AB.im;
      //*/
      
      /*
      A.re = sqrt(A.re);
      A.im = sqrt(A.im);
      B.re = sqrt(B.re);
      B.im = sqrt(B.im);
      //*/
      
      /*
      A.re *= 0.001;
      A.im *= 0.001;
      B.re *= 0.001;
      B.im *= 0.001;
      //*/
      
      /*
      mag2 = (B.re*B.re + B.im*B.im);
      mag = sqrt(mag2);
      factor = 1/mag/fft_size;
      //fft_buffer[2*i  ] = ( A.re*B.re + A.im*B.im)*factor;
      //fft_buffer[2*i+1] = (-A.re*B.im + A.im*B.re)*factor;
      re = ( A.re*B.re + A.im*B.im)*factor;
      im = (-A.re*B.im + A.im*B.re)*factor;
      //*/
      
      /* /// Impulse response / Transfer Function ///
      //fft_buffer[2*fft_bin  ] = ( A.re*B.re + A.im*B.im)/(B.re*B.re + B.im*B.im);
      //fft_buffer[2*fft_bin+1] = (-A.re*B.im + A.im*B.re)/(B.re*B.re + B.im*B.im);
      re = ( A.re*B.re + A.im*B.im)/(B.re*B.re + B.im*B.im);
      im = (-A.re*B.im + A.im*B.re)/(B.re*B.re + B.im*B.im);
      //*/
      
      /*
      A.re = re;
      A.im = im;
      B.re = re;
      B.im = im;
      //*/
      
      //*
      // Re-fold back into complex spectrum
      fft_bufferA[2*fft_bin  ] = A.re;
      fft_bufferB[2*fft_bin  ] = B.re;
      fft_bufferA[2*fft_bin+1] = A.im;
      fft_bufferB[2*fft_bin+1] = B.im;
      //*/
      
      fft_bin += 1;
    );
  );
  
  
  function setup_stft_state(fft_size, first_time) (
    //////////////////////// Setup block
    // This is called when playback starts, or when the FFT size is changed
    0;
    ////////////////////////
  );
  
  
  function window(r)(
    // When squared, the Hann window adds up perfectly for overlap >= 4, so it's suitable for perfect reconstruction
    (0.5 - 0.5*cos(r*2*$pi))/sqrt(0.375);
  );
  
  
@slider
  //smoothing_coeff = 1-exp(-1/abs(srate*smoothing_time_const*0.001));

@block

  overlap_factor = 4;
  fft_size = 256<<fft_size_index;
  fft_interval = fft_size/overlap_factor;
  fft_scaling_factor = 2/overlap_factor/fft_size;
  
  fft_size != prev_fft_size ? (
    setup_stft_state(fft_size, prev_fft_size == 0);
    prev_fft_size = fft_size;
    // Fill window buffer
    i = 0;
    loop(fft_size,
      r = (i + 0.5)/fft_size;
      window_buffer[i] = window(r);
      i += 1;
    );
  );
  
  pdc_delay = fft_size;
  pdc_bot_ch = 0;
  pdc_top_ch = 2;

@sample

  input_buffer[buffer_index*2  ] = spl0;
  input_buffer[buffer_index*2+1] = spl1;
  
  fft_counter += 1;
  fft_counter >= fft_interval ? (
    fft_counter = 0;
    
    //memset(fft_bufferA,0,fft_size);
    //memset(fft_bufferB,0,fft_size);
  
    // Copy input to buffer
    bi = buffer_index - fft_size + 1;
    i = 0;
    loop(fft_size,
      i2 = bi + i;
      i2 < 0 ? i2 += buffer_length;
      
      //*
      fft_bufferA[i*2] = input_buffer[2*i2  ]*window_buffer[i]; // Real Left
      fft_bufferA[i*2 + 1] = 0;                                 // Imaginary Left
      fft_bufferB[i*2] = input_buffer[2*i2+1]*window_buffer[i]; // Real Right
      fft_bufferB[i*2 + 1] = 0;                                 // Imaginary Right
      //*/
  
      i += 1;
    );
  
    // Process buffer
    fft(fft_bufferA, fft_size);
    fft(fft_bufferB, fft_size);
    fft_permute(fft_bufferA, fft_size);
    fft_permute(fft_bufferB, fft_size);
  
    process_stft_segment(fft_bufferA, fft_bufferB, fft_size);
  
    fft_ipermute(fft_bufferA, fft_size);
    fft_ipermute(fft_bufferB, fft_size);
    ifft(fft_bufferA, fft_size);
    ifft(fft_bufferB, fft_size);
  
    // Add to output
    bi = buffer_index - fft_size + 1;
    i = 0;
    loop(fft_size,
      i2 = bi + i;
      (i2 < 0) ? i2 += buffer_length;
  
      output_buffer[2*i2  ] += fft_bufferA[2*i]*fft_scaling_factor*window_buffer[i];
      output_buffer[2*i2+1] += fft_bufferB[2*i]*fft_scaling_factor*window_buffer[i];
  
      i += 1;
    );
  );
  
  output_index = buffer_index - fft_size;
  output_index < 0 ? output_index += buffer_length;
  spl0 = output_buffer[output_index*2  ];
  spl1 = output_buffer[output_index*2+1];
  output_buffer[output_index*2  ] = 0; // clear the sample we just read
  output_buffer[output_index*2+1] = 0;
  
  buffer_index = (buffer_index + 1)%buffer_length;
