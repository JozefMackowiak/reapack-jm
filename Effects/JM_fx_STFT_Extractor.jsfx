desc:STFT Extractor [JM]
author: Jozef Mackowiak
version: 0.0.0
changelog: Initial Commit
about:
  # STFT Extractor
  Utility for attenuating partials with given azimuth and phase difference in stereo field

License: MIT
Copyright (C) 2023 Jozef Mackowiak

// Based on the STFT template created by Geraint Luff


slider1:fft_size_index=5<0,7,1{256,512,1024,2048,4096,8192,16384,32768>FFT size
slider2:pha_ang=0<-2,2,0.001>Phase Angle
slider3:pha_ang_tol=0.25<0,2,0.001>Phase Angle tolerance
slider4:pha_gain=0<-1,1,0.001>-Phase Gain
slider5:mag_ang=0<-2,2,0.001>Magnitude Angle
slider6:mag_ang_tol=0.25<0,2,0.001>Magnitude Angle tolerance
slider7:mag_gain=0<-1,1,0.001>-Magnitude Gain
slider8:overlap_factor=4<4,32,1>-Overlap Factor
slider9:hpfreq=24000<0,24000,1>HPF [Hz]
slider10:lpfreq=0<0,20000,1>LPF [Hz]

slider32:param1=1<0,10,0.001>Param1
slider33:param2=1<0,10,0.001>Param2
slider34:param3=1<0,10,0.001>Param3

@init
pi = $pi;
pidiv2 = $pi/2;
twodivpi = 2/$pi;

function process_stft_segment(fft_buffer, fft_size) local(fft_bin, rA, iA, rB, iB, norm, rH, iH, mag, pha) (
  fft_bin = 0; // FFT bin number
  loop(fft_size/2,
    fft_bin2 = fft_bin ? (fft_size - fft_bin) : 0;
    ///^^^/// fft_bin == 0 ? (fft_bin2 = 0):(fft_bin2 = fft_size - fft_bin);

    // Unfold complex spectrum into two real spectra
    rA =  fft_buffer[2*fft_bin  ] + fft_buffer[2*fft_bin2  ];
    iA =  fft_buffer[2*fft_bin+1] - fft_buffer[2*fft_bin2+1];
    rB =  fft_buffer[2*fft_bin+1] + fft_buffer[2*fft_bin2+1];
    iB = -fft_buffer[2*fft_bin  ] + fft_buffer[2*fft_bin2  ];

    
    // Transfer Function H = B/A (complex division)
    norm = sqr(rA) + sqr(iA);
    rH = (rB * rA + iB * iA) / norm;
    iH = (iB * rA - rB * iA) / norm;
    
    //amp = sqr(rH) + sqr(iH);
    mag = -atan2(1,sqrt(rH^2 + iH^2))*twodivpi + 0.5;
    pha = atan2(iH,rH)*twodivpi;
    
    /*
    // Phase Filter
    pha < pha_ang-pha_ang_tol || pha > pha_ang+pha_ang_tol ? (
      rA = iA = rB = iB = 0;
    );
    //*/
    
    
    //*
    // Magnitude Filter
    mag < mag_ang-mag_ang_tol || mag > mag_ang+mag_ang_tol ? (
      rA = iA = rB = iB = 0;
    );
    //*/



    //*
    // Phase Filter
    pha < pha_ang-pha_ang_tol || pha > pha_ang+pha_ang_tol ? (
      rA = 0;
      iA = 0;
      rB = 0;
      iB = 0;
    );
    //*/
    
    
    //*
    // Magnitude Filter
    mag < mag_ang-mag_ang_tol || mag > mag_ang+mag_ang_tol ? (
      rA = 0;
      iA = 0;
      rB = 0;
      iB = 0;
    );
    //*/
    
    //*
    // HPF LPF
    fft_bin > fft_size*hpfreq/srate || fft_bin < fft_size*lpfreq/srate ? (
      rA = iA = rB = iB = 0;
    );
    //*/
    
    
    
    /*
    // Phase Filter
    //pha < pha_ang-pha_ang_tol || pha > pha_ang+pha_ang_tol ? (
      pha_mul = 1+( pha_gain*( cos((pi*pha/param1)/pha_ang_tol - pha_ang) )-abs(pha_gain) )/2;
      rA *= pha_mul;
      iA *= pha_mul;
      rB *= pha_mul;
      iB *= pha_mul;
    //);
    //*/
    
    /*
    // Phase Filter
    //pha < pha_ang-pha_ang_tol || pha > pha_ang+pha_ang_tol ? (
      pha_mul = (1+( pha_gain*(-cos((pha+pha_ang)) )-abs(pha_gain) )/2)/2;
      rA *= pha_mul;
      iA *= pha_mul;
      rB *= pha_mul;
      iB *= pha_mul;
    //);
    //*/
    
    
    /*
    // Phase Filter
    //pha < pha_ang-pha_ang_tol || pha > pha_ang+pha_ang_tol ? (
      pha_mul = (1+( pha_gain*(-cos((pha+pha_ang)) )-abs(pha_gain) )/2)/2;
      rC = (rA + rB)/2 * pha_mul;
      iC = (iA + iB)/2 * pha_mul;
      rA = rC;
      iA = iC;
      rB = rC;
      iB = iC;
    //);
    //*/
    
    
    
    /*
    // Phase Filter
    //pha < pha_ang-pha_ang_tol || pha > pha_ang+pha_ang_tol ? (
      pha = -atan2(iH,rH);
      //pha_mul = 1+( pha_gain*( cos((pi*pha/param1)/pha_ang_tol - pha_ang) )-abs(pha_gain) );
      pha_mul =  min(1, max( 0, pha_gain*( -(cos(pha - pha_ang) )-abs(pha_gain)+1)));
      //pha_mul = 1+( pha_gain*(cos((pha+pha_ang*pi)) )-abs(pha_gain) )/2;
      rC = pha_mul * (rA + rB)/2;
      iC = pha_mul * (iA + iB)/2;
      rA = rC;
      iA = iC;
      rB = rC;
      iB = iC;
    //);
    //*/
    
    /*
    // Phase Filter
    //pha < pha_ang-pha_ang_tol || pha > pha_ang+pha_ang_tol ? (
      pha = atan2(iH,rH);
      pha_mul = min(1, max( 0, pha_gain*abs(pha+pha_ang*pi)/pi - pha_gain + 1 ));
      //pha_mul = 1+( pha_gain*(cos((pha+pha_ang*pi)) )-abs(pha_gain) )/2;
      rC = pha_mul * (rA + rB)/2;
      iC = pha_mul * (iA + iB)/2;
      rA = rC;
      iA = iC;
      rB = rC;
      iB = iC;
    //);
    //*/
    
    
    /*
    // vocalrediso.ny
      phase_width = $pi/2*pha_ang_tol;
      normA = sqrt(sqr(rA) + sqr(iA));
      normB = sqrt(sqr(rB) + sqr(iB));
      w1 = acos((rA * rB + iA * iB) / (normA * normB)) / phase_width;
      weight = (1 - min(1, max(0, w1))) * (1 - (sqr(normA - normB)/sqr(normA + normB)));
      
      rA *= weight;
      iA *= weight;
      rB *= weight;
      iB *= weight;
    //*
      rC = (rA + rB)/2;
      iC = (iA + iB)/2;
      rA = rC;
      iA = iC;
      rB = rC;
      iB = iC;
    //*/
    
    
    //*
    // Re-fold back into complex spectrum
    fft_buffer[2*fft_bin   ] = ( rA - iB)*0.5;
    fft_buffer[2*fft_bin+1 ] = ( iA + rB)*0.5;
    fft_buffer[2*fft_bin2  ] = ( rA + iB)*0.5;
    fft_buffer[2*fft_bin2+1] = (-iA + rB)*0.5;
    //*/
    
    fft_bin += 1;
  );
);

function setup_stft_state(fft_size, first_time) (
  //////////////////////// Setup block
  // This is called when playback starts, or when the FFT size is changed
  0;
  ////////////////////////
);

MAX_FFT_SIZE = 32768;

freemem = 0;
freemem = (fft_buffer = freemem) + MAX_FFT_SIZE*2;
freemem = (window_buffer = freemem) + MAX_FFT_SIZE;

buffer_length = srate;
buffer_index = 0;
freemem = (input_buffer = freemem) + buffer_length*2;
freemem = (output_buffer = freemem) + buffer_length*2;

function window(r) local(s, s2, gaussian_width, x) (
  // When squared, the Hann window adds up perfectly for overlap >= 4, so it's suitable for perfect reconstruction
  (0.5 - 0.5*cos(r*2*$pi))/sqrt(0.375);
);

fft_size = 0;

@block

//overlap_factor = 4; // Default is 6, but 4 gives better result
fft_size = 256<<fft_size_index;
fft_interval = fft_size/overlap_factor;
fft_scaling_factor = 1/overlap_factor/fft_size;

fft_size != prev_fft_size ? (
  setup_stft_state(fft_size, prev_fft_size == 0);
  prev_fft_size = fft_size;
  // Fill window buffer
  i = 0;
  loop(fft_size,
    r = (i + 0.5)/fft_size;
    window_buffer[i] = window(r);
    i += 1;
  );
);

pdc_delay = fft_size;
pdc_bot_ch = 0;
pdc_top_ch = 2;

@sample

input_buffer[buffer_index*2] = spl0;
input_buffer[buffer_index*2 + 1] = spl1;

fft_counter += 1;
fft_counter >= fft_interval ? (
  fft_counter = 0;

  // Copy input to buffer
  bi = buffer_index - fft_size + 1;
  i = 0;
  loop(fft_size,
    i2 = bi + i;
    i2 < 0 ? i2 += buffer_length;

    fft_buffer[2*i] = input_buffer[2*i2]*window_buffer[i];
    fft_buffer[2*i + 1] = input_buffer[2*i2 + 1]*window_buffer[i];

    i += 1;
  );

  // Process buffer
  fft(fft_buffer, fft_size);
  fft_permute(fft_buffer, fft_size);

  process_stft_segment(fft_buffer, fft_size);

  fft_ipermute(fft_buffer, fft_size);
  ifft(fft_buffer, fft_size);

  // Add to output
  bi = buffer_index - fft_size + 1;
  i = 0;
  loop(fft_size,
    i2 = bi + i;
    (i2 < 0) ? i2 += buffer_length;

    output_buffer[2*i2] += fft_buffer[2*i]*fft_scaling_factor*window_buffer[i];
    output_buffer[2*i2 + 1] += fft_buffer[2*i + 1]*fft_scaling_factor*window_buffer[i];

    i += 1;
  );
);

output_index = buffer_index - fft_size;
output_index < 0 ? output_index += buffer_length;
spl0 = output_buffer[output_index*2];
spl1 = output_buffer[output_index*2 + 1];
output_buffer[output_index*2] = 0; // clear the sample we just read
output_buffer[output_index*2 + 1] = 0;

buffer_index = (buffer_index + 1)%buffer_length;
