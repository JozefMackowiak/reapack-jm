desc:Median Filter [JM]
slider1:window=3<1,33,2>Window Length
slider2:delta=0<0,1,0.001>Delta
//slider3:algorithm=0<0,1,1{Quick Sort, Bubble Sort}>Algorithm

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
bufpos=0;

//  quickSort: public-domain C implementation by Darel Rex Finley.
function QSort(arr, elements, beg, end)
local (int  piv, i, L, R, swap)
(
  i = 0;
  beg[0]=0; end[0]=elements;
  
  while (i>=0) 
  (
    L=beg[i]; R=end[i]-1;
    (L<R) ? 
    (
      piv=arr[L];
      while (L<R) 
      (
        while ((arr[R]>=piv) && (L<R)) (R-=1;); 
        (L<R) ? (arr[L]=arr[R];L+=1;);
        while ((arr[L]<=piv) && (L<R)) (L+=1;); 
        (L<R) ? (arr[R]=arr[L];R-=1;);
      );

      arr[L]=piv; beg[i+1]=L+1; end[i+1]=end[i]; end[i]=L; i+=1;
      (end[i]-beg[i]>end[i-1]-beg[i-1]) ? 
      (
        swap=beg[i]; beg[i]=beg[i-1]; beg[i-1]=swap;
        swap=end[i]; end[i]=end[i-1]; end[i-1]=swap; 
      )
    ) : 
    (
      i-=1; 
    )
  )
);

//*
function BubbleSort(buffer,length)
local (k, i) (
  loop (length,
    i = 0;
    loop (length - 1,
      buffer[i] > buffer[i + 1] ? (
        k = buffer[i];
        buffer[i] = buffer[i + 1];
        buffer[i + 1] = k;
      );
      i += 1;
    );
  );
);
//*/

//buffer_size = srate/4;
max_window_size = 128;

freemem = 0;
freemem = (spl0_buffer  = freemem) + max_window_size;
freemem = (spl1_buffer  = freemem) + max_window_size;
freemem = (sort0_buffer = freemem) + max_window_size;
freemem = (sort1_buffer = freemem) + max_window_size;
freemem = (q0_buffer = freemem) + max_window_size;
freemem = (q1_buffer = freemem) + max_window_size;

@slider

@block

@sample
spl0_buffer[bufpos] = spl0;
spl1_buffer[bufpos] = spl1;
bufpos += 1;
bufpos >= window ? bufpos = 0;

/*
//Q Sort
memcpy(sort0_buffer, spl0_buffer, window);
memcpy(sort1_buffer, spl1_buffer, window);

QSort(sort0_buffer,window,q0_buffer,q0_buffer+window);
QSort(sort1_buffer,window,q1_buffer,q1_buffer+window);

spl0 = sort0_buffer[floor(window/2)]-delta*spl0; // pick middle sample
spl1 = sort1_buffer[floor(window/2)]-delta*spl1;
//*/


//*
//Bubble Sort
memcpy(sort0_buffer, spl0_buffer, window);
memcpy(sort1_buffer, spl1_buffer, window);

BubbleSort(sort0_buffer,window);
BubbleSort(sort1_buffer,window);

spl0 = sort0_buffer[floor(window/2)]-delta*spl0;
spl1 = sort1_buffer[floor(window/2)]-delta*spl1;
//*/


/*
algorithm ? (
//Bubble Sort
memcpy(sort0_buffer, spl0_buffer, window);
memcpy(sort1_buffer, spl1_buffer, window);

BubbleSort(sort0_buffer,window);
BubbleSort(sort1_buffer,window);
):(
//Q Sort
memcpy(sort0_buffer, spl0_buffer, window);
memcpy(sort1_buffer, spl1_buffer, window);

QSort(sort0_buffer,window,q0_buffer,q0_buffer+window);
QSort(sort1_buffer,window,q1_buffer,q1_buffer+window);
);
spl0 = sort0_buffer[floor(window/2)]-delta*spl0; // pick middle sample
spl1 = sort1_buffer[floor(window/2)]-delta*spl1;
//*/

