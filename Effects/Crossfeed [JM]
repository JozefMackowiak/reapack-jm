noindex: truetags: Saike - Basic pitch shifter
version: 0.01
author: Joep Vanlier
changelog: initial commit
license: MIT
(C) Joep Vanlier 2020
the pitch lib. :).

desc:Crossfeed [JM]
options: gfx_hz = 50;

//import saike_pitchlib.jsfx-inc
//import Tale/lfo.jsfx-inc
import Tale/rc_filter.jsfx-inc
import Tale/rbj_filter.jsfx-inc


slider1:0<0,100,1>-Absolute Delay [spls]
slider2:0<0,100,1>-Integer Delay [spls]
slider3:0<0,0.99999,0.01>-Fractional Delay [spls]
slider4:0.27<0,1,0.0001>Delay [ms]
slider5:20000<0,20000,1>-Delay [Hz]
slider6:0<0,0.3,0.001>-Delay [m]

slider12:0.5<0,1,0.01>Smooth Coeff (0 = Off)

slider18:0<0,100,0.01>-SC Depth [ms]
slider20:18<-50,50,1>-Temperature [°C]


%slider30:0<0,1,1{Off,On}>Latency Compensation
slider31:500<20,20000,1>-Side Cutoff [Hz]
slider32:500<20,20000,1>-Delay LP Cutoff [Hz]
slider33:delay_gain=0.25<0,1,0.001>-Delay Gain

slider39:amount=1<0,1,0.001>Amount
slider40:1<0,2,1{Filter,Delay,Allpass}>Mode
//slider40:1<0,2,1{Standard,Realistic,Hyperrealistic}>Algorithm
//slider41:multi=0<0,1,0.001>Multi
//slider42:multi2=0<0,1,0.001>Multi2
//slider43:a=0<0,0.1,0.0001>a
 

@init
multi=0.57;
multi2=0.125;
sqrt2div2 = sqrt(2)/2;
sqrt2 = sqrt(2);

function calc () (

  (oldms != slider4) ? (
    oldms    = slider4;

      old = oldl = srate*oldms/1000;
      oldh  = old | 0;
      oldl  = old - oldh;
      oldhz = 1/(old+1)*(srate);
      oldm = old/srate*(331.5+0.6*slider20);
  
    slider1 = old ;
    slider2 = oldh;
    slider3 = oldl;

    slider5 = oldhz;
    slider6 = oldm;
  );

  (oldhz != slider5) ? (
    oldhz   = slider5;
  
      old   = 1/oldhz*(srate)-1;
      oldh  = old | 0;
      oldl  = old - oldh;
      oldms = 1000*old/srate;
      oldm = old/srate*(331.5+0.6*slider20);
  
    slider1 = old ;
    slider2 = oldh;
    slider3 = oldl;
    slider4 = oldms;

    slider6 = oldm;
  );  

  (oldm != slider6) ? (
    oldm    = slider6;
  
      old   = oldm*srate/((331.5+0.6*slider20));
      oldh  = old | 0;
      oldl  = old - oldh;
      oldhz = 1/(old+1)*(srate);
      oldms = 1000*old/srate;
  
    slider1 = old;
    slider2 = oldh;
    slider3 = oldl;
    slider4 = oldms;
    slider5 = oldhz;
  ); 
  
  (oldh != slider2) || (oldl != slider3) ? (
    oldh    = slider2;
    oldl    = slider3;
  
      old   = oldh + oldl;
      oldh  = old | 0;
      oldl  = old - oldh;
      oldms = 1000*old/srate;
      oldhz = 1/(old+1)*(srate);
      oldm = old/srate*(331.5+0.6*slider20);
  
    slider1 = old ;
  
    slider4 = oldms;
    slider5 = oldhz;
    slider6 = oldm;
  ); 
  
  old != slider1 ? (
    oldh    = slider1;
    oldh    = oldh | 0;

      oldl  = oldh;
      oldh  = oldh | 0;
      oldl  = oldl - oldh;
      old   = oldh + oldl;
      oldms = 1000*old/srate;
      oldhz = 1/(old+1)*(srate);
      oldm  = old/srate*(331.5+0.6*slider20);
 
    slider1 = old;
    slider2 = oldh;
    slider3 = oldl;
    slider4 = oldms;
    slider5 = oldhz;
    slider6 = oldm;
  );  
);

  old    = -1;
  oldl   = -1;
  oldh   = -1;
  oldms  = -1;
  oldhz  = -1;
  oldm   = -1;
  

function pitchlibInitBuffer(scopebuffer_in, scopebuffermax_in)
  local()
  global()
  instance(scopeptr, scopebuffermax, scopebuffer, len)
  (
    scopebuffer     = scopebuffer_in;
    scopebuffermax  = scopebuffermax_in;
    len             = scopebuffermax_in - scopebuffer_in;
    
    scopeptr < scopebuffer ? (
      scopeptr = scopebuffer
    ) : ( scopeptr >= scopebuffermax ) ? scopebuffer
  );
 
function pitchlibReadBufferAt(dtime)
  local(t, t2, offset,
        tm1, tm2, tm3, tm4,
        a0, a1, a2, a3, a4,
        d0l, d1l, d2l, d3l, d4l,
        d0r, d1r, d2r, d3r, d4r,
        y1l, y1r, k)
  global()
  instance(scopeptr, readptr, scopebuffermax, scopebuffer, frac, outL, outR, len)
  (
    readptr   = scopeptr;
    offset    = dtime - floor(dtime) + floor(dtime*.5)*2;
    frac      = dtime * .5 - floor(dtime * .5);
    readptr  -= floor(offset)+4;
    readptr < scopebuffer ? readptr += len;
    
    

    d1l = readptr[0];
    d1r = readptr[1];
    
    (readptr += 2) >= scopebuffermax ? readptr -= len;
        
    d0l = readptr[0];
    d0r = readptr[1];
    
    
    //k = (1-(frac))/(1.01+(frac));
    k = (1-(frac))/(1+(frac));
    outL = k*(d0l-y1l)+d1l;
    outR = k*(d0r-y1r)+d1r;
    y1l = outL;
    y1r = outR;
    
    
    
  );

function pitchlibUpdateBuffer2(ll, rr)
  local()
  global()
  instance(scopeptr, scopebuffermax, scopebuffer, len)
  (
    scopeptr[] = ll;
    scopeptr[1] = rr;
    scopeptr += 2;
    scopeptr >= scopebuffermax ? scopeptr -= len;
  );
  

//location = 65536*4;
//bigbuffer = 65536*40;
location = 65536*4;
bigbuffer = 65536/64;
M.pitchlibInitBuffer(location, location + bigbuffer);

function smooth_parameter(target)
instance(s, coeff)
global()
local(y, v)
(
  v = coeff*(target - s);
  y = v + s;
  s = y + v;
  y
);

function initialize_smoother(cutoff)
instance(coeff)
global(srate)
local(g)
( 
  g = tan($pi*cutoff/srate);
  coeff = g/(1+g);  
);

function interpolator_init(slider_idx)
instance(next_val, idx, s)
local()
global()
(
  s = slider(slider_idx);
  next_val = slider(slider_idx);
  idx = slider_idx;
);

function interpolator_block()
instance(delta, next_changepoint_t, next_val, idx)
local(next_changepoint_y)
global(samplesblock)
(
  next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
  next_changepoint_t > 0 ? 
  (
    next_val = slider(idx);
  ) : (
    next_changepoint_y = slider(idx);
    next_changepoint_t = samplesblock;
  );
    
  delta = (next_changepoint_y - next_val) / next_changepoint_t;
);
  
function interpolate()
instance(delta, next_changepoint_t, next_val, idx, coeff)
local(current_value, next_changepoint_y)
global(current_sample)
(
  current_value = next_val;
  current_sample == next_changepoint_t ? 
  (
    delta = 0;
    next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
    delta = next_changepoint_t > current_sample ? (next_changepoint_y - current_value) / (next_changepoint_t-current_sample) : 0;
  );
    
  next_val = current_value + delta;
    
  coeff > 0 ? this.smooth_parameter(current_value) : current_value
);

M_interpolator.interpolator_init(1); //init delay value interpolation

@slider
calc(); 

//delay = slider1;
fb = slider7;
rot=slider8*0.017453292;
PinPon = slider9;
LFOF = slider10;
LFOD = slider11*srate/1000;
FpolL = slider14 & 1 ? -1 : 1;
FpolR = slider14 & 2 ? -1 : 1;
OpolL = slider15 & 1 ? -1 : 1;
OpolR = slider15 & 2 ? -1 : 1;
unit = slider16;
SCD = slider18*srate/1000;
M_interpolator.initialize_smoother(slider12); //interpolation coeff
latency_mode = slider19;

mode = slider40;


hp0.rc_setf(slider31);
hp1.rc_setf(slider31);
lp0.rc_setf(slider32);
lp1.rc_setf(slider32);

ap0.rbj_ap(oldhz/2,sqrt2div2);
ap1.rbj_ap(oldhz/2,sqrt2div2);

@block
M_interpolator.interpolator_block();

@sample
spl0org = spl0;
spl1org = spl1;
//*
PinPon == 1 ? (
  spl0 = spl1org;
  spl1 = spl0org;
);
//*/


x = M_interpolator.interpolate();
M = (x*2);


//*
mode == 0 ? ( //Standard
  mid = (spl0 + spl1)/2;
  sid = hp0.rc_hp((spl0 - spl1)/2);
  
  s0 = (mid + sid) + 0.0725*(mid - sid);
  s1 = (mid - sid) + 0.0725*spl0;
):
//*/

//*
mode == 1 ? ( //Realistic
  M.pitchlibUpdateBuffer2(spl0, spl1);
  M.pitchlibReadBufferAt(M);
  hp_spl0 = hp0.rc_hp(spl0);
  hp_spl1 = hp1.rc_hp(spl1);
  spl0_d = M.outL;
  spl1_d = M.outR;
  lp_spl0_d = lp0.rc_lp(spl0_d);
  lp_spl1_d = lp1.rc_lp(spl1_d);
  s0 = (spl0*multi + hp_spl0*(1-multi)) + multi*(spl1_d*multi2 + lp_spl1_d*(1-multi2)); //Crossfeed
  s1 = (spl1*multi + hp_spl1*(1-multi)) + multi*(spl0_d*multi2 + lp_spl0_d*(1-multi2));
):
//*/

//*
mode == 2 ? ( //Hyperrealistic
  hp_spl0 = hp0.rc_hp(spl0);
  hp_spl1 = hp1.rc_hp(spl1);
  spl0_d = ap0.rbj_df1(spl0);
  spl1_d = ap1.rbj_df1(spl1);
  lp_spl0_d = lp0.rc_lp(spl0_d);
  lp_spl1_d = lp1.rc_lp(spl1_d);
  s0 = (spl0*multi + hp_spl0*(1-multi)) + multi*(spl1_d*multi2 + lp_spl1_d*(1-multi2)); //Crossfeed
  s1 = (spl1*multi + hp_spl1*(1-multi)) + multi*(spl0_d*multi2 + lp_spl0_d*(1-multi2));
);
//*/

spl0 = (1-amount)*spl0org + amount*s1;
spl1 = (1-amount)*spl1org + amount*s0;

spl0 *= 1.1;
spl1 *= 1.1;


@gfx
gfx_set(0.945, 0.945, 0.945, 1);
gfx_rect(0, 0, gfx_w, gfx_h);
//gfx_set(125/256, 207/256, 1, 1);
gfx_set(1, 1, 1, 5);
gfx_x = 5;
gfx_y = 5;
gfx_printf("Incurred lag: %f spls / %d spls", M/2, bigbuffer);
gfx_x = 5;
gfx_y = 15;
gfx_printf("Incurred lag: %f ms / %d ms", 1000 * M / (2*srate), 1000 * bigbuffer / (2*srate) );
gfx_x = 5;
gfx_y = 25;
gfx_printf("Incurred lag: %f Hz", 1/M*(srate));
gfx_x = 5;
gfx_y = 35;
gfx_printf("Incurred lag: %f mm", M/(2*srate)*((331.5+0.6*slider20/* [°C] */)*1000));
gfx_x = 5;
gfx_y = 45;
gfx_printf("Incurred lag: %f m", M/(2*srate)*((331.5+0.6*slider20/* [°C] */)));
gfx_x = 5;
gfx_y = 55;
gfx_printf("Speaker Angle: %3.0f °", 60*1000 * M / (2*srate)/0.271399, 1000 * bigbuffer / (2*srate) );
//gfx_x = 5;
//gfx_y = 65;
//gfx_printf("Speaker Angle: %3.0f °", 180*(abs((((M/(2*srate)*1000/0.271399/12 + 0.75)|0) - M/(2*srate)*1000/0.271399/12) * 4 - 1) - 1), 1000 * bigbuffer / (2*srate) );
gfx_x = 5;
gfx_y = 65;
gfx_printf("Sample Rate: %d Hz", srate);
debug=0.271399*3;

function qplot(mem, x, y, sc)
local(t, cy, lx, ly, x)
global()
(
  t = 0;
  cy = 0;
  lx = 0;
  ly = 0;
  loop(3000,
    cy = - sc * mem[t];
    gfx_line(x-.1, y + ly, x, y + 30*cy);
    x += .94;
    t += 1;
    ly = cy;
  );
);

  //listener
  lx = w2;
  ly = gfx_h-h2/4;
  lr = c/12;
  
  llx = ceil(lx-lr);
  rlx = ceil(lx+lr);
  
  s_angle = 60*1000 * M / (2*srate)/0.271399*($pi)/360;
  w2 = gfx_w/2;
  h2 = gfx_h/2;
  c = min(w2,h2);
  //gfx_set(1,1,1,0.8);
  gfx_set(0,0,0,0.7);
  
  //speaker dim
  sh = c/12;
  sw = c/15;
  sh = c/6;
  sw = c/8;
  
  //Left speaker
  lsx = lx+sin(-s_angle)*c;
  lsy = ly-cos(-s_angle)*c;
  
  //Right speaker
  rsx = lx+sin(s_angle)*c;
  rsy = ly-cos(s_angle)*c;
  
  //gfx_line(lx,ly,lsx,lsy);
  //gfx_line(lx,ly,rsx,rsy);
  
  
  gfx_arc(lx,ly,c, s_angle, -s_angle, 1);
  //gfx_circle(w2,h2,c/2,1,1);
  //gfx_set(0,0,0,1);
  gfx_circle(lx,ly,lr,1,1);
  
  gfx_line(llx,ly,lsx,lsy);
  gfx_line(rlx,ly,rsx,rsy);
  gfx_set(0,0,0,amount*0.7);
  //mode == 0 ? (gfx_set(1,0,0,amount*0.7);):
  //mode == 1 ? (gfx_set(0,0,0,amount*0.7);):
  //mode == 2 ? (gfx_set(0.8,0.1,1,amount*0.7););
  gfx_line(rlx,ly,lsx,lsy);
  gfx_line(llx,ly,rsx,rsy);
  
  //gfx_roundrect(lsx-sw/2,lsy-sh/2,sw,sh,2,1);
  //gfx_roundrect(rsx-sw/2,rsy-sh/2,sw,sh,2,1);
  gfx_set(0,0,0,1);
  gfx_rect(lsx-sw/2,lsy-sh/2,sw,sh,1);
  gfx_rect(rsx-sw/2,rsy-sh/2,sw,sh,1);
  
