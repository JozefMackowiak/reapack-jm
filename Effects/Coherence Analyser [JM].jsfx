desc:Coherence Analyser [JM]
author: Jozef Mackowiak
version: 0.0.0
changelog: Initial Commit
about:
  # Coherence
  STFT-based graphical coherence analyser.
  ### Features:
  - analysis decay factor and averaging factor
  - coherence and phase graph
  - average coherence readout

License: MIT
Copyright (C) 2023 Jozef Mackowiak

// Based on the STFT-Based Effect Template by Geraintluff


options: gfx_hz = 60;

//slider1:fft_size_index=2<0,7,1{256,512,1024,2048,4096,8192,16384,32768>FFT size
slider1:fft_size_index=2<0,6,1{256,512,1024,2048,4096,8192,16384>FFT size
slider10:height=1<0,10,0.001>-Height
slider11:width=1<0,2,0.001>-Width
slider12:scx=1<0,1,0.001>-Scale X
slider13:shx=0<-1,0,0.001>-Shift X
slider14:blur=0<0,1,0.00001>-Time Blur
slider15:analysis_decay_factor=0.8<0,1,0.00001>Analysis Decay Factor
slider16:coherence_decay_factor=0.8<0,1,0.00001>Coherence Decay Factor
//slider13:magnitude=0<0,1,{Off,On}>Magnitude
slider17:overlap=4<1,16,1>Overlap

slider20:export=0<0,1,1{Off,On}>Export

slider64:suppresion_factor=1<0,10,0.00001>Suppresion Factor


in_pin:left input
in_pin:right input
out_pin:none

import Tale/complex.jsfx-inc

@init
pi = $pi;
pi2 = 2*$pi;

MAX_FFT_SIZE = 32768;

freemem = 0;
//freemem = (fft_buffer = freemem) + MAX_FFT_SIZE*2;

//freemem = (phase_buffer = freemem) + MAX_FFT_SIZE*2;
//freemem = (l_mag_buffer = freemem) + MAX_FFT_SIZE*2;
//freemem = (r_mag_buffer = freemem) + MAX_FFT_SIZE*2;
freemem = (fft_bufferA = freemem) + MAX_FFT_SIZE*2;
freemem = (fft_bufferB = freemem) + MAX_FFT_SIZE*2;
freemem = (G_AB_buffer = freemem) + MAX_FFT_SIZE*2;
freemem = (G_AA_buffer = freemem) + MAX_FFT_SIZE;
freemem = (G_BB_buffer = freemem) + MAX_FFT_SIZE;
freemem = (delay_bufferSum = freemem) + MAX_FFT_SIZE;
freemem = (export_buffer = freemem) + MAX_FFT_SIZE;

freemem = (window_buffer = freemem) + MAX_FFT_SIZE;

buffer_length = srate;
buffer_index = 0;
freemem = (input_buffer = freemem) + buffer_length*4;
//freemem = (output_buffer = freemem) + buffer_length*2;


function window(r) local(s, s2, gaussian_width, x) (
  // When squared, the Hann window adds up perfectly for overlap >= 4, so it's suitable for perfect reconstruction
  (0.5 - 0.5*cos(r*2*$pi))/sqrt(0.375);
);

fft_size = 0;

@block

overlap_factor = overlap;
fft_size = 256<<fft_size_index;
fft_interval = fft_size/overlap_factor;
fft_scaling_factor = 1/overlap_factor/fft_size;

fft_size != prev_fft_size ? (
  //setup_stft_state(fft_size, prev_fft_size == 0);
  prev_fft_size = fft_size;
  // Fill window buffer
  i = 0;
  loop(fft_size,
    r = (i + 0.5)/fft_size;
    window_buffer[i] = window(r);
    i += 1;
  );
);

//pdc_delay = fft_size;
//pdc_bot_ch = 0;
//pdc_top_ch = 2;

@slider
//export = slider20;

@sample
pass = 0;
input_buffer[buffer_index*2  ] = spl0;
input_buffer[buffer_index*2+1] = spl1;

fft_counter += 1;

buffer_index = (buffer_index + 1)%buffer_length;


@gfx
fft_counter >= fft_interval ? (
  fft_counter = 0;

  // Copy input to buffer
  bi = buffer_index - fft_size + 1;
  i = 0;
  loop(fft_size,
    i2 = bi + i;
    i2 < 0 ? i2 += buffer_length;
    
    //*
    //delay_index = buffer_index - fft_size + i + 1;
    fft_bufferA[i*2] = input_buffer[2*i2]*window_buffer[i];
    fft_bufferA[i*2 + 1] = 0;
    fft_bufferB[i*2] = input_buffer[2*i2 + 1]*window_buffer[i];
    fft_bufferB[i*2 + 1] = 0;
    //*/

    i += 1;
  );

  // Process buffer
  fft(fft_bufferA, fft_size);
  fft(fft_bufferB, fft_size);
  fft_permute(fft_bufferA, fft_size);
  fft_permute(fft_bufferB, fft_size);
  
  i = 0;
  while (i < fft_size) (
    /*
    rA = fft_bufferA[2*i]^2;
    iA = fft_bufferA[2*i + 1]^2;
    rB = fft_bufferB[2*i]^2;
    iB = fft_bufferB[2*i + 1]^2;
    //*/
    
    /*
    rA = fft_bufferA[2*i];
    iA = fft_bufferA[2*i + 1];
    rB = fft_bufferB[2*i];
    iB = fft_bufferB[2*i + 1];
    //*/
    
    //*
    //zA.cplx_set(fft_bufferA[2*i]^2, fft_bufferA[2*i + 1]^2);
    //zB.cplx_set(fft_bufferB[2*i]^2, fft_bufferB[2*i + 1]^2);
    zA.cplx_set(fft_bufferA[2*i], fft_bufferA[2*i + 1]);
    zB.cplx_set(fft_bufferB[2*i], fft_bufferB[2*i + 1]);
    zA_conj.cplx_conj(zA);
    zB_conj.cplx_conj(zB);
    
    //*
    G_AA.cplx_mul(zA_conj, zA);
    G_BB.cplx_mul(zB_conj, zB);
    G_AB.cplx_mul(zA_conj, zB);
    //*/
    
    /*
    G_AA.cplx_sqr(zA);
    G_BB.cplx_sqr(zB);
    G_AB.cplx_mul(zA, zB);
    //*/
    
    //G_AB_abs.cplx_add(x*[, y*])
    
    G_AB_im_avg = G_AB_buffer[2*i  ] = G_AB_buffer[2*i  ]*coherence_decay_factor + G_AB.im;
    G_AB_re_avg = G_AB_buffer[2*i+1] = G_AB_buffer[2*i+1]*coherence_decay_factor + G_AB.re;
    G_AA_re_avg = G_AA_buffer[2*i] = G_AA_buffer[2*i]*coherence_decay_factor + G_AA.re;
    G_BB_re_avg = G_BB_buffer[2*i] = G_BB_buffer[2*i]*coherence_decay_factor + G_BB.re;
    
    //G_AB_abs_sqr = (G_AB_buffer[2*i]^2 + G_AB_buffer[2*i+1]^2);
    //G_AB_abs = G_AB.cplx_abs();
    //G_AB_abs_sqr = (G_AB.re^2 + G_AB.im^2);
    //G_AB_abs_sqr = G_AB_abs^2;
    
    G_AB_avg_abs_sqr = (G_AB_re_avg^2 + G_AB_im_avg^2);
    
    //G_AB_abs_sqr.cplx_sqr(G_AB_abs);
    //G_AA_G_BB.cplx_mul(G_AA, G_BB);
    
    //G_AA_G_BB_recip.cplx_recip(G_AA_G_BB);
    
    //delta_sqr.cplx_div(G_AB_abs_sqr, G_AA_G_BB);
    //delta_sqr.cplx_mul(G_AB_abs_sqr, G_AA_G_BB_recip);
    
    //G_AB.cplx_mul_real(G_AB, 1/fft_size/100);
    //delta_out.cplx_mul_real(delta_sqr, fft_size*100000000000);
    //*/
    
    //*
    //fft_bufferA[2*i  ] = G_AB_avg_abs_sqr / (G_AA_re_avg*G_BB_re_avg);
    fft_bufferA[2*i  ] = (G_AB_avg_abs_sqr / (G_AA_re_avg*G_BB_re_avg))^suppresion_factor;
    //coherence = G_AB_avg_abs_sqr / (G_AA_re_avg*G_BB_re_avg);
    //fft_bufferA[2*i  ] = (coherence-1)/(exp(suppresion_factor)*coherence-coherence+1) + 1;;
    fft_bufferA[2*i+1] = -atan2(G_AB_im_avg,G_AB_re_avg);
    //*/
    
    /*
    fft_bufferA[2*i  ] = G_AB_abs_sqr * G_AA_G_BB_recip.re;
    fft_bufferA[2*i+1] = G_AB_abs_sqr * G_AA_G_BB_recip.im;
    //*/
    
    /*
    fft_bufferA[2*i  ] = delta_out.re;
    fft_bufferA[2*i+1] = delta_out.im;
    //*/
    
    /*
    fft_bufferA[2*i  ] = delta_sqr.re;
    fft_bufferA[2*i+1] = delta_sqr.im;
    //*/
    
    /*
    fft_bufferA[2*i  ] = G_AA.re;
    fft_bufferA[2*i+1] = G_AA.im;
    //*/
    
    /*
    fft_bufferA[2*i  ] = G_AB.re;
    fft_bufferA[2*i+1] = G_AB.im;
    //*/
    
    
    /*
    // Magnitude by which we divide - A, B or both
    // The one being corrected determines the amplitude, so doesn't get divided
    //amplitude_mode === 1 || (receive_routing_id && gmem[_GMEM_SOURCE_CORRECT_SENDING]) ? (
      //mag2 = (rA*rA + iA*iA);
    //) : amplitude_mode === 2 || (receive_routing_id && !gmem[_GMEM_SOURCE_CORRECT_SENDING]) ? (
          mag2 = (rB*rB + iB*iB);
    //) : (
      //mag2 = (rA*rA + iA*iA)*(rB*rB + iB*iB);
      //amplitude_mode === 0 ? (
        //mag2 = sqrt(mag2);
      //);
    //);
    mag = sqrt(mag2);
    factor = 1/(max(mag, 0.000001))/fft_size;
    fft_bufferA[2*i  ] = ( rA*rB + iA*iB)*factor;
    fft_bufferA[2*i+1] = (-rA*iB + iA*rB)*factor;
    //*/
    
    
    
    i += 1;
  );
  
  /*
  fft_ipermute(fft_bufferA, fft_size);
  ifft(fft_bufferA, fft_size);
  //*/

//*
  //analysis_decay_hz = 1; /// 5-0
  //analysis_decay_invsamples = analysis_decay_hz/srate;
  //analysis_decay_samples = srate / analysis_decay_hz;
  //analysis_decay_factor = analysis_decay_hz === 0 ? 1 : exp(-delay_fftinterval/analysis_decay_samples);

  max_abs = 0;
  max_phase = 1;
  max_index = 0;
  i = 0;
  loop(fft_size,
    //i2 = (i + fft_size/2 + floor(shx*fft_size/2))%fft_size;
    i2 = (i + fft_size/2)%fft_size;
    i2=i;
    value = delay_bufferSum[i2] = delay_bufferSum[i2]*analysis_decay_factor + fft_bufferA[2*i];
    //value = delay_bufferSum[i] = delay_bufferSum[i]*analysis_decay_factor + fft_bufferA[i];
    i += 1;
    
    abs(value) >= max_abs ? (
      i_wrapped = (i > fft_size/2) ? i - fft_size : i;
    
      (delay_peak_minsample == delay_peak_maxsample) || (
        i_wrapped >= min(delay_peak_minsample, delay_peak_maxsample)
        && i_wrapped <= max(delay_peak_minsample, delay_peak_maxsample)
      ) ? (
        max_abs = abs(delay_bufferSum[i2]);
        max_index = i_wrapped;
        max_phase = delay_bufferSum[i2] < 0 ? -1 : 1;
      );
    );
    
  );
//*/ 

  pass = 1;
);

//*
export ? (
  i = 0;
  loop(fft_size,
    export_buffer[i] = delay_bufferSum[i]/max_abs/2;
    i += 1;
  );
  export_buffer_to_project(export_buffer,fft_size,1,srate,0);
  export=0;
  //export_buffer_to_project(buffer,length_samples,nch,srate,track_index[,flags,tempo,planar_pitch])
);
//*/

gfx_r=gfx_g=gfx_b=0; gfx_a=(1-blur); // Time Blur
gfx_x=gfx_y=0;
gfx_rectto(gfx_w,gfx_h);

gfx_clear=-1;
//* /// Clear buffer ///
mouse_cap || old_fft_size != fft_size ? (
  gfx_clear=0;
  memset(delay_bufferSum, 0, fft_size);
  memset(G_AB_buffer, 0, fft_size*2);
  memset(G_AA_buffer, 0, fft_size);
  memset(G_BB_buffer, 0, fft_size);
  old_fft_size = fft_size;
);
//*/
pass ? (gfx_flush):(gfx_wait);


//size = min(gfx_w,gfx_h)|0;
//gfx_setpixel(1,1,1);
gfx_set(1,1,1,1);
display_size = floor(fft_size*scx);
fft_size2 = fft_size*2;
//scalex = width*gfx_w/fft_size;
scalex = width*gfx_w/display_size;
scaley = height*gfx_h/fft_size;
  ascale=gfx_h/$pi*0.25;
  xscale=800/(fft_size-4);
  sc=(gfx_h)*20/(-144 * log(10));
  wsc=gfx_w/log(1+400);
  debug=(10^(-500/20*2));

  //z = mult*radius*gfx_h/2*(1/fft_size);
  //old_x1=0;
  old_x1=floor(shx*gfx_w);
  i = 0;
  loop(display_size/2,
    
    //phi = phase_buffer[i];

    //l_mag = fft_buffer[i]*height*gfx_h/100; //r_mag = fft_buffer[2*i+1]*height*gfx_h*fft_size/2;
    l_mag = delay_bufferSum[i+floor((fft_size - display_size)*0.5)]*height*gfx_h/2/max_abs; r_mag = fft_bufferA[2*i+1]*height*gfx_h/pi2;
    //l_mag = fft_bufferA[2*i]*height*gfx_h*fft_size/2; r_mag = fft_bufferA[2*i+1]*height*gfx_h*fft_size/2; // wierd bechaviour
    //l_mag = fft_bufferA[2*i]*height*gfx_h*fft_size/2/max_abs; r_mag = fft_bufferA[2*i+1]*height*gfx_h*fft_size/2/max_abs; // wierd bechaviour
    //l_mag = fft_bufferA[i*2  ]*height*gfx_h/100; r_mag = fft_bufferA[i*2+1]*height*gfx_h/100;
    
    
    //x1 = i*scalex;
    x1 = 2*i*scalex + floor(shx*gfx_w);
    //x1 < 0 ? (x1+=gfx_w);
    //x1 = width*10*log10( i   /fft_size+1)*gfx_w;
    x1 = width*log(1.0+i*xscale)*wsc;
    
    gfx_set(1,0,0,1);
    gfx_line(x1, gfx_h-l_mag-gfx_h/2, old_x1, gfx_h-old_l_mag-gfx_h/2);
    phase_alpha = (delay_bufferSum[i+floor((fft_size - display_size)*0.5)]/max_abs)^4;
    gfx_set(0,0,1,phase_alpha);
    gfx_line(x1, gfx_h-r_mag-gfx_h/2, old_x1, gfx_h-old_r_mag-gfx_h/2);
    debug = delay_bufferSum[i+floor((fft_size - display_size)*0.5)];
    old_x1 = x1;
    old_l_mag = l_mag;
    old_r_mag = r_mag;

    i += 1;
  );
  
  coherence_avg = 0;
  i = 0;
  loop(fft_size,
    coherence_avg += fft_bufferA[2*i];
    i+=1;
  );
  coherence_avg *= 1/fft_size;


  gfx_set(1,1,1,1);
  spacing = 10;
  //*
  //gfx_h > 300 ? (
  gfx_x = 10; gfx_y = gfx_h - 15;
  gfx_printf(" AVG Coherence: %1.2f", coherence_avg); gfx_x=10;gfx_y+=spacing;
